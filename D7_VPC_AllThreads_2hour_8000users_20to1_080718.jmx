<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CLMS Test Plan Drupal 7 R18.2 VPC" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Student Workflow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">356</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1800</stringProp>
        <longProp name="ThreadGroup.start_time">1504762271000</longProp>
        <longProp name="ThreadGroup.end_time">1504762271000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay">1</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">perf.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="studentUsernamePrefix" elementType="Argument">
              <stringProp name="Argument.name">studentUsernamePrefix</stringProp>
              <stringProp name="Argument.value">zpaug2018s</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="servers" elementType="Argument">
              <stringProp name="Argument.name">servers</stringProp>
              <stringProp name="Argument.value">load1,load2,load3,load4,load5,load6,load7,load8,load9,load10,load11,load12,load13,load14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">clmsperf-load1.unicon.net,clmsperf-load2.unicon.net,clmsperf-load3.unicon.net,clmsperf-load4.unicon.net,clmsperf-load5.unicon.net,clmsperf-load6.unicon.net,clmsperf-load7.unicon.net</stringProp>
            </elementProp>
            <elementProp name="startUserPoolIndex" elementType="Argument">
              <stringProp name="Argument.name">startUserPoolIndex</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserPoolIndex" elementType="Argument">
              <stringProp name="Argument.name">endUserPoolIndex</stringProp>
              <stringProp name="Argument.value">7249</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="partitionUserPool" elementType="Argument">
              <stringProp name="Argument.name">partitionUserPool</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="constantDelayOffset" elementType="Argument">
              <stringProp name="Argument.name">constantDelayOffset</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activityTimeDelay" elementType="Argument">
              <stringProp name="Argument.name">activityTimeDelay</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="authurl" elementType="Argument">
              <stringProp name="Argument.name">authurl</stringProp>
              <stringProp name="Argument.value">auth-perf-vpc.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="scormusedelay" elementType="Argument">
              <stringProp name="Argument.name">scormusedelay</stringProp>
              <stringProp name="Argument.value">90000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="longclickdelay" elementType="Argument">
              <stringProp name="Argument.name">longclickdelay</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delay" elementType="Argument">
              <stringProp name="Argument.name">delay</stringProp>
              <stringProp name="Argument.value">60000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beanshell Samplers - Student" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[MS] BeanShell Sampler_1" enabled="true">
            <stringProp name="BeanShellSampler.query">if (${partitionUserPool}) {
    String[] split = &quot;${servers}&quot;.split(&quot;,&quot;);
    int startUserIndex = ${startUserPoolIndex};
    int endUserIndex = ${endUserPoolIndex};
    int partitionSize = (endUserIndex-startUserIndex+1) / split.length;

    for (int i=0; i&lt;split.length; i++) {
        if (split[i].trim().equals(&quot;${__machineName}&quot;)) {
            int start = startUserIndex + (i*partitionSize);
            int end = i == split.length-1 ? endUserIndex : start+partitionSize-1;
            System.out.println(&quot;[&quot;+start+&quot;, &quot;+end+&quot;]&quot;);
            vars.put(&quot;startUserIndex&quot;, &quot;&quot;+start);
            vars.put(&quot;endUserIndex&quot;, &quot;&quot;+end);
        }
    }
} else {
    System.out.println(&quot;Default user pool!&quot;);
    System.out.println(&quot;[${startUserPoolIndex}, ${endUserPoolIndex}]&quot;);
    vars.put(&quot;startUserIndex&quot;, &quot;${startUserPoolIndex}&quot;);
    vars.put(&quot;endUserIndex&quot;, &quot;${endUserPoolIndex}&quot;);
}

if (vars.get(&quot;userStart&quot;) == null) {
    vars.put(&quot;userStart&quot;, vars.get(&quot;startUserIndex&quot;));
    System.out.println(&quot;Setting userStart to: &quot; + vars.get(&quot;userStart&quot;));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[MS] BeanShell Sampler_2" enabled="true">
            <stringProp name="BeanShellSampler.query">int startIndex = Integer.valueOf(vars.get(&quot;startUserIndex&quot;)).intValue();
int endIndex = Integer.valueOf(vars.get(&quot;endUserIndex&quot;)).intValue();
int userStart = Integer.valueOf(vars.get(&quot;userStart&quot;)).intValue();

int count = Integer.valueOf(${__counter(FALSE)}).intValue();
int nextUserIndex = ((userStart + count) % (endIndex - startIndex + 1)) + startIndex;

vars.put(&quot;username&quot;, &quot;${studentUsernamePrefix}&quot; + nextUserIndex);

System.out.println(&quot;username: &quot; + vars.get(&quot;username&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Launch CLMS Main Splash" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 1 Launch CLMS Main Splash" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/splash</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Homepage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-200122526"> Welcome to the Cambridge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 19 Load Login iFrame" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">splashpage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">top</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="css_path" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">css_path</stringProp>
                  <stringProp name="Argument.value">https://${url}/main/p/en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">https://${url}/main/p/en/cas</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/splash</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Session ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jsessionid</stringProp>
              <stringProp name="RegexExtractor.regex">jsessionid=([^&quot;]+)\?page=splashpage&amp;amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">JSESSIONID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LT Value Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lt_value</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;lt&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">execution_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
            <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Student Login Process" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Login Process Started at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 34 Log in as Student" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${username}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">${lt_value}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${execution_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CAS Ticket Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cas_ticket</stringProp>
              <stringProp name="RegexExtractor.regex">ticket=([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CASTICKET_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100469201">&lt;input type=&quot;hidden&quot; name=&quot;lt</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="TestPlan.comments">In the response assertion, we ensure that the pattern below is NOT on the page, which if it does exist would indicate that the login failed (as the login page reloads due ot failed login)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 35 Process CAS Service Ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ticket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ticket</stringProp>
                  <stringProp name="Argument.value">${cas_ticket}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session Limit Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292635390">Session limit exceeded</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 37 My Learning Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/frontpage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class Name Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_name</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSNAME_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_id</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/CUP-([^&quot;]+)-([^&quot;]+)&quot;&gt;Class Home&lt;/a&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Class Home Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Class Name: &quot; +  vars.get(&quot;class_name&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Class ID: &quot; +  vars.get(&quot;class_id&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Access Class Areas" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] Click_Announcement MAIN STUDENT" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/t/p/tools/announcement/list/${class_id}/0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; rv:33.0) Gecko/20100101 Firefox/33.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.cambridgelms.org/main/t/p/tools/1197/events-calendar/2014/11/11</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="156781895">announcement</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="[MS] Click on &apos;Forums&apos; - " enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click on &apos;Forums&apos; MAIN STUDENT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/main/t/p/tools/${class_id}/forums</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.cambridgelms.org/main/p/frontpage</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Thread ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">thread_ID</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;thread_(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Forum ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">forum_ID</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;forum_(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Topic ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">topic_ID</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;topic_(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Content Number Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">content_number</stringProp>
                <stringProp name="RegexExtractor.regex">content_home/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Forums Page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1529081623">All Forums | Cambridge LMS</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Assert that Forum Page has been successfully launched</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] Click on &apos;Class Content&apos;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/content_home</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/frontpage</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tab_id</stringProp>
              <stringProp name="RegexExtractor.regex">/main/p/en/class/([^&quot;]+)/content_home/([^&quot;]+)&quot; tab_id</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">TABID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">course_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;course_nid&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">COURSEID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Access Class Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Tab ID: &quot; +  vars.get(&quot;tab_id&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Course ID: &quot; +  vars.get(&quot;course_id&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Play Contents" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on Content" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 72 Click on &apos;Content&apos;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/main/p/en/class/${class_name}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Item ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">item_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot;  is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text long-title-text&quot; title=&quot;Unit 1 All</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">ITEMID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CCM ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ccm_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot;  is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text long-title-text&quot; title=&quot;Unit 1 All</stringProp>
                <stringProp name="RegexExtractor.template">$5$</stringProp>
                <stringProp name="RegexExtractor.default"></stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
                <boolProp name="RegexExtractor.default_empty_value">true</boolProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course ID Extractor" enabled="false">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">course_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot;  is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text long-title-text&quot; title=&quot;Unit 1</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">COURSEID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="User ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">user_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot;  is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text long-title-text&quot; title=&quot;Unit 1 All</stringProp>
                <stringProp name="RegexExtractor.template">$6$</stringProp>
                <stringProp name="RegexExtractor.default">USERID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Content Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Item ID: &quot; +  vars.get(&quot;item_id&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;CCM ID: &quot; +  vars.get(&quot;ccm_id&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;User ID: &quot; +  vars.get(&quot;user_id&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Expand Unit 1" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 82 Expand Unit 1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="item_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">item_id</stringProp>
                    <stringProp name="Argument.value">${item_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ccm_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ccm_id</stringProp>
                    <stringProp name="Argument.value">${ccm_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="course_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">course_id</stringProp>
                    <stringProp name="Argument.value">${course_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="class_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">class_id</stringProp>
                    <stringProp name="Argument.value">${class_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${tab_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="level" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">level</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="visibility" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">visibility</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_id</stringProp>
                    <stringProp name="Argument.value">${user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_from_wa" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_from_wa</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Scorm 1 ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">scorm_id1</stringProp>
                <stringProp name="RegexExtractor.regex">launch_scorm/(.*?)/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">SCORMID1_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CCM ID 2 Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ccm_id2</stringProp>
                <stringProp name="RegexExtractor.regex">ccm_id=&quot;([^&quot;]+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">ITEMID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Expand Unit Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Scorm ID: &quot; +  vars.get(&quot;scorm_id1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;CCM ID2: &quot; +  vars.get(&quot;ccm_id2&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Navigate Unit 1" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Unit 1 Opener" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on Unit 1 Opener" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click Unit 1 Opener Link" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/launch_scorm/${scorm_id1}/${tab_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">unit1_configuration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">configuration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">CONFIGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">unit1_registration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">registration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">REGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="93 /ScormEngineInterface/defaultui/launch.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${unit1_configuration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${unit1_registration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/launch.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id1}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">unit1_configuration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">CONFIGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">unit1_registration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">REGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="99 /ScormEngineInterface/defaultui/deliver.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${unit1_configuration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${unit1_registration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/deliver.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id1}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegistrationToDeliver ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">registrationToDeliver_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(RegistrationToDeliver = new Registration)(.*?)(&apos;)(.*?)(&apos;,)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">RegistrationToDeliver1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LaunchHistoryId Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">launchHistory_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">LaunchHistoryId = &apos;(.*?)&apos;;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LaunchHistoryId1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 1 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id1_1</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 2 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id2_1</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${scormusedelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST /main/p/en/get_lebel1_contents/1/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ccm_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ccm_id</stringProp>
                        <stringProp name="Argument.value">${ccm_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id1}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Item ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">item_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">&lt;span expand_item_id = &quot;([^&quot;]+)&quot;  is_from_wa= &quot;&quot; class=&quot;title-text title_text_long&quot; level=&quot;1&quot; class_id=&quot;([^&quot;]+)&quot; item_id =&quot;([^&quot;]+)&quot; course_id=&quot;([^&quot;]+)&quot; class_id=&quot;([^&quot;]+)&quot; tab_id=&quot;([^&quot;]+)&quot; user_id=&quot;([^&quot;]+)&quot; title=&quot;([^&quot;]+)&quot;&gt;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">ITEMID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Click Unit 1 Opener Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;unit1_configuration_id1: &quot; +  vars.get(&quot;unit1_configuration_id1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;unit1_registration_id1: &quot; +  vars.get(&quot;unit1_registration_id1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;unit1_configuration_id2: &quot; +  vars.get(&quot;unit1_configuration_id2&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;unit1_registration_id2: &quot; +  vars.get(&quot;unit1_registration_id2&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));

System.out.println(&quot;registrationToDeliver_id1: &quot; +  vars.get(&quot;registrationToDeliver_id1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;launchHistory_id1: &quot; +  vars.get(&quot;launchHistory_id1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;activity_id1_1: &quot; +  vars.get(&quot;activity_id1_1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;activity_id2_1: &quot; +  vars.get(&quot;activity_id2_1&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;item_id2: &quot; +  vars.get(&quot;item_id2&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));</stringProp>
                  <stringProp name="BeanShellSampler.filename"></stringProp>
                  <stringProp name="BeanShellSampler.parameters"></stringProp>
                  <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Play Unit 1 Opener" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="143 Play Unit 1 Opener" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id1}&quot; LH=&quot;${launchHistory_id1}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_1}&quot; II=&quot;org_unit10transportexercise8&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43469315&quot; AtAD=&quot;43469315&quot; AEDT=&quot;19195&quot; AtEDT=&quot;19195&quot; AEDR=&quot;9900&quot; AtEDR=&quot;9900&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_1}&quot; II=&quot;book_cover_item&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43469315&quot; AtAD=&quot;43469315&quot; AEDT=&quot;19195&quot; AtEDT=&quot;19195&quot; AEDR=&quot;9900&quot; AtEDR=&quot;9900&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_1}&quot; CS=&quot;3&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;0&quot; SuS=&quot;1&quot; SD=&quot;&quot; TT=&quot;9400&quot; TTT=&quot;9348&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:46:10.815&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_lms_sb1_u1_tr&quot;/&gt;&lt;RT ts=&quot;22:46:14.928&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;19195&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">100.0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:6129ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Finish Unit 1 Opener" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="156 Click &apos;Finish&apos; Unit 1 Opener" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id1}&quot; LH=&quot;${launchHistory_id1}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id2_1}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43469315&quot; AtAD=&quot;43469315&quot; AEDT=&quot;19195&quot; AtEDT=&quot;19195&quot; AEDR=&quot;9900&quot; AtEDR=&quot;9900&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_1}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;20&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.2&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;9400&quot; TTT=&quot;9348&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_1}&quot; I=&quot;0&quot; Id=&quot;FrsISk&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-Be    2-on    3-time    4-Club    5-_________    6-are    7-___    8-_____    9-on    10-________    11-Be    12-________    13-_____    14-the    15-________    16-_____    17-are    18-____    19-Please    20-be    21-______    22-___    23-the    24-____    25-____    26-___________    27-______    28-____    29-___    30-______    31-___    32-the    33-computer    34-____    35-Please    36-_____    37-______    38-______    39-____    40-on    41-the    42-______    43-______    44-____    45-_______    46-___    47-the    48-____    49-Turn    50-off    51-the    52-__________    53-___    54-the    55-____    56-___    57-the    58-____    &quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_1}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-Be 2-on 3-time 4-Club 5-meetings 6-are 7-at 8-4:00 9-on 10-Mondays 11-Be 12-careful 13-with 14-the 15-laptops 16-They 17-are 18-new 19-Please 20-be 21-quiet 22-in 23-the 24-lab 25-Use 26-headphones 27-Don&amp;apos;t 28-eat 29-or 30-drink 31-in 32-the 33-computer 34-lab 35-Please 36-take 37-turns 38-Don&amp;apos;t 39-sit 40-on 41-the 42-desks 43-Don&amp;apos;t 44-use 45-phones 46-in 47-the 48-lab 49-Turn 50-off 51-the 52-computers 53-at 54-the 55-end 56-of 57-the 58-day &quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:46:10.815&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_lms_sb1_u1_tr&quot;/&gt;&lt;RT ts=&quot;22:46:14.928&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.615&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.615&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;20&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.2&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.618&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;FrsISk&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.618&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.619&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.621&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-Be    2-on    3-time    4-Club    5-_________    6-are    7-___    8-_____    9-on    10-________    11-Be    12-________    13-_____    14-the    15-________    16-_____    17-are    18-____    19-Please    20-be    21-______    22-___    23-the    24-____    25-____    26-___________    27-______    28-____    29-___    30-______    31-___    32-the    33-computer    34-____    35-Please    36-_____    37-______    38-______    39-____    40-on    41-the    42-______    43-______    44-____    45-_______    46-___    47-the    48-____    49-Turn    50-off    51-the    52-__________    53-___    54-the    55-____    56-___    57-the    58-____    &quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.622&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-Be 2-on 3-time 4-Club 5-meetings 6-are 7-at 8-4:00 9-on 10-Mondays 11-Be 12-careful 13-with 14-the 15-laptops 16-They 17-are 18-new 19-Please 20-be 21-quiet 22-in 23-the 24-lab 25-Use 26-headphones 27-Don&apos;t 28-eat 29-or 30-drink 31-in 32-the 33-computer 34-lab 35-Please 36-take 37-turns 38-Don&apos;t 39-sit 40-on 41-the 42-desks 43-Don&apos;t 44-use 45-phones 46-in 47-the 48-lab 49-Turn 50-off 51-the 52-computers 53-at 54-the 55-end 56-of 57-the 58-day &quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;19195&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">1000</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:31617ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Data - Unit 1 Opener" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="162 Save Data - Unit 1 Opener" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id1}&quot; LH=&quot;${launchHistory_id1}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_1}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:53:23.02Z&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43778020&quot; AtAD=&quot;43778020&quot; AEDT=&quot;62415&quot; AtEDT=&quot;62415&quot; AEDR=&quot;9900&quot; AtEDR=&quot;9900&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.2&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0.2&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_1}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:53:23.02Z&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43778020&quot; AtAD=&quot;43778020&quot; AEDT=&quot;62415&quot; AtEDT=&quot;62415&quot; AEDR=&quot;9900&quot; AtEDR=&quot;9900&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.2&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0.2&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;20&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_1}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;20&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.2&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;9400&quot; TTT=&quot;52568&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_1}&quot; I=&quot;0&quot; Id=&quot;FrsISk&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-Be    2-on    3-time    4-Club    5-_________    6-are    7-___    8-_____    9-on    10-________    11-Be    12-________    13-_____    14-the    15-________    16-_____    17-are    18-____    19-Please    20-be    21-______    22-___    23-the    24-____    25-____    26-___________    27-______    28-____    29-___    30-______    31-___    32-the    33-computer    34-____    35-Please    36-_____    37-______    38-______    39-____    40-on    41-the    42-______    43-______    44-____    45-_______    46-___    47-the    48-____    49-Turn    50-off    51-the    52-__________    53-___    54-the    55-____    56-___    57-the    58-____    &quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_1}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-Be 2-on 3-time 4-Club 5-meetings 6-are 7-at 8-4:00 9-on 10-Mondays 11-Be 12-careful 13-with 14-the 15-laptops 16-They 17-are 18-new 19-Please 20-be 21-quiet 22-in 23-the 24-lab 25-Use 26-headphones 27-Don&amp;apos;t 28-eat 29-or 30-drink 31-in 32-the 33-computer 34-lab 35-Please 36-take 37-turns 38-Don&amp;apos;t 39-sit 40-on 41-the 42-desks 43-Don&amp;apos;t 44-use 45-phones 46-in 47-the 48-lab 49-Turn 50-off 51-the 52-computers 53-at 54-the 55-end 56-of 57-the 58-day &quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:46:10.815&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_lms_sb1_u1_tr&quot;/&gt;&lt;RT ts=&quot;22:46:14.928&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.615&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.615&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;20&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.2&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.618&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;FrsISk&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.618&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.619&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.621&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-Be    2-on    3-time    4-Club    5-_________    6-are    7-___    8-_____    9-on    10-________    11-Be    12-________    13-_____    14-the    15-________    16-_____    17-are    18-____    19-Please    20-be    21-______    22-___    23-the    24-____    25-____    26-___________    27-______    28-____    29-___    30-______    31-___    32-the    33-computer    34-____    35-Please    36-_____    37-______    38-______    39-____    40-on    41-the    42-______    43-______    44-____    45-_______    46-___    47-the    48-____    49-Turn    50-off    51-the    52-__________    53-___    54-the    55-____    56-___    57-the    58-____    &quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.622&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-Be 2-on 3-time 4-Club 5-meetings 6-are 7-at 8-4:00 9-on 10-Mondays 11-Be 12-careful 13-with 14-the 15-laptops 16-They 17-are 18-new 19-Please 20-be 21-quiet 22-in 23-the 24-lab 25-Use 26-headphones 27-Don&apos;t 28-eat 29-or 30-drink 31-in 32-the 33-computer 34-lab 35-Please 36-take 37-turns 38-Don&apos;t 39-sit 40-on 41-the 42-desks 43-Don&apos;t 44-use 45-phones 46-in 47-the 48-lab 49-Turn 50-off 51-the 52-computers 53-at 54-the 55-end 56-of 57-the 58-day &quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:53:23.19&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:53:23.20&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:53:23.28&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:53:23.28&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Rollup Satisfaction&quot; v=&quot;failed&quot; ai=&quot;Netex&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;failed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;0.2&quot; ED=&quot;62415&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="163 Save Data - Unit 1 Opener" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id1}&quot; LH=&quot;${launchHistory_id1}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_1}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:53:23.02Z&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43778190&quot; AtAD=&quot;43778190&quot; AEDT=&quot;105743&quot; AtEDT=&quot;105743&quot; AEDR=&quot;52800&quot; AtEDR=&quot;52800&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.2&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0.2&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_1}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:53:23.02Z&quot; ASTU=&quot;2017-09-06T13:17:03.00Z&quot; AtSTU=&quot;2017-09-06T13:17:03.00Z&quot; AAD=&quot;43778190&quot; AtAD=&quot;43778190&quot; AEDT=&quot;105743&quot; AtEDT=&quot;105743&quot; AEDR=&quot;52800&quot; AtEDR=&quot;52800&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.2&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-06T13:17:09.00Z&quot; FNM=&quot;0.2&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;20&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_1}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;4&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;20&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.2&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;9400&quot; TTT=&quot;9348&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_1}&quot; I=&quot;0&quot; Id=&quot;FrsISk&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-Be    2-on    3-time    4-Club    5-_________    6-are    7-___    8-_____    9-on    10-________    11-Be    12-________    13-_____    14-the    15-________    16-_____    17-are    18-____    19-Please    20-be    21-______    22-___    23-the    24-____    25-____    26-___________    27-______    28-____    29-___    30-______    31-___    32-the    33-computer    34-____    35-Please    36-_____    37-______    38-______    39-____    40-on    41-the    42-______    43-______    44-____    45-_______    46-___    47-the    48-____    49-Turn    50-off    51-the    52-__________    53-___    54-the    55-____    56-___    57-the    58-____    &quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_1}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-Be 2-on 3-time 4-Club 5-meetings 6-are 7-at 8-4:00 9-on 10-Mondays 11-Be 12-careful 13-with 14-the 15-laptops 16-They 17-are 18-new 19-Please 20-be 21-quiet 22-in 23-the 24-lab 25-Use 26-headphones 27-Don&amp;apos;t 28-eat 29-or 30-drink 31-in 32-the 33-computer 34-lab 35-Please 36-take 37-turns 38-Don&amp;apos;t 39-sit 40-on 41-the 42-desks 43-Don&amp;apos;t 44-use 45-phones 46-in 47-the 48-lab 49-Turn 50-off 51-the 52-computers 53-at 54-the 55-end 56-of 57-the 58-day &quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:46:10.815&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_lms_sb1_u1_tr&quot;/&gt;&lt;RT ts=&quot;22:46:14.928&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.615&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.615&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;20&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.2&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.616&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.618&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;FrsISk&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:51:36.618&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.619&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.621&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-Be    2-on    3-time    4-Club    5-_________    6-are    7-___    8-_____    9-on    10-________    11-Be    12-________    13-_____    14-the    15-________    16-_____    17-are    18-____    19-Please    20-be    21-______    22-___    23-the    24-____    25-____    26-___________    27-______    28-____    29-___    30-______    31-___    32-the    33-computer    34-____    35-Please    36-_____    37-______    38-______    39-____    40-on    41-the    42-______    43-______    44-____    45-_______    46-___    47-the    48-____    49-Turn    50-off    51-the    52-__________    53-___    54-the    55-____    56-___    57-the    58-____    &quot; ai=&quot;t_01&quot; intid=&quot;FrsISk&quot;/&gt;&lt;RT ts=&quot;22:51:36.622&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-Be 2-on 3-time 4-Club 5-meetings 6-are 7-at 8-4:00 9-on 10-Mondays 11-Be 12-careful 13-with 14-the 15-laptops 16-They 17-are 18-new 19-Please 20-be 21-quiet 22-in 23-the 24-lab 25-Use 26-headphones 27-Don&apos;t 28-eat 29-or 30-drink 31-in 32-the 33-computer 34-lab 35-Please 36-take 37-turns 38-Don&apos;t 39-sit 40-on 41-the 42-desks 43-Don&apos;t 44-use 45-phones 46-in 47-the 48-lab 49-Turn 50-off 51-the 52-computers 53-at 54-the 55-end 56-of 57-the 58-day &quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:53:23.19&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:53:23.20&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:53:23.28&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:53:23.28&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Rollup Satisfaction&quot; v=&quot;failed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:53:24.90&quot; f=&quot;&quot; id=&quot;17&quot; ev=&quot;Set&quot; k=&quot;session time&quot; vh=&quot;42900&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:53:24.90&quot; f=&quot;&quot; id=&quot;18&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;suspend&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:53:24.90&quot; f=&quot;&quot; id=&quot;19&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;normal&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:53:24.90&quot; f=&quot;&quot; id=&quot;20&quot; ev=&quot;ApiTerminate&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:53:24.591&quot; f=&quot;&quot; id=&quot;21&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;failed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;0.2&quot; ED=&quot;105743&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${unit1_configuration_id2}&amp;registration=${unit1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">1000</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Expand Lesson A from Menu" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="159 Expand Lesson A from Unit 1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="item_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">item_id</stringProp>
                      <stringProp name="Argument.value">${item_id2}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="course_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">course_id</stringProp>
                      <stringProp name="Argument.value">${course_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="class_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">class_id</stringProp>
                      <stringProp name="Argument.value">${class_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="tab_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">tab_id</stringProp>
                      <stringProp name="Argument.value">${tab_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="level" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">level</stringProp>
                      <stringProp name="Argument.value">2</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="visibility" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">visibility</stringProp>
                      <stringProp name="Argument.value">INSIDE</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="user_id" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">user_id</stringProp>
                      <stringProp name="Argument.value">${user_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="is_from_wa" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">is_from_wa</stringProp>
                      <stringProp name="Argument.value"></stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/2/</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                  <stringProp name="RandomTimer.range">100.0</stringProp>
                  <stringProp name="TestPlan.comments">Recorded:69966ms</stringProp>
                </UniformRandomTimer>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id1}/${tab_id}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Scorm ID 2 Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">scorm_id2</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a title=&quot;([^&quot;]+)&quot; item_id =&quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; href=&quot;([^&quot;]+)&quot; class=&quot;([^&quot;]+) &quot; &gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">SCORMID2_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Scorm ID 3 Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">scorm_id3</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a title=&quot;([^&quot;]+)&quot; item_id =&quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; href=&quot;([^&quot;]+)&quot; class=&quot;([^&quot;]+) &quot; &gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">SCORMID3_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">2</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Scorm ID 4 Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">scorm_id4</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a title=&quot;([^&quot;]+)&quot; item_id =&quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; href=&quot;([^&quot;]+)&quot; class=&quot;([^&quot;]+) &quot; &gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">SCORMID4_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">3</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Scorm ID 5 Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">scorm_id5</stringProp>
                  <stringProp name="RegexExtractor.regex">&lt;a title=&quot;([^&quot;]+)&quot; item_id =&quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; href=&quot;([^&quot;]+)&quot; class=&quot;([^&quot;]+) &quot; &gt;</stringProp>
                  <stringProp name="RegexExtractor.template">$2$</stringProp>
                  <stringProp name="RegexExtractor.default">SCORMID5_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">4</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Expand Lesson A Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Scorm ID 2: &quot; +  vars.get(&quot;scorm_id2&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Scorm ID 3: &quot; +  vars.get(&quot;scorm_id3&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Scorm ID 4: &quot; +  vars.get(&quot;scorm_id4&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
System.out.println(&quot;Scorm ID 5: &quot; +  vars.get(&quot;scorm_id5&quot;) + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lesson A - First Item" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Starting Lesson A First Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on &apos;1 Meetings and greetings (A) &apos; - Lesson 1" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="164 Click on &apos;1 Meetings and greetings (A) &apos; - Lesson 1" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/launch_scorm/${scorm_id2}/${tab_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id1}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson1_configuration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">configuration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON1_CONFIGID_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson1_registration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">registration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON1_REGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="166 /ScormEngineInterface/defaultui/launch.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson1_configuration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson1_registration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/launch.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id2}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson1_configuration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON1_CONFIGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson1_registration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON1_REGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="168 /ScormEngineInterface/defaultui/deliver.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson1_configuration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson1_registration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/deliver.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id2}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegistrationToDeliver ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">registrationToDeliver_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(RegistrationToDeliver = new Registration)(.*?)(&apos;)(.*?)(&apos;,)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">RegistrationToDeliver2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LaunchHistoryId Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">launchHistory_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">LaunchHistoryId = &apos;(.*?)&apos;;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LaunchHistoryId2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 1 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id1_2</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id1_2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 2 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id2_2</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id2_2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${scormusedelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="167 /main/p/en/get_lebel1_contents/1/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ccm_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ccm_id</stringProp>
                        <stringProp name="Argument.value">${ccm_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id2}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="169 /main/p/en/get_lebel1_contents/2/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/2/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id2}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Play 1 Meetings and greetings (A) " enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="199 Load 1 Meetings and greetings (A)  - Play Content" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id2}&quot; LH=&quot;${launchHistory_id2}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_2}&quot; II=&quot;org_unit10transportexercise8&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;273790&quot; AtAD=&quot;273790&quot; AEDT=&quot;10873&quot; AtEDT=&quot;10873&quot; AEDR=&quot;5400&quot; AtEDR=&quot;5400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_2}&quot; II=&quot;book_cover_item&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;273790&quot; AtAD=&quot;273790&quot; AEDT=&quot;10873&quot; AtEDT=&quot;10873&quot; AEDR=&quot;5400&quot; AtEDR=&quot;5400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_2}&quot; CS=&quot;3&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;0&quot; SuS=&quot;1&quot; SD=&quot;&quot; TT=&quot;3500&quot; TTT=&quot;3698&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:53:39.283&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex1&quot;/&gt;&lt;RT ts=&quot;22:53:43.84&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;10873&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Check Lesson A" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="204 Check 1 Meetings and greetings (A) " enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id2}&quot; LH=&quot;${launchHistory_id2}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id2_2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;273790&quot; AtAD=&quot;273790&quot; AEDT=&quot;10873&quot; AtEDT=&quot;10873&quot; AEDR=&quot;5400&quot; AtEDR=&quot;5400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;56&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.56&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;3500&quot; TTT=&quot;3698&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_2}&quot; I=&quot;0&quot; Id=&quot;SJcm8M&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-chair,2-board,3-notebook,4-pencil,5-bookshelf&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-chair|||CHAIR|||Chair,2-board|||BOARD|||Board,3-notebook|||NOTEBOOK|||Notebook,4-pencil|||PENCIL|||Pencil,5-bookshelf|||BOOKSHELF|||Bookshelf,6-eraser|||ERASER|||Eraser,7-ruler|||RULER|||Ruler,8-backpack|||BACKPACK|||Backpack,9-book|||Book|||BOOK&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:53:39.283&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex1&quot;/&gt;&lt;RT ts=&quot;22:53:43.84&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.34&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.35&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.35&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;56&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.56&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.37&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;SJcm8M&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.38&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.38&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.40&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-chair,2-board,3-notebook,4-pencil,5-bookshelf&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.41&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-chair|||CHAIR|||Chair,2-board|||BOARD|||Board,3-notebook|||NOTEBOOK|||Notebook,4-pencil|||PENCIL|||Pencil,5-bookshelf|||BOOKSHELF|||Bookshelf,6-eraser|||ERASER|||Eraser,7-ruler|||RULER|||Ruler,8-backpack|||BACKPACK|||Backpack,9-book|||Book|||BOOK&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;10873&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname=" Save Data - Lesson 1" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="206 Save Data - Lesson 1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id2}&quot; LH=&quot;${launchHistory_id2}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_2}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:55:00.08Z&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;590870&quot; AtAD=&quot;590870&quot; AEDT=&quot;18953&quot; AtEDT=&quot;18953&quot; AEDR=&quot;5400&quot; AtEDR=&quot;5400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.56&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0.56&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:55:00.08Z&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;590870&quot; AtAD=&quot;590870&quot; AEDT=&quot;18953&quot; AtEDT=&quot;18953&quot; AEDR=&quot;5400&quot; AtEDR=&quot;5400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.56&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0.56&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;56&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;56&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.56&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;3500&quot; TTT=&quot;11778&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_2}&quot; I=&quot;0&quot; Id=&quot;SJcm8M&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-chair,2-board,3-notebook,4-pencil,5-bookshelf&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-chair|||CHAIR|||Chair,2-board|||BOARD|||Board,3-notebook|||NOTEBOOK|||Notebook,4-pencil|||PENCIL|||Pencil,5-bookshelf|||BOOKSHELF|||Bookshelf,6-eraser|||ERASER|||Eraser,7-ruler|||RULER|||Ruler,8-backpack|||BACKPACK|||Backpack,9-book|||Book|||BOOK&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:53:39.283&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex1&quot;/&gt;&lt;RT ts=&quot;22:53:43.84&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.34&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.35&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.35&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;56&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.56&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.37&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;SJcm8M&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.38&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.38&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.40&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-chair,2-board,3-notebook,4-pencil,5-bookshelf&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.41&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-chair|||CHAIR|||Chair,2-board|||BOARD|||Board,3-notebook|||NOTEBOOK|||Notebook,4-pencil|||PENCIL|||Pencil,5-bookshelf|||BOOKSHELF|||Bookshelf,6-eraser|||ERASER|||Eraser,7-ruler|||RULER|||Ruler,8-backpack|||BACKPACK|||Backpack,9-book|||Book|||BOOK&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:55:00.78&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:55:00.79&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:55:00.87&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:55:00.87&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Rollup Satisfaction&quot; v=&quot;failed&quot; ai=&quot;Netex&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;failed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;0.56&quot; ED=&quot;18953&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="207 Save Data - Lesson 1" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id2}&quot; LH=&quot;${launchHistory_id2}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_2}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:55:00.08Z&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;590890&quot; AtAD=&quot;590890&quot; AEDT=&quot;27034&quot; AtEDT=&quot;27034&quot; AEDR=&quot;13100&quot; AtEDR=&quot;13100&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.56&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0.56&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:55:00.08Z&quot; ASTU=&quot;2017-09-11T13:16:32.00Z&quot; AtSTU=&quot;2017-09-11T13:16:32.00Z&quot; AAD=&quot;590890&quot; AtAD=&quot;590890&quot; AEDT=&quot;27034&quot; AtEDT=&quot;27034&quot; AEDR=&quot;13100&quot; AtEDR=&quot;13100&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.56&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:16:43.00Z&quot; FNM=&quot;0.56&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;56&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;4&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;56&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.56&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;3500&quot; TTT=&quot;3698&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_2}&quot; I=&quot;0&quot; Id=&quot;SJcm8M&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-chair,2-board,3-notebook,4-pencil,5-bookshelf&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-chair|||CHAIR|||Chair,2-board|||BOARD|||Board,3-notebook|||NOTEBOOK|||Notebook,4-pencil|||PENCIL|||Pencil,5-bookshelf|||BOOKSHELF|||Bookshelf,6-eraser|||ERASER|||Eraser,7-ruler|||RULER|||Ruler,8-backpack|||BACKPACK|||Backpack,9-book|||Book|||BOOK&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:53:39.283&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex1&quot;/&gt;&lt;RT ts=&quot;22:53:43.84&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.34&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.35&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.35&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;56&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.56&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.36&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.37&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;SJcm8M&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:54:35.38&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.38&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.40&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-chair,2-board,3-notebook,4-pencil,5-bookshelf&quot; ai=&quot;t_01&quot; intid=&quot;SJcm8M&quot;/&gt;&lt;RT ts=&quot;22:54:35.41&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-chair|||CHAIR|||Chair,2-board|||BOARD|||Board,3-notebook|||NOTEBOOK|||Notebook,4-pencil|||PENCIL|||Pencil,5-bookshelf|||BOOKSHELF|||Bookshelf,6-eraser|||ERASER|||Eraser,7-ruler|||RULER|||Ruler,8-backpack|||BACKPACK|||Backpack,9-book|||Book|||BOOK&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:55:00.78&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:55:00.79&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:55:00.87&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:55:00.87&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Rollup Satisfaction&quot; v=&quot;failed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:55:00.98&quot; f=&quot;&quot; id=&quot;17&quot; ev=&quot;Set&quot; k=&quot;session time&quot; vh=&quot;7700&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:55:00.98&quot; f=&quot;&quot; id=&quot;18&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;suspend&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:55:00.98&quot; f=&quot;&quot; id=&quot;19&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;normal&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:55:00.98&quot; f=&quot;&quot; id=&quot;20&quot; ev=&quot;ApiTerminate&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:55:01.520&quot; f=&quot;&quot; id=&quot;21&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;failed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;0.56&quot; ED=&quot;27034&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson1_configuration_id2}&amp;registration=${lesson1_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">1000</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Ended Lesson A First Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lesson A - Second Item" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Starting Lesson A Second Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on Lesson A  - Second Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="208 Click on &apos;Lesson A - Second Item&apos;" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/launch_scorm/${scorm_id3}/${tab_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id2}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson2_configuration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">configuration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">CONFIGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson2_registration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">registration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">REGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="210 /ScormEngineInterface/defaultui/launch.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson2_configuration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson2_registration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/launch.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id3}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson2_configuration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON2_CONFIGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson2_registration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON2_REGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="211 /ScormEngineInterface/defaultui/deliver.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson2_configuration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson2_registration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/deliver.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id3}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegistrationToDeliver ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">registrationToDeliver_id3</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(RegistrationToDeliver = new Registration)(.*?)(&apos;)(.*?)(&apos;,)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">RegistrationToDeliver3_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LaunchHistoryId Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">launchHistory_id3</stringProp>
                    <stringProp name="RegexExtractor.regex">LaunchHistoryId = &apos;(.*?)&apos;;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LaunchHistoryId3_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 1 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id1_3</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id1_3_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 2 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id2_3</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id2_3_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${scormusedelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="254 /main/p/en/get_lebel1_contents/1/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ccm_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ccm_id</stringProp>
                        <stringProp name="Argument.value">${ccm_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="256 /main/p/en/get_lebel1_contents/2/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/2/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Play Lesson A - Second Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Play Lesson A - Second Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id3}&quot; LH=&quot;${launchHistory_id3}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_3}&quot; II=&quot;org_unit10transportexercise8&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;59779&quot; AtAD=&quot;59779&quot; AEDT=&quot;6981&quot; AtEDT=&quot;6981&quot; AEDR=&quot;3400&quot; AtEDR=&quot;3400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_3}&quot; II=&quot;book_cover_item&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;59779&quot; AtAD=&quot;59779&quot; AEDT=&quot;6981&quot; AtEDT=&quot;6981&quot; AEDR=&quot;3400&quot; AtEDR=&quot;3400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_3}&quot; CS=&quot;3&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;0&quot; SuS=&quot;1&quot; SD=&quot;&quot; TT=&quot;700&quot; TTT=&quot;857&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:55:15.977&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex2&quot;/&gt;&lt;RT ts=&quot;22:55:19.826&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;6981&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Check Lesson A - Second Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click Check Lesson A - Second Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id3}&quot; LH=&quot;${launchHistory_id3}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id2_3}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;59779&quot; AtAD=&quot;59779&quot; AEDT=&quot;6981&quot; AtEDT=&quot;6981&quot; AEDR=&quot;3400&quot; AtEDR=&quot;3400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_3}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;50&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.5&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;700&quot; TTT=&quot;857&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_3}&quot; I=&quot;0&quot; Id=&quot;K5cODc&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-violet,2-green,3-orange,4-magenta&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_3}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-purple|||PURPLE|||Purple,2-green|||Green|||GREEN,3-orange|||Orange|||ORANGE,4-brown|||BROWN|||Brown&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:55:15.977&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex2&quot;/&gt;&lt;RT ts=&quot;22:55:19.826&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.938&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;50&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.5&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.940&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.940&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.941&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;K5cODc&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.941&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.942&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.944&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-violet,2-green,3-orange,4-magenta&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.944&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-purple|||PURPLE|||Purple,2-green|||Green|||GREEN,3-orange|||Orange|||ORANGE,4-brown|||BROWN|||Brown&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;6981&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Data - Lesson A - Second Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="249 Save Data - Lesson A - Second Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id3}&quot; LH=&quot;${launchHistory_id3}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_3}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:56:58.82Z&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;397581&quot; AtAD=&quot;397581&quot; AEDT=&quot;17265&quot; AtEDT=&quot;17265&quot; AEDR=&quot;3400&quot; AtEDR=&quot;3400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.5&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_3}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:56:58.81Z&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;397581&quot; AtAD=&quot;397581&quot; AEDT=&quot;17265&quot; AtEDT=&quot;17265&quot; AEDR=&quot;3400&quot; AtEDR=&quot;3400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.5&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;50&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_3}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;50&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.5&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;700&quot; TTT=&quot;11141&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_3}&quot; I=&quot;0&quot; Id=&quot;K5cODc&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-violet,2-green,3-orange,4-magenta&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_3}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-purple|||PURPLE|||Purple,2-green|||Green|||GREEN,3-orange|||Orange|||ORANGE,4-brown|||BROWN|||Brown&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:55:15.977&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex2&quot;/&gt;&lt;RT ts=&quot;22:55:19.826&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.938&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;50&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.5&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.940&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.940&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.941&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;K5cODc&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.941&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.942&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.944&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-violet,2-green,3-orange,4-magenta&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.944&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-purple|||PURPLE|||Purple,2-green|||Green|||GREEN,3-orange|||Orange|||ORANGE,4-brown|||BROWN|||Brown&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:58.811&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:56:58.813&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:56:58.821&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:56:58.821&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Rollup Satisfaction&quot; v=&quot;failed&quot; ai=&quot;Netex&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;failed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;0.5&quot; ED=&quot;17265&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="250 Save Data - Lesson A - Second Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id3}&quot; LH=&quot;${launchHistory_id3}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_3}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:56:58.82Z&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;397583&quot; AtAD=&quot;397583&quot; AEDT=&quot;27551&quot; AtEDT=&quot;27551&quot; AEDR=&quot;13300&quot; AtEDR=&quot;13300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.5&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_3}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:56:58.81Z&quot; ASTU=&quot;2017-09-11T13:50:43.00Z&quot; AtSTU=&quot;2017-09-11T13:50:43.00Z&quot; AAD=&quot;397583&quot; AtAD=&quot;397583&quot; AEDT=&quot;27551&quot; AtEDT=&quot;27551&quot; AEDR=&quot;13300&quot; AtEDR=&quot;13300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_3}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;0&quot; MS=&quot;1&quot; NM=&quot;0.5&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:12.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;50&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_3}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;4&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;50&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;0.5&quot; SuS=&quot;3&quot; SD=&quot;&quot; TT=&quot;700&quot; TTT=&quot;857&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_3}&quot; I=&quot;0&quot; Id=&quot;K5cODc&quot; T=&quot;3&quot; R=&quot;2&quot; LR=&quot;1-violet,2-green,3-orange,4-magenta&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_3}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-purple|||PURPLE|||Purple,2-green|||Green|||GREEN,3-orange|||Orange|||ORANGE,4-brown|||BROWN|||Brown&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:55:15.977&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex2&quot;/&gt;&lt;RT ts=&quot;22:55:19.826&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.938&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;50&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.939&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;0.5&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.940&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;failed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.940&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.941&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;K5cODc&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:09.941&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.942&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;incorrect&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.944&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-violet,2-green,3-orange,4-magenta&quot; ai=&quot;t_01&quot; intid=&quot;K5cODc&quot;/&gt;&lt;RT ts=&quot;22:56:09.944&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-purple|||PURPLE|||Purple,2-green|||Green|||GREEN,3-orange|||Orange|||ORANGE,4-brown|||BROWN|||Brown&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:58.811&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:56:58.813&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:56:58.821&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:56:58.821&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Rollup Satisfaction&quot; v=&quot;failed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:56:58.833&quot; f=&quot;&quot; id=&quot;17&quot; ev=&quot;Set&quot; k=&quot;session time&quot; vh=&quot;9900&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:58.833&quot; f=&quot;&quot; id=&quot;18&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;suspend&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:58.833&quot; f=&quot;&quot; id=&quot;19&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;normal&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:56:58.833&quot; f=&quot;&quot; id=&quot;20&quot; ev=&quot;ApiTerminate&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:00.331&quot; f=&quot;&quot; id=&quot;21&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;failed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;0.5&quot; ED=&quot;27551&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson2_configuration_id2}&amp;registration=${lesson2_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">1000</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Ended Lesson A Second Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lesson A - Third Item" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Starting Lesson A Third Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on Lesson A - Third Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click on Lesson A - Third Item" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id3}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson3_configuration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">configuration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">CONFIGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson3_registration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">registration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">REGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="253 /ScormEngineInterface/defaultui/launch.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson3_configuration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson3_registration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/launch.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson3_configuration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON3_CONFIGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson3_registration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON3_REGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="255 /ScormEngineInterface/defaultui/deliver.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson3_configuration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson3_registration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/deliver.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegistrationToDeliver ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">registrationToDeliver_id4</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(RegistrationToDeliver = new Registration)(.*?)(&apos;)(.*?)(&apos;,)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">RegistrationToDeliver4_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LaunchHistoryId Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">launchHistory_id4</stringProp>
                    <stringProp name="RegexExtractor.regex">LaunchHistoryId = &apos;(.*?)&apos;;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LaunchHistoryId4_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 1 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id1_4</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id1_4_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 2 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id2_4</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id2_4_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${scormusedelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="254 /main/p/en/get_lebel1_contents/1/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ccm_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ccm_id</stringProp>
                        <stringProp name="Argument.value">${ccm_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="256 /main/p/en/get_lebel1_contents/2/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/2/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Play Lesson A - Third Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Play Lesson A - Third Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id4}&quot; LH=&quot;${launchHistory_id4}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_4}&quot; II=&quot;org_unit10transportexercise8&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;57857&quot; AtAD=&quot;57857&quot; AEDT=&quot;6777&quot; AtEDT=&quot;6777&quot; AEDR=&quot;3000&quot; AtEDR=&quot;3000&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_4}&quot; II=&quot;book_cover_item&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;57857&quot; AtAD=&quot;57857&quot; AEDT=&quot;6777&quot; AtEDT=&quot;6777&quot; AEDR=&quot;3000&quot; AtEDR=&quot;3000&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_4}&quot; CS=&quot;3&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;0&quot; SuS=&quot;1&quot; SD=&quot;&quot; TT=&quot;1400&quot; TTT=&quot;1691&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:57:15.84&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex3&quot;/&gt;&lt;RT ts=&quot;22:57:19.13&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;6777&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Check Lesson A - Third Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Lesson A - Third Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id4}&quot; LH=&quot;${launchHistory_id4}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id2_4}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;57857&quot; AtAD=&quot;57857&quot; AEDT=&quot;6777&quot; AtEDT=&quot;6777&quot; AEDR=&quot;3000&quot; AtEDR=&quot;3000&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_4}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;1400&quot; TTT=&quot;1691&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_4}&quot; I=&quot;0&quot; Id=&quot;KGRx1r&quot; T=&quot;3&quot; R=&quot;1&quot; LR=&quot;1-yellow,2-black,3-red,4-white&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_4}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-yellow|||orange|||red,2-black,3-red,4-white&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:57:15.84&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex3&quot;/&gt;&lt;RT ts=&quot;22:57:19.13&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.243&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.245&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;KGRx1r&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.246&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-yellow,2-black,3-red,4-white&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-yellow|||orange|||red,2-black,3-red,4-white&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;6777&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Data - Lesson A - Third Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="291 Save Data -  Lesson A - Third Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id4}&quot; LH=&quot;${launchHistory_id4}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_4}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:58:10.74Z&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;400873&quot; AtAD=&quot;400873&quot; AEDT=&quot;12342&quot; AtEDT=&quot;12342&quot; AEDR=&quot;3000&quot; AtEDR=&quot;3000&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_4}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:58:10.74Z&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;400873&quot; AtAD=&quot;400873&quot; AEDT=&quot;12342&quot; AtEDT=&quot;12342&quot; AEDR=&quot;3000&quot; AtEDR=&quot;3000&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_4}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;1400&quot; TTT=&quot;7256&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_4}&quot; I=&quot;0&quot; Id=&quot;KGRx1r&quot; T=&quot;3&quot; R=&quot;1&quot; LR=&quot;1-yellow,2-black,3-red,4-white&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_4}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-yellow|||orange|||red,2-black,3-red,4-white&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:57:15.84&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex3&quot;/&gt;&lt;RT ts=&quot;22:57:19.13&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.243&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.245&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;KGRx1r&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.246&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-yellow,2-black,3-red,4-white&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-yellow|||orange|||red,2-black,3-red,4-white&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:58:10.736&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:58:10.737&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:58:10.745&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;12342&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="293 Save Data -  Lesson A - Third Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id4}&quot; LH=&quot;${launchHistory_id4}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_4}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:58:10.74Z&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;400875&quot; AtAD=&quot;400875&quot; AEDT=&quot;17990&quot; AtEDT=&quot;17990&quot; AEDR=&quot;8200&quot; AtEDR=&quot;8200&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_4}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:58:10.74Z&quot; ASTU=&quot;2017-09-11T13:51:22.00Z&quot; AtSTU=&quot;2017-09-11T13:51:22.00Z&quot; AAD=&quot;400875&quot; AtAD=&quot;400875&quot; AEDT=&quot;17990&quot; AtEDT=&quot;17990&quot; AEDR=&quot;8200&quot; AtEDR=&quot;8200&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_4}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:51:41.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_4}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;4&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;1400&quot; TTT=&quot;1691&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_4}&quot; I=&quot;0&quot; Id=&quot;KGRx1r&quot; T=&quot;3&quot; R=&quot;1&quot; LR=&quot;1-yellow,2-black,3-red,4-white&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_4}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-yellow|||orange|||red,2-black,3-red,4-white&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:57:15.84&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p2_ex3&quot;/&gt;&lt;RT ts=&quot;22:57:19.13&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.243&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.244&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.245&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;KGRx1r&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:57:48.246&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;fill-in&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-yellow,2-black,3-red,4-white&quot; ai=&quot;t_01&quot; intid=&quot;KGRx1r&quot;/&gt;&lt;RT ts=&quot;22:57:48.247&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-yellow|||orange|||red,2-black,3-red,4-white&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:58:10.736&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:58:10.737&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:58:10.745&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:58:10.756&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Set&quot; k=&quot;session time&quot; vh=&quot;5200&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:58:10.756&quot; f=&quot;&quot; id=&quot;17&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;suspend&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:58:10.756&quot; f=&quot;&quot; id=&quot;18&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;normal&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:58:10.756&quot; f=&quot;&quot; id=&quot;19&quot; ev=&quot;ApiTerminate&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:58:12.236&quot; f=&quot;&quot; id=&quot;20&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;17990&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson3_configuration_id2}&amp;registration=${lesson3_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">1000</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Ended Lesson A Third Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Lesson A - Fourth Item" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Starting Lesson A Fourth Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on &apos;Lesson A - Fourth Item&apos;" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="294 Click on Lesson A - Fourth Item" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/launch_scorm/${scorm_id5}/${tab_id}</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id4}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson4_configuration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">configuration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">CONFIGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 1 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson4_registration_id1</stringProp>
                    <stringProp name="RegexExtractor.regex">registration=(.*?)&amp;amp</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">REGID1_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="296 /ScormEngineInterface/defaultui/launch.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson4_configuration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson4_registration_id1}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/launch.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id5}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson4_configuration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$2$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON4_CONFIGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID 2 Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">true</stringProp>
                    <stringProp name="RegexExtractor.refname">lesson4_registration_id2</stringProp>
                    <stringProp name="RegexExtractor.regex">Location:[\s]*([^&quot;]+)?configuration=([^&quot;]+)&amp;registration=([^&quot;]+)&amp;</stringProp>
                    <stringProp name="RegexExtractor.template">$3$</stringProp>
                    <stringProp name="RegexExtractor.default">LESSON4_REGID2_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                    <stringProp name="Sample.scope">all</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="298 /ScormEngineInterface/defaultui/deliver.jsp" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="configuration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">configuration</stringProp>
                        <stringProp name="Argument.value">${lesson4_configuration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="registration" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">registration</stringProp>
                        <stringProp name="Argument.value">${lesson4_registration_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="cc" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">cc</stringProp>
                        <stringProp name="Argument.value">en</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/deliver.jsp</stringProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id5}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegistrationToDeliver ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">registrationToDeliver_id5</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(RegistrationToDeliver = new Registration)(.*?)(&apos;)(.*?)(&apos;,)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">RegistrationToDeliver5_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LaunchHistoryId Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">launchHistory_id5</stringProp>
                    <stringProp name="RegexExtractor.regex">LaunchHistoryId = &apos;(.*?)&apos;;</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">LaunchHistoryId5_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 1 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id1_5</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id1_5_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 2 ID Extractor" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">activity_id2_5</stringProp>
                    <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                    <stringProp name="RegexExtractor.template">$4$</stringProp>
                    <stringProp name="RegexExtractor.default">activity_id2_5_NOT_FOUND</stringProp>
                    <stringProp name="RegexExtractor.match_number">3</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${scormusedelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="297 /main/p/en/get_lebel1_contents/1/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ccm_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ccm_id</stringProp>
                        <stringProp name="Argument.value">${ccm_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id5}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="305 /main/p/en/get_lebel1_contents/2/" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">${item_id2}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">2</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/2/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id5}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Play Lesson A - Fourth Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="329 Play Lesson A - Fourth Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id5}&quot; LH=&quot;${launchHistory_id5}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_5}&quot; II=&quot;org_unit10transportexercise8&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;6423&quot; AtAD=&quot;6423&quot; AEDT=&quot;12833&quot; AtEDT=&quot;12833&quot; AEDR=&quot;6300&quot; AtEDR=&quot;6300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:55.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_5}&quot; II=&quot;book_cover_item&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;6423&quot; AtAD=&quot;6423&quot; AEDT=&quot;12833&quot; AtEDT=&quot;12833&quot; AEDR=&quot;6300&quot; AtEDR=&quot;6300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:54.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_5}&quot; CS=&quot;3&quot; C=&quot;1&quot; E=&quot;1&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;0&quot; SuS=&quot;1&quot; SD=&quot;&quot; TT=&quot;0&quot; TTT=&quot;0&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:58:27.618&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p3_ex1&quot;/&gt;&lt;RT ts=&quot;22:58:31.590&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;12833&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                  </ConstantTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Check Lesson A - Fourth Item" enabled="true"/>
              <hashTree>
                <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[MS] 334 Check Lesson A - Fourth Item" enabled="true">
                  <boolProp name="TransactionController.includeTimers">false</boolProp>
                  <boolProp name="TransactionController.parent">true</boolProp>
                </TransactionController>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="334 Check Lesson A-  Fourth Item" enabled="true">
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id5}&quot; LH=&quot;${launchHistory_id5}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id2_5}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;0&quot; ACAS=&quot;1&quot; ACA=&quot;0&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;6423&quot; AtAD=&quot;6423&quot; AEDT=&quot;12833&quot; AtEDT=&quot;12833&quot; AEDR=&quot;6300&quot; AtEDR=&quot;6300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;0&quot; NM=&quot;0&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:54.00Z&quot; FNM=&quot;0&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;0&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_5}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;1&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;0&quot; TTT=&quot;0&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_5}&quot; I=&quot;0&quot; Id=&quot;nJU50J&quot; T=&quot;2&quot; R=&quot;1&quot; LR=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_5}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:58:27.618&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p3_ex1&quot;/&gt;&lt;RT ts=&quot;22:58:31.590&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.946&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;nJU50J&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.947&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;choice&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.947&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.949&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.950&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;incomplete&quot; MS=&quot;0&quot; NM=&quot;0&quot; ED=&quot;12833&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                    <stringProp name="HTTPSampler.domain">${url}</stringProp>
                    <stringProp name="HTTPSampler.port">443</stringProp>
                    <stringProp name="HTTPSampler.protocol">https</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                    <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}</stringProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                    <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                    <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                    <stringProp name="HTTPSampler.response_timeout"></stringProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                      <collectionProp name="HeaderManager.headers">
                        <elementProp name="Referer" elementType="Header">
                          <stringProp name="Header.name">Referer</stringProp>
                          <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}&amp;cc=en</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Language" elementType="Header">
                          <stringProp name="Header.name">Accept-Language</stringProp>
                          <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                        </elementProp>
                        <elementProp name="X-Requested-With" elementType="Header">
                          <stringProp name="Header.name">X-Requested-With</stringProp>
                          <stringProp name="Header.value">XMLHttpRequest</stringProp>
                        </elementProp>
                        <elementProp name="Content-Type" elementType="Header">
                          <stringProp name="Header.name">Content-Type</stringProp>
                          <stringProp name="Header.value">text/xml</stringProp>
                        </elementProp>
                        <elementProp name="Accept-Encoding" elementType="Header">
                          <stringProp name="Header.name">Accept-Encoding</stringProp>
                          <stringProp name="Header.value">gzip, deflate, br</stringProp>
                        </elementProp>
                        <elementProp name="User-Agent" elementType="Header">
                          <stringProp name="Header.name">User-Agent</stringProp>
                          <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                        </elementProp>
                        <elementProp name="Accept" elementType="Header">
                          <stringProp name="Header.name">Accept</stringProp>
                          <stringProp name="Header.value">text/plain, */*</stringProp>
                        </elementProp>
                      </collectionProp>
                    </HeaderManager>
                    <hashTree/>
                    <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                      <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
                    </ConstantTimer>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Data - Lesson A - Fourth Item" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="337 Save Data - Lesson A - Fourth Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id5}&quot; LH=&quot;${launchHistory_id5}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_5}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:59:56.33Z&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;408632&quot; AtAD=&quot;408632&quot; AEDT=&quot;21740&quot; AtEDT=&quot;21740&quot; AEDR=&quot;6300&quot; AtEDR=&quot;6300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:55.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_5}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:59:56.33Z&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;408632&quot; AtAD=&quot;408632&quot; AEDT=&quot;21740&quot; AtEDT=&quot;21740&quot; AEDR=&quot;6300&quot; AtEDR=&quot;6300&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:54.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_5}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;1&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;0&quot; TTT=&quot;8871&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_5}&quot; I=&quot;0&quot; Id=&quot;nJU50J&quot; T=&quot;2&quot; R=&quot;1&quot; LR=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_5}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:58:27.618&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p3_ex1&quot;/&gt;&lt;RT ts=&quot;22:58:31.590&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.946&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;nJU50J&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.947&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;choice&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.947&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.949&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.950&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:56.326&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:59:56.326&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:59:56.334&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;21740&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">100.0</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:25203ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="338 Save Data - Lesson A - Fourth Item" enabled="true">
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id5}&quot; LH=&quot;${launchHistory_id5}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1_5}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:59:56.33Z&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;408634&quot; AtAD=&quot;408634&quot; AEDT=&quot;30613&quot; AtEDT=&quot;30613&quot; AEDR=&quot;14800&quot; AtEDR=&quot;14800&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:55.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2_5}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-09-11T14:59:56.33Z&quot; ASTU=&quot;2017-09-11T13:51:50.00Z&quot; AtSTU=&quot;2017-09-11T13:51:50.00Z&quot; AAD=&quot;408634&quot; AtAD=&quot;408634&quot; AEDT=&quot;30613&quot; AtEDT=&quot;30613&quot; AEDR=&quot;14800&quot; AtEDR=&quot;14800&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2_5}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-11T13:52:54.00Z&quot; FNM=&quot;1&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2_5}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;1&quot; Ex=&quot;4&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;0&quot; TTT=&quot;0&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2_5}&quot; I=&quot;0&quot; Id=&quot;nJU50J&quot; T=&quot;2&quot; R=&quot;1&quot; LR=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2_5}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:58:27.618&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;unc_wb1_u1_p3_ex1&quot;/&gt;&lt;RT ts=&quot;22:58:31.590&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.944&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.945&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.946&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;0&quot; v=&quot;nJU50J&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:08.947&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;0&quot; v=&quot;choice&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.947&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;0&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.949&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;0&quot; v=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; ai=&quot;t_01&quot; intid=&quot;nJU50J&quot;/&gt;&lt;RT ts=&quot;22:59:08.950&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;0&quot; si=&quot;0&quot; v=&quot;1-a,2-c,3-a,4-c,5-a,6-c,7-c,8-a,9-a&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:56.326&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:59:56.326&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:59:56.334&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Rollup Completion&quot; v=&quot;completed&quot; ai=&quot;Netex&quot;/&gt;&lt;RT ts=&quot;22:59:56.345&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Set&quot; k=&quot;session time&quot; vh=&quot;8500&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:56.345&quot; f=&quot;&quot; id=&quot;17&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;suspend&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:56.345&quot; f=&quot;&quot; id=&quot;18&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;normal&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:56.345&quot; f=&quot;&quot; id=&quot;19&quot; ev=&quot;ApiTerminate&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:59:57.843&quot; f=&quot;&quot; id=&quot;20&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;30613&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                  <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}&amp;isExitScormPlayer=true</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${lesson4_configuration_id2}&amp;registration=${lesson4_registration_id2}&amp;cc=en</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">text/xml</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">text/plain, */*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
                <hashTree>
                  <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                    <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                    <stringProp name="RandomTimer.range">1000</stringProp>
                    <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
                  </UniformRandomTimer>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[MS] 335 Expand &apos;Unit 2&apos; from the Content Option" enabled="false">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="335 Expand &apos;Unit 2&apos; from the Content Option" enabled="true">
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="item_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">item_id</stringProp>
                        <stringProp name="Argument.value">539936</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="ccm_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">ccm_id</stringProp>
                        <stringProp name="Argument.value">539646</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="course_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">course_id</stringProp>
                        <stringProp name="Argument.value">${course_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="class_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">class_id</stringProp>
                        <stringProp name="Argument.value">${class_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="tab_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">tab_id</stringProp>
                        <stringProp name="Argument.value">${tab_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="level" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">level</stringProp>
                        <stringProp name="Argument.value">1</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="visibility" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">visibility</stringProp>
                        <stringProp name="Argument.value">INSIDE</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="user_id" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">user_id</stringProp>
                        <stringProp name="Argument.value">${user_id}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                      <elementProp name="is_from_wa" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.name">is_from_wa</stringProp>
                        <stringProp name="Argument.value"></stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                  <stringProp name="HTTPSampler.domain">${url}</stringProp>
                  <stringProp name="HTTPSampler.port">443</stringProp>
                  <stringProp name="HTTPSampler.protocol">https</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1/</stringProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Referer" elementType="Header">
                        <stringProp name="Header.name">Referer</stringProp>
                        <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/${scorm_id5}/${tab_id}</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Language" elementType="Header">
                        <stringProp name="Header.name">Accept-Language</stringProp>
                        <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                      </elementProp>
                      <elementProp name="X-Requested-With" elementType="Header">
                        <stringProp name="Header.name">X-Requested-With</stringProp>
                        <stringProp name="Header.value">XMLHttpRequest</stringProp>
                      </elementProp>
                      <elementProp name="Content-Type" elementType="Header">
                        <stringProp name="Header.name">Content-Type</stringProp>
                        <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                      </elementProp>
                      <elementProp name="Accept-Encoding" elementType="Header">
                        <stringProp name="Header.name">Accept-Encoding</stringProp>
                        <stringProp name="Header.value">gzip, deflate, br</stringProp>
                      </elementProp>
                      <elementProp name="User-Agent" elementType="Header">
                        <stringProp name="Header.name">User-Agent</stringProp>
                        <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                      </elementProp>
                      <elementProp name="Accept" elementType="Header">
                        <stringProp name="Header.name">Accept</stringProp>
                        <stringProp name="Header.value">*/*</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Ended Lesson A Fourth Item at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Close Main Student Content " enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 381 Close Main Student Content" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/launch_scorm/539982/${tab_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="View Main Student Grades" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Starting Gradebook View at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MS] 414 Click on Main Student &apos;Gradebook&apos;" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 414 Click on &apos;Gradebook&apos;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
              <stringProp name="HTTPSampler.path">/main/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/main/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
                <stringProp name="TestPlan.comments">Recorded:14883ms</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MS] 433 Expand Main Student Gradebook Unit 1" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 433 Expand Unit 1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ccmid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ccmid</stringProp>
                    <stringProp name="Argument.value">${ccm_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="class_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">class_id</stringProp>
                    <stringProp name="Argument.value">${class_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="course_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">course_id</stringProp>
                    <stringProp name="Argument.value">${course_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="item_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">item_id</stringProp>
                    <stringProp name="Argument.value">${item_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="level" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">level</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${tab_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_id</stringProp>
                    <stringProp name="Argument.value">${user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="from_gradebook" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">from_gradebook</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contentview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">contentview</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="show_link_disable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">show_link_disable</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_from_time_tab" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_from_time_tab</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/main/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
                <stringProp name="TestPlan.comments">Recorded:9553ms</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MS] 433 Expand Main Student Gradebook Lesson 1" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 433 Expand Lesson 1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ccmid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ccmid</stringProp>
                    <stringProp name="Argument.value">${ccm_id2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="class_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">class_id</stringProp>
                    <stringProp name="Argument.value">${class_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="course_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">course_id</stringProp>
                    <stringProp name="Argument.value">${course_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="item_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">item_id</stringProp>
                    <stringProp name="Argument.value">${item_id2}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="level" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">level</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${tab_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_id</stringProp>
                    <stringProp name="Argument.value">${user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="from_gradebook" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">from_gradebook</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contentview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">contentview</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="show_link_disable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">show_link_disable</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_from_time_tab" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_from_time_tab</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/main/p/en/get_lebel1_contents/2</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/main/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
                <stringProp name="TestPlan.comments">Recorded:9553ms</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Ending Gradebook View at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Student Logout" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Logout Executed at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MS] 436 Log out from CLMS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/caslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Thread Finished at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username&quot;));

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Primary Student Workflow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">118</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1800</stringProp>
        <longProp name="ThreadGroup.start_time">1504966397000</longProp>
        <longProp name="ThreadGroup.end_time">1504966397000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">perf.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password4" elementType="Argument">
              <stringProp name="Argument.name">password4</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="studentUsernamePrefix2" elementType="Argument">
              <stringProp name="Argument.name">studentUsernamePrefix2</stringProp>
              <stringProp name="Argument.value">zpaug2018s</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="servers" elementType="Argument">
              <stringProp name="Argument.name">servers</stringProp>
              <stringProp name="Argument.value">load1,load2,load3,load4,load5,load6,load7,load8,load9,load10,load11,load12,load13,load14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">clmsperf-load1.unicon.net,clmsperf-load2.unicon.net,clmsperf-load3.unicon.net,clmsperf-load4.unicon.net,clmsperf-load5.unicon.net,clmsperf-load6.unicon.net,clmsperf-load7.unicon.net</stringProp>
            </elementProp>
            <elementProp name="startUserPoolIndex4" elementType="Argument">
              <stringProp name="Argument.name">startUserPoolIndex4</stringProp>
              <stringProp name="Argument.value">8001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserPoolIndex4" elementType="Argument">
              <stringProp name="Argument.name">endUserPoolIndex4</stringProp>
              <stringProp name="Argument.value">15749</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="partitionUserPool" elementType="Argument">
              <stringProp name="Argument.name">partitionUserPool</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="constantDelayOffset4" elementType="Argument">
              <stringProp name="Argument.name">constantDelayOffset4</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="authurl" elementType="Argument">
              <stringProp name="Argument.name">authurl</stringProp>
              <stringProp name="Argument.value">auth-perf-vpc.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="scormusedelay" elementType="Argument">
              <stringProp name="Argument.name">scormusedelay</stringProp>
              <stringProp name="Argument.value">90000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="longclickdelay" elementType="Argument">
              <stringProp name="Argument.name">longclickdelay</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delay" elementType="Argument">
              <stringProp name="Argument.name">delay</stringProp>
              <stringProp name="Argument.value">60000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activityTimeDelay" elementType="Argument">
              <stringProp name="Argument.name">activityTimeDelay</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PS] Beanshell Samplers - Student" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[PS] BeanShell Sampler_1" enabled="true">
            <stringProp name="BeanShellSampler.query">if (${partitionUserPool}) {
    String[] split = &quot;${servers}&quot;.split(&quot;,&quot;);
    int startUserIndex4 = ${startUserPoolIndex4};
    int endUserIndex4 = ${endUserPoolIndex4};
    int partitionSize = (endUserIndex4-startUserIndex4+1) / split.length;

    for (int i=0; i&lt;split.length; i++) {
        if (split[i].trim().equals(&quot;${__machineName}&quot;)) {
            int start4 = startUserIndex4 + (i*partitionSize);
            int end4 = i == split.length-1 ? endUserIndex4 : start4+partitionSize-1;
            System.out.println(&quot;[&quot;+start4+&quot;, &quot;+end4+&quot;]&quot;);
            vars.put(&quot;startUserIndex4&quot;, &quot;&quot;+start4);
            vars.put(&quot;endUserIndex4&quot;, &quot;&quot;+end4);
        }
    }
} else {
    System.out.println(&quot;Default user pool!&quot;);
    System.out.println(&quot;[${startUserPoolIndex4}, ${endUserPoolIndex4}]&quot;);
    vars.put(&quot;startUserIndex4&quot;, &quot;${startUserPoolIndex4}&quot;);
    vars.put(&quot;endUserIndex4&quot;, &quot;${endUserPoolIndex4}&quot;);
}

if (vars.get(&quot;userStart4&quot;) == null) {
    vars.put(&quot;userStart4&quot;, vars.get(&quot;startUserIndex4&quot;));
    System.out.println(&quot;Setting userStart4 to: &quot; + vars.get(&quot;userStart4&quot;));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[PS] BeanShell Sampler_2" enabled="true">
            <stringProp name="BeanShellSampler.query">int startIndex4 = Integer.valueOf(vars.get(&quot;startUserIndex4&quot;)).intValue();
int endIndex4 = Integer.valueOf(vars.get(&quot;endUserIndex4&quot;)).intValue();
int userStart4 = Integer.valueOf(vars.get(&quot;userStart4&quot;)).intValue();

int count = Integer.valueOf(${__counter(FALSE)}).intValue();
int nextUserIndex4 = ((userStart4 + count) % (endIndex4 - startIndex4 + 1)) + startIndex4;

vars.put(&quot;username4&quot;, &quot;${studentUsernamePrefix2}&quot; + nextUserIndex4);

System.out.println(&quot;username4: &quot; + vars.get(&quot;username4&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Launch CLMS Primary Splash" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 2 Launch Primary Splash" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/splash</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Homepage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1323736406">&lt;span&gt;Welcome to the&lt;/span&gt;  Cambridge LMS&lt;/h2&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 23 Load Login iFrame" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">splashpage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">top</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="css_path" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">css_path</stringProp>
                  <stringProp name="Argument.value">https://${url}/primary/p/en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">https://${url}/primary/p/en/cas</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/splash</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Session ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jsessionid</stringProp>
              <stringProp name="RegexExtractor.regex">jsessionid=([^&quot;]+)\?page=splashpage&amp;amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">JSESSIONID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LT Value Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lt_value</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;lt&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">execution_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
            <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary Student Login Process" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 41 Login as Student" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${username4}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password4}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">${lt_value}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${execution_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CAS Ticket Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cas_ticket</stringProp>
              <stringProp name="RegexExtractor.regex">ticket=([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CASTICKET_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100469201">&lt;input type=&quot;hidden&quot; name=&quot;lt</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="TestPlan.comments">In the response assertion, we ensure that the pattern below is NOT on the page, which if it does exist would indicate that the login failed (as the login page reloads due ot failed login)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 43 Process CAS Service Ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ticket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ticket</stringProp>
                  <stringProp name="Argument.value">${cas_ticket}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session Limit Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292635390">Session limit exceeded</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 48 My Learning Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/frontpage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class Name Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_name</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;/primary/p/en/class/([^&quot;]+)&quot; class=&quot;class-home&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSNAME_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;https://([^&quot;]+)/primary/p/en/class/([^&quot;]+)/content_home/&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Student Class Home Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Class Name: &quot; +  vars.get(&quot;class_name&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Class ID: &quot; +  vars.get(&quot;class_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Access Class" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Announcement(/primary/p/anno_site_announcement)" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${domain}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/anno_site_announcement</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/jpeg, application/x-ms-application, image/gif, application/xaml+xml, image/pjpeg, application/x-ms-xbap, application/vnd.ms-excel, application/vnd.ms-powerpoint, application/msword, */*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8)</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.cambridgelms.org/primary/p/class/6797/content_home/16</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 70 Go to Class" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/class/${class_name}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/frontpage</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">course_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;nid_course&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">COURSEID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tab_id</stringProp>
              <stringProp name="RegexExtractor.regex">a href=&quot;/primary/p/en/class/([^&quot;]+)/content_home/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">TABID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 70 Go to Class Activities Bypass Class Home" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/class/${class_id}/content_home/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/frontpage</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">course_id</stringProp>
              <stringProp name="RegexExtractor.regex">course_id =&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">COURSEID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tab_id</stringProp>
              <stringProp name="RegexExtractor.regex">/primary/p/en/class/([^&quot;]+)/content_home/([^&quot;]+)&quot; tab_id</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">TABID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Student Access Class Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Tab ID: &quot; +  vars.get(&quot;tab_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Course ID: &quot; +  vars.get(&quot;course_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="[PS] Play Content" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on Activities" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 82 Click on &apos;Activities&apos;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/primary/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_name}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Item ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">item_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot; is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; item_id=([^&quot;]+) ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text&quot; title=&quot;Unit 1&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$3$</stringProp>
                <stringProp name="RegexExtractor.default">ITEMID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CCM ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">ccm_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot; is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; item_id=([^&quot;]+) ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text&quot; title=&quot;Unit 1&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$6$</stringProp>
                <stringProp name="RegexExtractor.default">ITEMID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="User ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">user_id</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;span level=&quot;0&quot; is_from_wa= &quot;&quot; course_id =&quot;([^&quot;]+)&quot; class_id =&quot;([^&quot;]+)&quot; item_id = &quot;([^&quot;]+)&quot; expand_item_id = &quot;([^&quot;]+)&quot; item_id=([^&quot;]+) ccm_id = &quot;([^&quot;]+)&quot; user_id =&quot;([^&quot;]+)&quot; class=&quot;title-text&quot; title=&quot;Unit 1&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$7$</stringProp>
                <stringProp name="RegexExtractor.default">USERID_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Student Content Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Item ID: &quot; +  vars.get(&quot;item_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;CCM ID: &quot; +  vars.get(&quot;ccm_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;User ID: &quot; +  vars.get(&quot;user_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
</stringProp>
              <stringProp name="BeanShellSampler.filename"></stringProp>
              <stringProp name="BeanShellSampler.parameters"></stringProp>
              <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Expand Unit 1 Activity" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 108 Expand Unit 1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="item_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">item_id</stringProp>
                    <stringProp name="Argument.value">${item_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ccm_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ccm_id</stringProp>
                    <stringProp name="Argument.value">${ccm_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="course_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">course_id</stringProp>
                    <stringProp name="Argument.value">${course_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="class_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">class_id</stringProp>
                    <stringProp name="Argument.value">${class_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${tab_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="level" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">level</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="visibility" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">visibility</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_id</stringProp>
                    <stringProp name="Argument.value">${user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_from_wa" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_from_wa</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/primary/p/en/get_lebel1_contents/1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Content 1 ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">content_id1</stringProp>
                <stringProp name="RegexExtractor.regex">expand_item_id =&quot;([^&quot;]+)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">CONTENTID1_NOT_FOUND</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${longclickdelay}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Play Content" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">5</stringProp>
          </LoopController>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open Activity 1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 111 Open Activity 1" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/primary/p/en/class/${class_id}/launch_scorm/${content_id1}/${tab_id}</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id}/content_home/${tab_id}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Configuration ID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">configuration_id</stringProp>
                  <stringProp name="RegexExtractor.regex">configuration=(.*?)&amp;amp</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">CONFIGID_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Registration ID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">registration_id</stringProp>
                  <stringProp name="RegexExtractor.regex">registration=(.*?)&amp;amp</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">REGID_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                  <stringProp name="Sample.scope">all</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 116 /ScormEngineInterface/defaultui/launch.jsp - PRIMARY" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="configuration" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">configuration</stringProp>
                      <stringProp name="Argument.value">${configuration_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="registration" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">registration</stringProp>
                      <stringProp name="Argument.value">${registration_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="cc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">cc</stringProp>
                      <stringProp name="Argument.value">en</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/launch.jsp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id}/launch_scorm/${content_id1}/${tab_id}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 121 /ScormEngineInterface/defaultui/deliver.jsp - PRIMARY" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="configuration" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">configuration</stringProp>
                      <stringProp name="Argument.value">${configuration_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="registration" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">registration</stringProp>
                      <stringProp name="Argument.value">${registration_id}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="cc" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">cc</stringProp>
                      <stringProp name="Argument.value">en</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ScormEngineInterface/defaultui/deliver.jsp</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
                <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id}/launch_scorm/${content_id1}/${tab_id}</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="RegistrationToDeliver ID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">registrationToDeliver_id</stringProp>
                  <stringProp name="RegexExtractor.regex">(?s)(RegistrationToDeliver = new Registration)(.*?)(&apos;)(.*?)(&apos;,)</stringProp>
                  <stringProp name="RegexExtractor.template">$4$</stringProp>
                  <stringProp name="RegexExtractor.default">RegistrationToDeliver_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LaunchHistoryId Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">launchHistory_id</stringProp>
                  <stringProp name="RegexExtractor.regex">LaunchHistoryId = &apos;(.*?)&apos;;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">LaunchHistoryId_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 1 ID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">activity_id1</stringProp>
                  <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                  <stringProp name="RegexExtractor.template">$4$</stringProp>
                  <stringProp name="RegexExtractor.default">activity_id1_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Activity 2 ID Extractor" enabled="true">
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">activity_id2</stringProp>
                  <stringProp name="RegexExtractor.regex">(?s)(new Activity)(.*?)(&apos;)(.*?)(&apos;,)(.*?)</stringProp>
                  <stringProp name="RegexExtractor.template">$4$</stringProp>
                  <stringProp name="RegexExtractor.default">activity_id2_NOT_FOUND</stringProp>
                  <stringProp name="RegexExtractor.match_number">3</stringProp>
                </RegexExtractor>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Student Open Activity1 Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;configuration_id: &quot; +  vars.get(&quot;configuration_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;registration_id: &quot; +  vars.get(&quot;registration_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;registrationToDeliver_id: &quot; +  vars.get(&quot;registrationToDeliver_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;launchHistory_id: &quot; +  vars.get(&quot;launchHistory_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;activity_id1: &quot; +  vars.get(&quot;activity_id1&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;activity_id2: &quot; +  vars.get(&quot;activity_id2&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
</stringProp>
                <stringProp name="BeanShellSampler.filename"></stringProp>
                <stringProp name="BeanShellSampler.parameters"></stringProp>
                <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
              </BeanShellSampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 146 Load Scorm Content" enabled="false">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/primary/p/sites/default/public_files/rustici_packs/scorm_packs/UATperfprimary8_1504008129_08_29_2017/index.html</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;cc=en</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${scormusedelay}</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Activity 1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 165 Load Activity 1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id}&quot; LH=&quot;${launchHistory_id}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;85549344&quot; AtAD=&quot;85549344&quot; AEDT=&quot;44796&quot; AtEDT=&quot;44796&quot; AEDR=&quot;22500&quot; AtEDR=&quot;22500&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;85549344&quot; AtAD=&quot;85549344&quot; AEDT=&quot;44796&quot; AtEDT=&quot;44796&quot; AEDR=&quot;22500&quot; AtEDR=&quot;22500&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;2700&quot; TTT=&quot;2871&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;0&quot; Id=&quot;c71BEi&quot; T=&quot;6&quot; R=&quot;2&quot; LR=&quot;1[.]c[,]2[.]f[,]3[.]a[,]4[.]b[,]5[.]d[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;1&quot; Id=&quot;xZ5fn7&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;1&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:40:45.443&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;kb_010205_b01&quot;/&gt;&lt;RT ts=&quot;22:40:48.950&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;44796&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${configuration_id}&amp;registration=${registration_id}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;cc=en</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/plain, */*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                  <stringProp name="RandomTimer.range">100.0</stringProp>
                  <stringProp name="TestPlan.comments">Recorded:6129ms</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Check Activity 1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 173 Check Activity 1" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id}&quot; LH=&quot;${launchHistory_id}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;1&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;85549344&quot; AtAD=&quot;85549344&quot; AEDT=&quot;44796&quot; AtEDT=&quot;44796&quot; AEDR=&quot;22500&quot; AtEDR=&quot;22500&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;0&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;2700&quot; TTT=&quot;2871&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;0&quot; Id=&quot;c71BEi&quot; T=&quot;6&quot; R=&quot;2&quot; LR=&quot;1[.]c[,]2[.]f[,]3[.]a[,]4[.]b[,]5[.]d[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;1&quot; Id=&quot;xZ5fn7&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;1&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;2&quot; Id=&quot;5eTRaZ&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;2&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:40:45.443&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;kb_010205_b01&quot;/&gt;&lt;RT ts=&quot;22:40:48.950&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.232&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.234&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.234&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.235&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;2&quot; v=&quot;5eTRaZ&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.235&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;2&quot; v=&quot;matching&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.236&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;2&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.238&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;2&quot; v=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.239&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;2&quot; si=&quot;0&quot; v=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; ai=&quot;t_01&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;44796&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${configuration_id}&amp;registration=${registration_id}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;cc=en</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/plain, */*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                  <stringProp name="TestPlan.comments">Recorded:31617ms</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Save Data Activity 1" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 178 Save Data and Exit" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id}&quot; LH=&quot;${launchHistory_id}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;87646856&quot; AtAD=&quot;87646856&quot; AEDT=&quot;52980&quot; AtEDT=&quot;52980&quot; AEDR=&quot;22500&quot; AtEDR=&quot;22500&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;0&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;87646856&quot; AtAD=&quot;87646856&quot; AEDT=&quot;52980&quot; AtEDT=&quot;52980&quot; AEDR=&quot;22500&quot; AtEDR=&quot;22500&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;5&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;2700&quot; TTT=&quot;10983&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;0&quot; Id=&quot;c71BEi&quot; T=&quot;6&quot; R=&quot;2&quot; LR=&quot;1[.]c[,]2[.]f[,]3[.]a[,]4[.]b[,]5[.]d[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;1&quot; Id=&quot;xZ5fn7&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;1&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;2&quot; Id=&quot;5eTRaZ&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;2&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:40:45.443&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;kb_010205_b01&quot;/&gt;&lt;RT ts=&quot;22:40:48.950&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.232&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.234&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.234&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.235&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;2&quot; v=&quot;5eTRaZ&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.235&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;2&quot; v=&quot;matching&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.236&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;2&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.238&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;2&quot; v=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.239&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;2&quot; si=&quot;0&quot; v=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:42:06.563&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:42:06.563&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;52980&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;isExitScormPlayer=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;cc=en</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/plain, */*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 179 Save Data and Exit" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot;?&gt;&lt;RTD RI=&quot;${registrationToDeliver_id}&quot; LH=&quot;${launchHistory_id}&quot; TR=&quot;true&quot; &gt;&#xd;
&lt;A DI=&quot;${activity_id1}&quot; II=&quot;Netex&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;1&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;87646956&quot; AtAD=&quot;87646956&quot; AEDT=&quot;61192&quot; AtEDT=&quot;61192&quot; AEDR=&quot;30400&quot; AtEDR=&quot;30400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id1}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; PrMS=&quot;0&quot; /&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;A DI=&quot;${activity_id2}&quot; II=&quot;t_01&quot; APS=&quot;1&quot; AAC=&quot;1&quot; AtPS=&quot;1&quot; ACS=&quot;1&quot; ACAS=&quot;1&quot; ACA=&quot;1&quot; A=&quot;0&quot; S=&quot;1&quot; I=&quot;1&quot; O=&quot;1&quot; SC=&quot;0&quot; RC=&quot;0&quot; PAPS=&quot;0&quot; PACS=&quot;0&quot; ADTA=&quot;1&quot; FCTU=&quot;2017-08-30T11:15:19.00Z&quot; ASTU=&quot;2017-08-30T11:14:18.00Z&quot; AtSTU=&quot;2017-08-30T11:14:18.00Z&quot; AAD=&quot;87646956&quot; AtAD=&quot;87646956&quot; AEDT=&quot;61192&quot; AtEDT=&quot;61192&quot; AEDR=&quot;30400&quot; AtEDR=&quot;30400&quot; &gt;&#xd;
&lt;AO AI=&quot;${activity_id2}&quot; AOI=&quot;0&quot; I=&quot;&quot; PS=&quot;1&quot; SS=&quot;1&quot; MS=&quot;1&quot; NM=&quot;1&quot; PPS=&quot;0&quot; PSS=&quot;0&quot; PMS=&quot;0&quot; PNM=&quot;0&quot; FSTU=&quot;2017-09-09T08:52:30.00Z&quot; FNM=&quot;0.5&quot; P=&quot;1&quot; CS=&quot;1&quot; CSV=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; PrMS=&quot;1&quot; PM=&quot;1&quot; /&gt;&#xd;
&lt;ART AI=&quot;${activity_id2}&quot; CS=&quot;2&quot; C=&quot;1&quot; E=&quot;2&quot; Ex=&quot;2&quot; L=&quot;0&quot; M=&quot;1&quot; PM=&quot;1&quot; SR=&quot;100&quot; SM=&quot;100&quot; SMi=&quot;0&quot; SS=&quot;1&quot; SuS=&quot;2&quot; SD=&quot;&quot; TT=&quot;2700&quot; TTT=&quot;2871&quot; AL=&quot;1&quot; LP=&quot;&quot; DS=&quot;1&quot; AC=&quot;0&quot; &gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;0&quot; Id=&quot;c71BEi&quot; T=&quot;6&quot; R=&quot;2&quot; LR=&quot;1[.]c[,]2[.]f[,]3[.]a[,]4[.]b[,]5[.]d[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;0&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;1&quot; Id=&quot;xZ5fn7&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;1&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;ARTI AI=&quot;${activity_id2}&quot; I=&quot;2&quot; Id=&quot;5eTRaZ&quot; T=&quot;6&quot; R=&quot;1&quot; LR=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; &gt;&#xd;
&lt;CR AI=&quot;${activity_id2}&quot; II=&quot;2&quot; I=&quot;0&quot; V=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; /&gt;&#xd;
&lt;/ARTI&gt;&#xd;
&lt;/ART&gt;&#xd;
&lt;/A&gt;&#xd;
&lt;RTL version=&quot;2012.2.0.107&quot; browser=&quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0&quot; trackingEnabled=&quot;true&quot;&gt;&lt;RT ts=&quot;22:40:45.443&quot; f=&quot;&quot; id=&quot;0&quot; ev=&quot;LoadSco&quot; ai=&quot;t_01&quot; at=&quot;kb_010205_b01&quot;/&gt;&lt;RT ts=&quot;22:40:48.950&quot; f=&quot;&quot; id=&quot;1&quot; ev=&quot;ApiInitialize&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.232&quot; f=&quot;&quot; id=&quot;2&quot; ev=&quot;Set&quot; k=&quot;score.min&quot; v=&quot;0&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;3&quot; ev=&quot;Set&quot; k=&quot;score.max&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;4&quot; ev=&quot;Set&quot; k=&quot;score.raw&quot; v=&quot;100&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.233&quot; f=&quot;&quot; id=&quot;5&quot; ev=&quot;Set&quot; k=&quot;score.scaled&quot; v=&quot;1&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.234&quot; f=&quot;&quot; id=&quot;6&quot; ev=&quot;Set&quot; k=&quot;success&quot; v=&quot;passed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.234&quot; f=&quot;&quot; id=&quot;7&quot; ev=&quot;Set&quot; k=&quot;completion&quot; v=&quot;completed&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.235&quot; f=&quot;&quot; id=&quot;8&quot; ev=&quot;Set&quot; k=&quot;interactions id&quot; i=&quot;2&quot; v=&quot;5eTRaZ&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:41:22.235&quot; f=&quot;&quot; id=&quot;9&quot; ev=&quot;Set&quot; k=&quot;interactions type&quot; i=&quot;2&quot; v=&quot;matching&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.236&quot; f=&quot;&quot; id=&quot;10&quot; ev=&quot;Set&quot; k=&quot;interactions result&quot; i=&quot;2&quot; v=&quot;correct&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.238&quot; f=&quot;&quot; id=&quot;11&quot; ev=&quot;Set&quot; k=&quot;interactions learner_response&quot; i=&quot;2&quot; v=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; ai=&quot;t_01&quot; intid=&quot;5eTRaZ&quot;/&gt;&lt;RT ts=&quot;22:41:22.239&quot; f=&quot;&quot; id=&quot;12&quot; ev=&quot;Set&quot; k=&quot;interactions correct_responses pattern&quot; i=&quot;2&quot; si=&quot;0&quot; v=&quot;1[.]c[,]2[.]b[,]3[.]a[,]4[.]d[,]5[.]f[,]6[.]e&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:42:06.563&quot; f=&quot;&quot; id=&quot;13&quot; ev=&quot;Unload&quot;/&gt;&lt;RT ts=&quot;22:42:06.563&quot; f=&quot;&quot; id=&quot;14&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;RT ts=&quot;22:42:07.562&quot; f=&quot;&quot; id=&quot;15&quot; ev=&quot;Set&quot; k=&quot;session time&quot; vh=&quot;7900&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:42:07.562&quot; f=&quot;&quot; id=&quot;16&quot; ev=&quot;Set&quot; k=&quot;cmi.exit&quot; v=&quot;suspend&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:42:07.562&quot; f=&quot;&quot; id=&quot;17&quot; ev=&quot;ApiTerminate&quot; ai=&quot;t_01&quot;/&gt;&lt;RT ts=&quot;22:42:08.109&quot; f=&quot;&quot; id=&quot;18&quot; ev=&quot;ScoUnloaded&quot;/&gt;&lt;/RTL&gt;&#xd;
&lt;RS SS=&quot;passed&quot; CS=&quot;complete&quot; MS=&quot;1&quot; NM=&quot;1&quot; ED=&quot;61192&quot; /&gt;&#xd;
&lt;/RTD&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${url}</stringProp>
                <stringProp name="HTTPSampler.port">443</stringProp>
                <stringProp name="HTTPSampler.protocol">https</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">/ScormEngineInterface/RecordResults.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;isExitScormPlayer=true</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">https://${url}/ScormEngineInterface/defaultui/deliver.jsp?configuration=${configuration_id}&amp;registration=${registration_id}&amp;cc=en</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">text/xml</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate, br</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">text/plain, */*</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                  <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                  <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PS] View Grades" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click on Report Card" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 224 Click on &apos;Report Card&apos;" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/primary/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id}/launch_scorm/${content_id1}/${tab_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
                <stringProp name="TestPlan.comments">Recorded:33974ms</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Expand Unit 1 Report Card" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 239 Expand Unit 1" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ccmid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ccmid</stringProp>
                    <stringProp name="Argument.value">${ccm_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="class_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">class_id</stringProp>
                    <stringProp name="Argument.value">${class_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="course_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">course_id</stringProp>
                    <stringProp name="Argument.value">${course_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="item_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">item_id</stringProp>
                    <stringProp name="Argument.value">${item_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="level" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">level</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tab_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tab_id</stringProp>
                    <stringProp name="Argument.value">${tab_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_id</stringProp>
                    <stringProp name="Argument.value">${user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="from_gradebook" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">from_gradebook</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="contentview" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">contentview</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="show_link_disable" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">show_link_disable</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_from_time_tab" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_from_time_tab</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/primary/p/en/get_lebel1_contents/1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://${url}/primary/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
                <stringProp name="TestPlan.comments">Recorded:9553ms</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="[PS] Get Attempt Details" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] Get Attempt Details" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="class_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">class_id</stringProp>
                    <stringProp name="Argument.value">${class_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="item_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">item_id</stringProp>
                    <stringProp name="Argument.value">${item_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="level" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">level</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="user_id" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">user_id</stringProp>
                    <stringProp name="Argument.value">${user_id}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="from_gradebook" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">from_gradebook</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_ajax" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_ajax</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="is_from_time_tab" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">is_from_time_tab</stringProp>
                    <stringProp name="Argument.value">0</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/primary/p/en/get_attempt_details/</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.implementation">Java</stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-us</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; InfoPath.3; .NET4.0C; .NET4.0E; MS-RTC LM 8)</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">http://www.cambridgelms.org/main/p/gradebook/report/student/class_details/7136</stringProp>
                  </elementProp>
                  <elementProp name="x-requested-with" elementType="Header">
                    <stringProp name="Header.name">x-requested-with</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Pragma" elementType="Header">
                    <stringProp name="Header.name">Pragma</stringProp>
                    <stringProp name="Header.value">no-cache</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
                <stringProp name="RandomTimer.range">100.0</stringProp>
                <stringProp name="TestPlan.comments">Recorded:9553ms</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary Student Logout" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PS] 241 Log out from CLMS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/caslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Teacher Workflow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">18</stringProp>
        <stringProp name="ThreadGroup.ramp_time">600</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay">15</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">perf.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password2" elementType="Argument">
              <stringProp name="Argument.name">password2</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="teacherUsernamePrefix" elementType="Argument">
              <stringProp name="Argument.name">teacherUsernamePrefix</stringProp>
              <stringProp name="Argument.value">zpaug2018t</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="servers" elementType="Argument">
              <stringProp name="Argument.name">servers</stringProp>
              <stringProp name="Argument.value">load1,load2,load3,load4,load5,load6,load7,load8,load9,load10,load11,load12,load13,load14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">clmsperf-load1.unicon.net,clmsperf-load2.unicon.net,clmsperf-load3.unicon.net,clmsperf-load4.unicon.net,clmsperf-load5.unicon.net,clmsperf-load6.unicon.net,clmsperf-load7.unicon.net</stringProp>
            </elementProp>
            <elementProp name="startUserPoolIndex2" elementType="Argument">
              <stringProp name="Argument.name">startUserPoolIndex2</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserPoolIndex2" elementType="Argument">
              <stringProp name="Argument.name">endUserPoolIndex2</stringProp>
              <stringProp name="Argument.value">400</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="partitionUserPool" elementType="Argument">
              <stringProp name="Argument.name">partitionUserPool</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="constantDelayOffset2" elementType="Argument">
              <stringProp name="Argument.name">constantDelayOffset2</stringProp>
              <stringProp name="Argument.value">4000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="authurl" elementType="Argument">
              <stringProp name="Argument.name">authurl</stringProp>
              <stringProp name="Argument.value">auth-perf-vpc.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delay" elementType="Argument">
              <stringProp name="Argument.name">delay</stringProp>
              <stringProp name="Argument.value">60000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MT] Beanshell Samplers - Teacher" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[MT] BeanShell Sampler_1" enabled="true">
            <stringProp name="BeanShellSampler.query">if (${partitionUserPool}) {
    String[] split = &quot;${servers}&quot;.split(&quot;,&quot;);
    int startUserIndex2 = ${startUserPoolIndex2};
    int endUserIndex2 = ${endUserPoolIndex2};
    int partitionSize = (endUserIndex2-startUserIndex2+1) / split.length;

    for (int i=0; i&lt;split.length; i++) {
        if (split[i].trim().equals(&quot;${__machineName}&quot;)) {
            int start2 = startUserIndex2 + (i*partitionSize);
            int end2 = i == split.length-1 ? endUserIndex2 : start2+partitionSize-1;
            System.out.println(&quot;[&quot;+start2+&quot;, &quot;+end2+&quot;]&quot;);
            vars.put(&quot;startUserIndex2&quot;, &quot;&quot;+start2);
            vars.put(&quot;endUserIndex2&quot;, &quot;&quot;+end2);
        }
    }
} else {
    System.out.println(&quot;Default user pool!&quot;);
    System.out.println(&quot;[${startUserPoolIndex2}, ${endUserPoolIndex2}]&quot;);
    vars.put(&quot;startUserIndex2&quot;, &quot;${startUserPoolIndex2}&quot;);
    vars.put(&quot;endUserIndex2&quot;, &quot;${endUserPoolIndex2}&quot;);
}

if (vars.get(&quot;userStart2&quot;) == null) {
    vars.put(&quot;userStart2&quot;, vars.get(&quot;startUserIndex2&quot;));
    System.out.println(&quot;Setting userStart2 to: &quot; + vars.get(&quot;userStart2&quot;));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[MT] BeanShell Sampler_2" enabled="true">
            <stringProp name="BeanShellSampler.query">int startIndex2 = Integer.valueOf(vars.get(&quot;startUserIndex2&quot;)).intValue();
int endIndex2 = Integer.valueOf(vars.get(&quot;endUserIndex2&quot;)).intValue();
int userStart2 = Integer.valueOf(vars.get(&quot;userStart2&quot;)).intValue();

int count = Integer.valueOf(${__counter(FALSE)}).intValue();
int nextUserIndex2 = ((userStart2 + count) % (endIndex2 - startIndex2 + 1)) + startIndex2;

vars.put(&quot;username2&quot;, &quot;${teacherUsernamePrefix}&quot; + nextUserIndex2);

System.out.println(&quot;username2: &quot; + vars.get(&quot;username2&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MT] Launch Main Splash Page Teacher" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 1 Launch Main Splash Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/splash</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Homepage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-200122526"> Welcome to the Cambridge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 20 Load Login iFrame" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">splashpage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">top</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="css_path" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">css_path</stringProp>
                  <stringProp name="Argument.value">https://${url}/main/p</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">https://${url}/main/p/en/cas</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/splash</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Session ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jsessionid</stringProp>
              <stringProp name="RegexExtractor.regex">jsessionid=([^&quot;]+)\?page=splashpage&amp;amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">JSESSIONID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LT Value Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lt_value</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;lt&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">execution_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${constantDelayOffset2}</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
            <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Teacher Login Process" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 34 Log in as Teacher" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${username2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password2}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">${lt_value}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${execution_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p&amp;service=https://${url}/main/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CAS Ticket Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">service_ticket</stringProp>
              <stringProp name="RegexExtractor.regex">ticket=([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CASTICKET_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100469201">&lt;input type=&quot;hidden&quot; name=&quot;lt</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="TestPlan.comments">In the response assertion, we ensure that the pattern below is NOT on the page, which if it does exist would indicate that the login failed (as the login page reloads due ot failed login)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 35 Process CAS Service Ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ticket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ticket</stringProp>
                  <stringProp name="Argument.value">${service_ticket}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session Limit Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292635390">Session limit exceeded</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 37 My Teaching Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/my_teaching/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Org ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">org_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;/main/p/en/my_teaching/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ORG_ID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class Name Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_name</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSNAME_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_id</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/CUP-([^&quot;]+)-([^&quot;]+)&quot;&gt;Class Home&lt;/a&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset2}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Teacher Class Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username2&quot;));
System.out.println(&quot;Class Name: &quot; +  vars.get(&quot;class_name&quot;) + &quot; for &quot; + vars.get(&quot;username2&quot;));
System.out.println(&quot;Class ID: &quot; +  vars.get(&quot;class_id&quot;) + &quot; for &quot; + vars.get(&quot;username2&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MT] Click Class Home" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 58 Click on Class Home" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/class/${class_name}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset2}</stringProp>
              <stringProp name="RandomTimer.range">1000.0</stringProp>
              <stringProp name="TestPlan.comments">Recorded:11461ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/my_teaching</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MT] Click on Gradebook" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 66 Click on Gradebook" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/gradebook/report/teacher/class_details/${class_id_g2}/graph/grade</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/class/${class_name}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Gradebook Page Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1109594029">View by student</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[MT] Main Teacher Logout" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MT] 85 /main/p/en/caslogout" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/caslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/gradebook/report/teacher/class_details/${class_id_g2}/graph/grade</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Primary Teacher Workflow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">7</stringProp>
        <stringProp name="ThreadGroup.ramp_time">600</stringProp>
        <longProp name="ThreadGroup.start_time">1370726934000</longProp>
        <longProp name="ThreadGroup.end_time">1370726934000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay">20</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">perf.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password3" elementType="Argument">
              <stringProp name="Argument.name">password3</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="teacherUsernamePrefix2" elementType="Argument">
              <stringProp name="Argument.name">teacherUsernamePrefix2</stringProp>
              <stringProp name="Argument.value">zpaug2018t</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="servers" elementType="Argument">
              <stringProp name="Argument.name">servers</stringProp>
              <stringProp name="Argument.value">load1,load2,load3,load4,load5,load6,load7,load8,load9,load10,load11,load12,load13,load14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">clmsperf-load1.unicon.net,clmsperf-load2.unicon.net,clmsperf-load3.unicon.net,clmsperf-load4.unicon.net,clmsperf-load5.unicon.net,clmsperf-load6.unicon.net,clmsperf-load7.unicon.net</stringProp>
            </elementProp>
            <elementProp name="startUserPoolIndex3" elementType="Argument">
              <stringProp name="Argument.name">startUserPoolIndex3</stringProp>
              <stringProp name="Argument.value">401</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserPoolIndex3" elementType="Argument">
              <stringProp name="Argument.name">endUserPoolIndex3</stringProp>
              <stringProp name="Argument.value">800</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="partitionUserPool" elementType="Argument">
              <stringProp name="Argument.name">partitionUserPool</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="constantDelayOffset3" elementType="Argument">
              <stringProp name="Argument.name">constantDelayOffset3</stringProp>
              <stringProp name="Argument.value">4000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="authurl" elementType="Argument">
              <stringProp name="Argument.name">authurl</stringProp>
              <stringProp name="Argument.value">auth-perf-vpc.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delay" elementType="Argument">
              <stringProp name="Argument.name">delay</stringProp>
              <stringProp name="Argument.value">60000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PT] Beanshell Samplers - Teacher" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[PT] BeanShell Sampler_1" enabled="true">
            <stringProp name="BeanShellSampler.query">if (${partitionUserPool}) {
    String[] split = &quot;${servers}&quot;.split(&quot;,&quot;);
    int startUserIndex3 = ${startUserPoolIndex3};
    int endUserIndex3 = ${endUserPoolIndex3};
    int partitionSize = (endUserIndex3-startUserIndex3+1) / split.length;

    for (int i=0; i&lt;split.length; i++) {
        if (split[i].trim().equals(&quot;${__machineName}&quot;)) {
            int start3 = startUserIndex3 + (i*partitionSize);
            int end3 = i == split.length-1 ? endUserIndex3 : start3+partitionSize-1;
            System.out.println(&quot;[&quot;+start3+&quot;, &quot;+end3+&quot;]&quot;);
            vars.put(&quot;startUserIndex3&quot;, &quot;&quot;+start3);
            vars.put(&quot;endUserIndex3&quot;, &quot;&quot;+end3);
        }
    }
} else {
    System.out.println(&quot;Default user pool!&quot;);
    System.out.println(&quot;[${startUserPoolIndex3}, ${endUserPoolIndex3}]&quot;);
    vars.put(&quot;startUserIndex3&quot;, &quot;${startUserPoolIndex3}&quot;);
    vars.put(&quot;endUserIndex3&quot;, &quot;${endUserPoolIndex3}&quot;);
}

if (vars.get(&quot;userStart3&quot;) == null) {
    vars.put(&quot;userStart3&quot;, vars.get(&quot;startUserIndex3&quot;));
    System.out.println(&quot;Setting userStart3 to: &quot; + vars.get(&quot;userStart3&quot;));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[PT] BeanShell Sampler_2" enabled="true">
            <stringProp name="BeanShellSampler.query">int startIndex3 = Integer.valueOf(vars.get(&quot;startUserIndex3&quot;)).intValue();
int endIndex3 = Integer.valueOf(vars.get(&quot;endUserIndex3&quot;)).intValue();
int userStart3 = Integer.valueOf(vars.get(&quot;userStart3&quot;)).intValue();

int count = Integer.valueOf(${__counter(FALSE)}).intValue();
int nextUserIndex3 = ((userStart3 + count) % (endIndex3 - startIndex3 + 1)) + startIndex3;

vars.put(&quot;username3&quot;, &quot;${teacherUsernamePrefix2}&quot; + nextUserIndex3);

System.out.println(&quot;username3: &quot; + vars.get(&quot;username3&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PT] Launch Primary Teacher Splash Page" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 1 Launch CLMS Primary Splash Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/splash</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Homepage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1323736406">&lt;span&gt;Welcome to the&lt;/span&gt;  Cambridge LMS&lt;/h2&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 67 Load Login iFrame" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">splashpage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">top</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="css_path" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">css_path</stringProp>
                  <stringProp name="Argument.value">https://${url}/primary/p</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">https://${url}/primary/p/en/cas</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">100.0</stringProp>
              <stringProp name="TestPlan.comments">Recorded:13174ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/splash</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Session ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jsessionid</stringProp>
              <stringProp name="RegexExtractor.regex">jsessionid=([^&quot;]+)\?page=splashpage&amp;amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">JSESSIONID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LT Value Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lt_value</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;lt&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">execution_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${constantDelayOffset3}</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
            <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PT] Primary Teacher Login Process" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 76 Log in as Teacher" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${username3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password3}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">${lt_value}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${execution_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p&amp;service=https://${url}/primary/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CAS Ticket Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">service_ticket</stringProp>
              <stringProp name="RegexExtractor.regex">ticket=([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CASTICKET_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100469201">&lt;input type=&quot;hidden&quot; name=&quot;lt</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="TestPlan.comments">In the response assertion, we ensure that the pattern below is NOT on the page, which if it does exist would indicate that the login failed (as the login page reloads due ot failed login)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 77 Process CAS Service Ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ticket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ticket</stringProp>
                  <stringProp name="Argument.value">${service_ticket}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session Limit Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292635390">Session limit exceeded</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 79 My Teaching Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/my_teaching/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Org ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">org_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;/primary/p/en/my_teaching/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">ORG_ID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class Name Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_name</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;/primary/p/en/class/([^&quot;]+)&quot; class=&quot;class-home&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSNAME_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;https://([^&quot;]+)/primary/p/en/class/([^&quot;]+)/content_home/&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$$2$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset3}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Teacher Class Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username3&quot;));
System.out.println(&quot;Class Name: &quot; +  vars.get(&quot;class_name&quot;) + &quot; for &quot; + vars.get(&quot;username3&quot;));
System.out.println(&quot;Class ID: &quot; +  vars.get(&quot;class_id&quot;) + &quot; for &quot; + vars.get(&quot;username3&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PT] Primary Teacher Select Class" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 108 Select Class" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/class/${class_name}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset3}</stringProp>
              <stringProp name="RandomTimer.range">1000.0</stringProp>
              <stringProp name="TestPlan.comments">Recorded:12737ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/my_teaching</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 112 /primary/p/" enabled="false">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id_g2}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">image/png,image/*;q=0.8,*/*;q=0.5</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PT] Primary Teacher Click Report Card" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 114 Click on Report Card" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/gradebook/report/teacher/class_details/${class_id_g2}/graph/grade</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/class/${class_id_g2}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Valid User Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-716595924">Enter your ELT User ID and Password</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Correct Page Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1362615900">Report card</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PT] Primary Teacher Log Out" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PT] 134 Log Out" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/caslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/gradebook/report/teacher/class_details/${class_id_g2}/graph/grade</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Main Student Logins Only To Class Workflow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">53</stringProp>
        <stringProp name="ThreadGroup.ramp_time">900</stringProp>
        <longProp name="ThreadGroup.start_time">1504762271000</longProp>
        <longProp name="ThreadGroup.end_time">1504762271000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay">2</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">perf.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password5" elementType="Argument">
              <stringProp name="Argument.name">password5</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="studentUsernamePrefix5" elementType="Argument">
              <stringProp name="Argument.name">studentUsernamePrefix5</stringProp>
              <stringProp name="Argument.value">zpaug2018s</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="servers" elementType="Argument">
              <stringProp name="Argument.name">servers</stringProp>
              <stringProp name="Argument.value">load1,load2,load3,load4,load5,load6,load7,load8,load9,load10,load11,load12,load13,load14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">clmsperf-load1.unicon.net,clmsperf-load2.unicon.net,clmsperf-load3.unicon.net,clmsperf-load4.unicon.net,clmsperf-load5.unicon.net,clmsperf-load6.unicon.net,clmsperf-load7.unicon.net</stringProp>
            </elementProp>
            <elementProp name="startUserPoolIndex5" elementType="Argument">
              <stringProp name="Argument.name">startUserPoolIndex5</stringProp>
              <stringProp name="Argument.value">7250</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserPoolIndex5" elementType="Argument">
              <stringProp name="Argument.name">endUserPoolIndex5</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="partitionUserPool" elementType="Argument">
              <stringProp name="Argument.name">partitionUserPool</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="constantDelayOffset" elementType="Argument">
              <stringProp name="Argument.name">constantDelayOffset</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activityTimeDelay" elementType="Argument">
              <stringProp name="Argument.name">activityTimeDelay</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="authurl" elementType="Argument">
              <stringProp name="Argument.name">authurl</stringProp>
              <stringProp name="Argument.value">auth-perf-vpc.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="scormusedelay" elementType="Argument">
              <stringProp name="Argument.name">scormusedelay</stringProp>
              <stringProp name="Argument.value">90000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="longclickdelay" elementType="Argument">
              <stringProp name="Argument.name">longclickdelay</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delay" elementType="Argument">
              <stringProp name="Argument.name">delay</stringProp>
              <stringProp name="Argument.value">60000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Beanshell Samplers - Student" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[MS] BeanShell Sampler_1" enabled="true">
            <stringProp name="BeanShellSampler.query">if (${partitionUserPool}) {
    String[] split = &quot;${servers}&quot;.split(&quot;,&quot;);
    int startUserIndex5 = ${startUserPoolIndex5};
    int endUserIndex5 = ${endUserPoolIndex5};
    int partitionSize = (endUserIndex5-startUserIndex5+1) / split.length;

    for (int i=0; i&lt;split.length; i++) {
        if (split[i].trim().equals(&quot;${__machineName}&quot;)) {
            int start5 = startUserIndex5 + (i*partitionSize);
            int end5 = i == split.length-1 ? endUserIndex5 : start5+partitionSize-1;
            System.out.println(&quot;[&quot;+start5+&quot;, &quot;+end5+&quot;]&quot;);
            vars.put(&quot;startUserIndex5&quot;, &quot;&quot;+start5);
            vars.put(&quot;endUserIndex5&quot;, &quot;&quot;+end5);
        }
    }
} else {
    System.out.println(&quot;Default user pool!&quot;);
    System.out.println(&quot;[${startUserPoolIndex5}, ${endUserPoolIndex5}]&quot;);
    vars.put(&quot;startUserIndex5&quot;, &quot;${startUserPoolIndex5}&quot;);
    vars.put(&quot;endUserIndex5&quot;, &quot;${endUserPoolIndex5}&quot;);
}

if (vars.get(&quot;userStart5&quot;) == null) {
    vars.put(&quot;userStart5&quot;, vars.get(&quot;startUserIndex5&quot;));
    System.out.println(&quot;Setting userStart5 to: &quot; + vars.get(&quot;userStart5&quot;));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[MS] BeanShell Sampler_2" enabled="true">
            <stringProp name="BeanShellSampler.query">int startIndex5 = Integer.valueOf(vars.get(&quot;startUserIndex5&quot;)).intValue();
int endIndex5 = Integer.valueOf(vars.get(&quot;endUserIndex5&quot;)).intValue();
int userStart5 = Integer.valueOf(vars.get(&quot;userStart5&quot;)).intValue();

int count = Integer.valueOf(${__counter(FALSE)}).intValue();
int nextUserIndex5 = ((userStart5 + count) % (endIndex5 - startIndex5 + 1)) + startIndex5;

vars.put(&quot;username5&quot;, &quot;${studentUsernamePrefix5}&quot; + nextUserIndex5);

System.out.println(&quot;username5: &quot; + vars.get(&quot;username5&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Launch CLMS Main Splash" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] 1 Launch CLMS Main Splash" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/splash</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Homepage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-200122526"> Welcome to the Cambridge</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] 19 Load Login iFrame" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">splashpage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">top</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="css_path" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">css_path</stringProp>
                  <stringProp name="Argument.value">https://${url}/main/p/en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">https://${url}/main/p/en/cas</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/splash</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Session ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jsessionid</stringProp>
              <stringProp name="RegexExtractor.regex">jsessionid=([^&quot;]+)\?page=splashpage&amp;amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">JSESSIONID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LT Value Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lt_value</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;lt&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">execution_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
            <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Student Login Process" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Login Only Process Started at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username5&quot;));

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] 34 Log in as Student" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${username5}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password5}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">${lt_value}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${execution_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://auth-${url}/cas/login?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CAS Ticket Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cas_ticket</stringProp>
              <stringProp name="RegexExtractor.regex">ticket=([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CASTICKET_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100469201">&lt;input type=&quot;hidden&quot; name=&quot;lt</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="TestPlan.comments">In the response assertion, we ensure that the pattern below is NOT on the page, which if it does exist would indicate that the login failed (as the login page reloads due ot failed login)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] 35 Process CAS Service Ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ticket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ticket</stringProp>
                  <stringProp name="Argument.value">${cas_ticket}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session Limit Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292635390">Session limit exceeded</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] 37 My Learning Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/frontpage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/main/p/en&amp;service=https://${url}/main/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class Name Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_name</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSNAME_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_id</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/CUP-([^&quot;]+)-([^&quot;]+)&quot;&gt;Class Home&lt;/a&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Login Only Process Class Home Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username5&quot;));
System.out.println(&quot;Class Name: &quot; +  vars.get(&quot;class_name&quot;) + &quot; for &quot; + vars.get(&quot;username5&quot;));
System.out.println(&quot;Class ID: &quot; +  vars.get(&quot;class_id&quot;) + &quot; for &quot; + vars.get(&quot;username5&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Access Class Areas" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] Click_Announcement MAIN STUDENT" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/t/p/tools/announcement/list/${class_id}/0</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.implementation">Java</stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; rv:33.0) Gecko/20100101 Firefox/33.0</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://www.cambridgelms.org/main/t/p/tools/1197/events-calendar/2014/11/11</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="565271564">announcements</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="[MSL] Click on &apos;Forums&apos; - " enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">1</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click on &apos;Forums&apos; MAIN STUDENT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${url}</stringProp>
              <stringProp name="HTTPSampler.port">443</stringProp>
              <stringProp name="HTTPSampler.protocol">https</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/main/t/p/tools/${class_id}/forums</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">https://www.cambridgelms.org/main/p/frontpage</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate, br</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Thread ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">thread_ID</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;thread_(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Forum ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">forum_ID</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;forum_(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Topic ID Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">topic_ID</stringProp>
                <stringProp name="RegexExtractor.regex">id=&quot;topic_(.+?)&quot;&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Content Number Extractor" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">content_number</stringProp>
                <stringProp name="RegexExtractor.regex">content_home/(.*?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">null</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Forums Page" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1529081623">All Forums | Cambridge LMS</stringProp>
                </collectionProp>
                <stringProp name="TestPlan.comments">Assert that Forum Page has been successfully launched</stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Click on &apos;Class Content&apos;" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/class/${class_id}/content_home</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/frontpage</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tab_id</stringProp>
              <stringProp name="RegexExtractor.regex">href=&quot;/main/p/en/class/([^&quot;]+)/content_home/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">TABID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">course_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;course_nid&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">COURSEID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Login Only Process Access Class Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username5&quot;));
System.out.println(&quot;Tab ID: &quot; +  vars.get(&quot;tab_id&quot;) + &quot; for &quot; + vars.get(&quot;username5&quot;));
System.out.println(&quot;Course ID: &quot; +  vars.get(&quot;course_id&quot;) + &quot; for &quot; + vars.get(&quot;username5&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Student Logout" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Logout Only Process Executed at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username5&quot;));

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[MSL] 436 Log out from CLMS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/main/p/en/caslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/main/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Main Student Login Only Process Thread Finished at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username5&quot;));

</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Primary Student Logins Only To Class Workflow" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">17</stringProp>
        <stringProp name="ThreadGroup.ramp_time">900</stringProp>
        <longProp name="ThreadGroup.start_time">1504966397000</longProp>
        <longProp name="ThreadGroup.end_time">1504966397000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">7200</stringProp>
        <stringProp name="ThreadGroup.delay">5</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="url" elementType="Argument">
              <stringProp name="Argument.name">url</stringProp>
              <stringProp name="Argument.value">perf.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password6" elementType="Argument">
              <stringProp name="Argument.name">password6</stringProp>
              <stringProp name="Argument.value">test</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="studentUsernamePrefix6" elementType="Argument">
              <stringProp name="Argument.name">studentUsernamePrefix6</stringProp>
              <stringProp name="Argument.value">zpaug2018s</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="servers" elementType="Argument">
              <stringProp name="Argument.name">servers</stringProp>
              <stringProp name="Argument.value">load1,load2,load3,load4,load5,load6,load7,load8,load9,load10,load11,load12,load13,load14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">clmsperf-load1.unicon.net,clmsperf-load2.unicon.net,clmsperf-load3.unicon.net,clmsperf-load4.unicon.net,clmsperf-load5.unicon.net,clmsperf-load6.unicon.net,clmsperf-load7.unicon.net</stringProp>
            </elementProp>
            <elementProp name="startUserPoolIndex6" elementType="Argument">
              <stringProp name="Argument.name">startUserPoolIndex6</stringProp>
              <stringProp name="Argument.value">15750</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserPoolIndex6" elementType="Argument">
              <stringProp name="Argument.name">endUserPoolIndex6</stringProp>
              <stringProp name="Argument.value">16000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="partitionUserPool" elementType="Argument">
              <stringProp name="Argument.name">partitionUserPool</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="constantDelayOffset4" elementType="Argument">
              <stringProp name="Argument.name">constantDelayOffset4</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="authurl" elementType="Argument">
              <stringProp name="Argument.name">authurl</stringProp>
              <stringProp name="Argument.value">auth-perf-vpc.cambridgelms.org</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="scormusedelay" elementType="Argument">
              <stringProp name="Argument.name">scormusedelay</stringProp>
              <stringProp name="Argument.value">90000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="longclickdelay" elementType="Argument">
              <stringProp name="Argument.name">longclickdelay</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="delay" elementType="Argument">
              <stringProp name="Argument.name">delay</stringProp>
              <stringProp name="Argument.value">60000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activityTimeDelay" elementType="Argument">
              <stringProp name="Argument.name">activityTimeDelay</stringProp>
              <stringProp name="Argument.value">30000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
          <stringProp name="CookieManager.policy">standard</stringProp>
          <stringProp name="CookieManager.implementation">org.apache.jmeter.protocol.http.control.HC4CookieHandler</stringProp>
        </CookieManager>
        <hashTree/>
        <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
          <boolProp name="clearEachIteration">true</boolProp>
          <boolProp name="useExpires">false</boolProp>
        </CacheManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="[PS] Beanshell Samplers - Student" enabled="true"/>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[PS] BeanShell Sampler_1" enabled="true">
            <stringProp name="BeanShellSampler.query">if (${partitionUserPool}) {
    String[] split = &quot;${servers}&quot;.split(&quot;,&quot;);
    int startUserIndex6 = ${startUserPoolIndex6};
    int endUserIndex6 = ${endUserPoolIndex6};
    int partitionSize = (endUserIndex6-startUserIndex6+1) / split.length;

    for (int i=0; i&lt;split.length; i++) {
        if (split[i].trim().equals(&quot;${__machineName}&quot;)) {
            int start6 = startUserIndex6 + (i*partitionSize);
            int end6 = i == split.length-1 ? endUserIndex6 : start6+partitionSize-1;
            System.out.println(&quot;[&quot;+start6+&quot;, &quot;+end6+&quot;]&quot;);
            vars.put(&quot;startUserIndex6&quot;, &quot;&quot;+start6);
            vars.put(&quot;endUserIndex6&quot;, &quot;&quot;+end6);
        }
    }
} else {
    System.out.println(&quot;Default user pool!&quot;);
    System.out.println(&quot;[${startUserPoolIndex6}, ${endUserPoolIndex6}]&quot;);
    vars.put(&quot;startUserIndex6&quot;, &quot;${startUserPoolIndex6}&quot;);
    vars.put(&quot;endUserIndex6&quot;, &quot;${endUserPoolIndex6}&quot;);
}

if (vars.get(&quot;userStart6&quot;) == null) {
    vars.put(&quot;userStart6&quot;, vars.get(&quot;startUserIndex6&quot;));
    System.out.println(&quot;Setting userStart6 to: &quot; + vars.get(&quot;userStart6&quot;));
}</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="[PS] BeanShell Sampler_2" enabled="true">
            <stringProp name="BeanShellSampler.query">int startIndex6 = Integer.valueOf(vars.get(&quot;startUserIndex6&quot;)).intValue();
int endIndex6 = Integer.valueOf(vars.get(&quot;endUserIndex6&quot;)).intValue();
int userStart6 = Integer.valueOf(vars.get(&quot;userStart6&quot;)).intValue();

int count = Integer.valueOf(${__counter(FALSE)}).intValue();
int nextUserIndex6 = ((userStart6 + count) % (endIndex6 - startIndex6 + 1)) + startIndex6;

vars.put(&quot;username6&quot;, &quot;${studentUsernamePrefix6}&quot; + nextUserIndex6);

System.out.println(&quot;username6: &quot; + vars.get(&quot;username6&quot;));</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Launch CLMS Primary Splash" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 2 Launch Primary Splash" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/splash</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Homepage Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1323736406">&lt;span&gt;Welcome to the&lt;/span&gt;  Cambridge LMS&lt;/h2&gt;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 23 Load Login iFrame" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="page" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">page</stringProp>
                  <stringProp name="Argument.value">splashpage</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="target" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">target</stringProp>
                  <stringProp name="Argument.value">top</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="css_path" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">css_path</stringProp>
                  <stringProp name="Argument.value">https://${url}/primary/p/en</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="service" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">service</stringProp>
                  <stringProp name="Argument.value">https://${url}/primary/p/en/cas</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/splash</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Session ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">jsessionid</stringProp>
              <stringProp name="RegexExtractor.regex">jsessionid=([^&quot;]+)\?page=splashpage&amp;amp;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">JSESSIONID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="LT Value Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">lt_value</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;lt&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Execution Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">execution_id</stringProp>
              <stringProp name="RegexExtractor.regex">name=&quot;execution&quot; value=&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">LT_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
            <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
            <stringProp name="RandomTimer.range">1000</stringProp>
            <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary Student Login Process" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 41 Login as Student" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="username" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">username</stringProp>
                  <stringProp name="Argument.value">${username6}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="password" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">password</stringProp>
                  <stringProp name="Argument.value">${password6}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="submit" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">submit</stringProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="lt" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">lt</stringProp>
                  <stringProp name="Argument.value">${lt_value}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="execution" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">execution</stringProp>
                  <stringProp name="Argument.value">${execution_id}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="_eventId" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">_eventId</stringProp>
                  <stringProp name="Argument.value">submit</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${authurl}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="CAS Ticket Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">cas_ticket</stringProp>
              <stringProp name="RegexExtractor.regex">ticket=([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CASTICKET_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Login Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="100469201">&lt;input type=&quot;hidden&quot; name=&quot;lt</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
              <stringProp name="TestPlan.comments">In the response assertion, we ensure that the pattern below is NOT on the page, which if it does exist would indicate that the login failed (as the login page reloads due ot failed login)</stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 43 Process CAS Service Ticket" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="ticket" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">ticket</stringProp>
                  <stringProp name="Argument.value">${cas_ticket}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/cas</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Session Limit Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-292635390">Session limit exceeded</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">6</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 48 My Learning Page" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/frontpage</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected a redirect from the previous sample</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${authurl}/cas/login;jsessionid=${jsessionid}?page=splashpage&amp;target=top&amp;css_path=https://${url}/primary/p/en&amp;service=https://${url}/primary/p/en/cas</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class Name Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_name</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;/primary/p/en/class/([^&quot;]+)&quot; class=&quot;class-home&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSNAME_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Class ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">class_id</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;a href=&quot;https://([^&quot;]+)/primary/p/en/class/([^&quot;]+)/content_home/&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">CLASSID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Student Login Only Class Home Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username6&quot;));
System.out.println(&quot;Class Name: &quot; +  vars.get(&quot;class_name&quot;) + &quot; for &quot; + vars.get(&quot;username6&quot;));
System.out.println(&quot;Class ID: &quot; +  vars.get(&quot;class_id&quot;) + &quot; for &quot; + vars.get(&quot;username6&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Access Class" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 70 Go to Class" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/class/${class_name}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/frontpage</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Course ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">course_id</stringProp>
              <stringProp name="RegexExtractor.regex">&quot;nid_course&quot;:&quot;([^&quot;]+)&quot;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">COURSEID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Tab ID Extractor" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">tab_id</stringProp>
              <stringProp name="RegexExtractor.regex">a href=&quot;/primary/p/en/class/([^&quot;]+)/content_home/([^&quot;]+)&quot;&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$2$</stringProp>
              <stringProp name="RegexExtractor.default">TABID_NOT_FOUND</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">System.out.println(&quot;Primary Student Access Class Variables Extracted at : &quot; + System.currentTimeMillis() + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Tab ID: &quot; +  vars.get(&quot;tab_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
System.out.println(&quot;Course ID: &quot; +  vars.get(&quot;course_id&quot;) + &quot; for &quot; + vars.get(&quot;username4&quot;));
</stringProp>
            <stringProp name="BeanShellSampler.filename"></stringProp>
            <stringProp name="BeanShellSampler.parameters"></stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click Delay Controller" enabled="true"/>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${constantDelayOffset}</stringProp>
              <stringProp name="RandomTimer.range">1000</stringProp>
              <stringProp name="TestPlan.comments">Recorded:0ms</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Primary Student Logout" enabled="true"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="[PSL] 241 Log out from CLMS" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${url}</stringProp>
            <stringProp name="HTTPSampler.port">443</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/primary/p/en/caslogout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Detected the start of a redirect chain</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${url}/primary/p/en/gradebook/report/student/class_details/${class_id}</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; WOW64; rv:46.0) Gecko/20100101 Firefox/46.0</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
              <stringProp name="ConstantTimer.delay">${delay}</stringProp>
            </ConstantTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
