<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ComproDLS Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performance Test Data Setup">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - NEW Alpha">
          <collectionProp name="Arguments.arguments">
            <elementProp name="startTime" elementType="Argument">
              <stringProp name="Argument.name">startTime</stringProp>
              <stringProp name="Argument.value">1587361481394</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="minWait" elementType="Argument">
              <stringProp name="Argument.name">minWait</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maxWait" elementType="Argument">
              <stringProp name="Argument.name">maxWait</stringProp>
              <stringProp name="Argument.value">1500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="invitationwait" elementType="Argument">
              <stringProp name="Argument.name">invitationwait</stringProp>
              <stringProp name="Argument.value">20000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="invitationwait1" elementType="Argument">
              <stringProp name="Argument.name">invitationwait1</stringProp>
              <stringProp name="Argument.value">10000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="asyncWait" elementType="Argument">
              <stringProp name="Argument.name">asyncWait</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="asyncWait1" elementType="Argument">
              <stringProp name="Argument.name">asyncWait1</stringProp>
              <stringProp name="Argument.value">6000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max_assignedpaths" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max_assignedpaths</stringProp>
              <stringProp name="Argument.value">5000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learning_progress" elementType="Argument">
              <stringProp name="Argument.name">learning_progress</stringProp>
              <stringProp name="Argument.value">16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="group_learning_progress" elementType="Argument">
              <stringProp name="Argument.name">group_learning_progress</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="group_learning_progressps" elementType="Argument">
              <stringProp name="Argument.name">group_learning_progressps</stringProp>
              <stringProp name="Argument.value">16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assignmentlearningprogressscorable" elementType="Argument">
              <stringProp name="Argument.name">assignmentlearningprogressscorable</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assignmentlearningprogress" elementType="Argument">
              <stringProp name="Argument.name">assignmentlearningprogress</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assigned_path_class_count" elementType="Argument">
              <stringProp name="Argument.name">assigned_path_class_count</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="host_url" elementType="Argument">
              <stringProp name="Argument.name">host_url</stringProp>
              <stringProp name="Argument.value">${__P(auth_url,dls-cup-alpha-2093819659.us-west-2.elb.amazonaws.com)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="date" elementType="Argument">
              <stringProp name="Argument.name">date</stringProp>
              <stringProp name="Argument.value">${__time(YMDHMS)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testrun" elementType="Argument">
              <stringProp name="Argument.name">testrun</stringProp>
              <stringProp name="Argument.value">${__P(run_id,Perf)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accountid" elementType="Argument">
              <stringProp name="Argument.name">accountid</stringProp>
              <stringProp name="Argument.value">${__P(Account_id,cup1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacecode" elementType="Argument">
              <stringProp name="Argument.name">spacecode</stringProp>
              <stringProp name="Argument.value">${__P(space_code,PRF-ALP-ONE)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacecode2" elementType="Argument">
              <stringProp name="Argument.name">spacecode2</stringProp>
              <stringProp name="Argument.value">${__P(space_code,PRF-ALP-TWO)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacekey" elementType="Argument">
              <stringProp name="Argument.name">spacekey</stringProp>
              <stringProp name="Argument.value">org_perf-test1-alpha</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="orgid" elementType="Argument">
              <stringProp name="Argument.name">orgid</stringProp>
              <stringProp name="Argument.value">${__P(orgid,perf-test1-alpha)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="shorgid" elementType="Argument">
              <stringProp name="Argument.name">shorgid</stringProp>
              <stringProp name="Argument.value">${__P(shorgid,sh_alpha_cup1_1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ext_product_id" elementType="Argument">
              <stringProp name="Argument.name">ext_product_id</stringProp>
              <stringProp name="Argument.value">${__P(product_code,9781108414098)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ext_product_id2" elementType="Argument">
              <stringProp name="Argument.name">ext_product_id2</stringProp>
              <stringProp name="Argument.value">${__P(product_code,9781108414142)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productcode" elementType="Argument">
              <stringProp name="Argument.name">productcode</stringProp>
              <stringProp name="Argument.value">${__P(product_code,evpel1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productcode2" elementType="Argument">
              <stringProp name="Argument.name">productcode2</stringProp>
              <stringProp name="Argument.value">${__P(product_code,evpel2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="verb" elementType="Argument">
              <stringProp name="Argument.name">verb</stringProp>
              <stringProp name="Argument.value">${__P(verb_type,launched)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="product-enddate" elementType="Argument">
              <stringProp name="Argument.name">product-enddate</stringProp>
              <stringProp name="Argument.value">${__P(end_date,1575719566000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classcodeinst1_DONOTUSE" elementType="Argument">
              <stringProp name="Argument.name">classcodeinst1_DONOTUSE</stringProp>
              <stringProp name="Argument.value">${__P(class_code,G4cb-UNcT)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classcode2_DONOTUSE" elementType="Argument">
              <stringProp name="Argument.name">classcode2_DONOTUSE</stringProp>
              <stringProp name="Argument.value">${__P(class_code,YeaG-DVJZ)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classname" elementType="Argument">
              <stringProp name="Argument.name">classname</stringProp>
              <stringProp name="Argument.value">${__P(classname,newclass)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multipleUsersForEnrollment" elementType="Argument">
              <stringProp name="Argument.name">multipleUsersForEnrollment</stringProp>
              <stringProp name="Argument.value">${__P(userset,&quot;762d9ca7-363d-4be7-8e6f-d9ec9cf196ff&quot;)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pinstance" elementType="Argument">
              <stringProp name="Argument.name">pinstance</stringProp>
              <stringProp name="Argument.value">${__P(InstanceID,1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="bundle-code" elementType="Argument">
              <stringProp name="Argument.name">bundle-code</stringProp>
              <stringProp name="Argument.value">${__P(bundle-code,evpel1_bundle)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="bundle-code2" elementType="Argument">
              <stringProp name="Argument.name">bundle-code2</stringProp>
              <stringProp name="Argument.value">${__P(bundle-code,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assignmentstartdate" elementType="Argument">
              <stringProp name="Argument.name">assignmentstartdate</stringProp>
              <stringProp name="Argument.value">${__time(,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assignmentenddate" elementType="Argument">
              <stringProp name="Argument.name">assignmentenddate</stringProp>
              <stringProp name="Argument.value">${__timeShift(,,P1820D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="assigned_path_id" elementType="Argument">
              <stringProp name="Argument.name">assigned_path_id</stringProp>
              <stringProp name="Argument.value">NOT_FOUND</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counter" elementType="Argument">
              <stringProp name="Argument.name">counter</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="invitationorgid" elementType="Argument">
              <stringProp name="Argument.name">invitationorgid</stringProp>
              <stringProp name="Argument.value">${__P(invitationorgid,perf-test1-alpha)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode1" elementType="Argument">
              <stringProp name="Argument.name">itemcode1</stringProp>
              <stringProp name="Argument.value">${__P(itemcode,1544521486954/1544521507623/1544521559147)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode2" elementType="Argument">
              <stringProp name="Argument.name">itemcode2</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521507623/1544521594726</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode3" elementType="Argument">
              <stringProp name="Argument.name">itemcode3</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521507623/1544521622470</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode4" elementType="Argument">
              <stringProp name="Argument.name">itemcode4</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521507623/1544521637851</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode5" elementType="Argument">
              <stringProp name="Argument.name">itemcode5</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521889598/1544522141435</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startDate" elementType="Argument">
              <stringProp name="Argument.name">startDate</stringProp>
              <stringProp name="Argument.value">${__time(,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endDate" elementType="Argument">
              <stringProp name="Argument.name">endDate</stringProp>
              <stringProp name="Argument.value">${__timeShift(,,P1825D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="workflow_type" elementType="Argument">
              <stringProp name="Argument.name">workflow_type</stringProp>
              <stringProp name="Argument.value">institution_request</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="status" elementType="Argument">
              <stringProp name="Argument.name">status</stringProp>
              <stringProp name="Argument.value">pending</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productGroups" elementType="Argument">
              <stringProp name="Argument.name">productGroups</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productType" elementType="Argument">
              <stringProp name="Argument.name">productType</stringProp>
              <stringProp name="Argument.value">single</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="task" elementType="Argument">
              <stringProp name="Argument.name">task</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521507623/1544521559147</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode" elementType="Argument">
              <stringProp name="Argument.name">itemcode</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521507623/1544521559147</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="grouptask" elementType="Argument">
              <stringProp name="Argument.name">grouptask</stringProp>
              <stringProp name="Argument.value">1591701928122/1591701946681/1592291282828</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multiproduct1" elementType="Argument">
              <stringProp name="Argument.name">multiproduct1</stringProp>
              <stringProp name="Argument.value">perf_alpha_pe1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multiproduct2" elementType="Argument">
              <stringProp name="Argument.name">multiproduct2</stringProp>
              <stringProp name="Argument.value">perf_alpha_pw1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="group-bundle-code" elementType="Argument">
              <stringProp name="Argument.name">group-bundle-code</stringProp>
              <stringProp name="Argument.value">perfalpha_bundle1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multiproductid1" elementType="Argument">
              <stringProp name="Argument.name">multiproductid1</stringProp>
              <stringProp name="Argument.value">perfpealpha1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multiproductid2" elementType="Argument">
              <stringProp name="Argument.name">multiproductid2</stringProp>
              <stringProp name="Argument.value">perfpwalpha1234</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ielts_bundle-code" elementType="Argument">
              <stringProp name="Argument.name">ielts_bundle-code</stringProp>
              <stringProp name="Argument.value">${__P(bundle-code,ielts_bundle)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ielts_productcode" elementType="Argument">
              <stringProp name="Argument.name">ielts_productcode</stringProp>
              <stringProp name="Argument.value">${__P(product_code,ielts_pe)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ielts_ext_product_id" elementType="Argument">
              <stringProp name="Argument.name">ielts_ext_product_id</stringProp>
              <stringProp name="Argument.value">${__P(product_code,9781108414098)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ielts_itemcode" elementType="Argument">
              <stringProp name="Argument.name">ielts_itemcode</stringProp>
              <stringProp name="Argument.value">1599458729600</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="task1038" elementType="Argument">
              <stringProp name="Argument.name">task1038</stringProp>
              <stringProp name="Argument.value">1544521486954/1544521507623/1544521559147</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ebookproductcode" elementType="Argument">
              <stringProp name="Argument.name">ebookproductcode</stringProp>
              <stringProp name="Argument.value">${__P(product_code,cqaperftestebook)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ebook_bundle-code" elementType="Argument">
              <stringProp name="Argument.name">ebook_bundle-code</stringProp>
              <stringProp name="Argument.value">${__P(bundle-code,evpel1_bundle)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pageNum" elementType="Argument">
              <stringProp name="Argument.name">pageNum</stringProp>
              <stringProp name="Argument.value">14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pageNum_read" elementType="Argument">
              <stringProp name="Argument.name">pageNum_read</stringProp>
              <stringProp name="Argument.value">14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pageNavigationPause" elementType="Argument">
              <stringProp name="Argument.name">pageNavigationPause</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="pageNavigationLoopCount" elementType="Argument">
              <stringProp name="Argument.name">pageNavigationLoopCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AddNotesLoopCount" elementType="Argument">
              <stringProp name="Argument.name">AddNotesLoopCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AddDrawingLoopCount" elementType="Argument">
              <stringProp name="Argument.name">AddDrawingLoopCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="record_size" elementType="Argument">
              <stringProp name="Argument.name">record_size</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="orgid_es" elementType="Argument">
              <stringProp name="Argument.name">orgid_es</stringProp>
              <stringProp name="Argument.value">${__P(orgid_es,perf-test1-alpha)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="extuseridGetDocument" elementType="Argument">
              <stringProp name="Argument.name">extuseridGetDocument</stringProp>
              <stringProp name="Argument.value">tch_20200602-104742_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="folderid_alldocs" elementType="Argument">
              <stringProp name="Argument.name">folderid_alldocs</stringProp>
              <stringProp name="Argument.value">library/umbrella</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classidGetDocument" elementType="Argument">
              <stringProp name="Argument.name">classidGetDocument</stringProp>
              <stringProp name="Argument.value">7388dde7-8eac-11ea-840b-0242ac110002</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="extUserIdHideToc" elementType="Argument">
              <stringProp name="Argument.name">extUserIdHideToc</stringProp>
              <stringProp name="Argument.value">std_1616493208993_6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_min_1011" elementType="Argument">
              <stringProp name="Argument.name">userProgress_min_1011</stringProp>
              <stringProp name="Argument.value">1500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max_1011" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max_1011</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011</stringProp>
              <stringProp name="Argument.value">16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_min_1038nps" elementType="Argument">
              <stringProp name="Argument.name">userProgress_min_1038nps</stringProp>
              <stringProp name="Argument.value">1700</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max_1038nps" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max_1038nps</stringProp>
              <stringProp name="Argument.value">800</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ruleType" elementType="Argument">
              <stringProp name="Argument.name">ruleType</stringProp>
              <stringProp name="Argument.value">content-access</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endTimeForRule" elementType="Argument">
              <stringProp name="Argument.name">endTimeForRule</stringProp>
              <stringProp name="Argument.value">${__timeShift(,,P360D,,)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV - Product Category Details" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="cat1pe1" elementType="Argument">
              <stringProp name="Argument.name">cat1pe1</stringProp>
              <stringProp name="Argument.value">evpel1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe2" elementType="Argument">
              <stringProp name="Argument.name">cat1pe2</stringProp>
              <stringProp name="Argument.value">perfb1pe1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe3" elementType="Argument">
              <stringProp name="Argument.name">cat1pe3</stringProp>
              <stringProp name="Argument.value">perfb1pe2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe4" elementType="Argument">
              <stringProp name="Argument.name">cat1pe4</stringProp>
              <stringProp name="Argument.value">perfprod21</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe5" elementType="Argument">
              <stringProp name="Argument.name">cat1pe5</stringProp>
              <stringProp name="Argument.value">perfprod22</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe6" elementType="Argument">
              <stringProp name="Argument.name">cat1pe6</stringProp>
              <stringProp name="Argument.value">perfprod23</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe7" elementType="Argument">
              <stringProp name="Argument.name">cat1pe7</stringProp>
              <stringProp name="Argument.value">perfprod24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe8" elementType="Argument">
              <stringProp name="Argument.name">cat1pe8</stringProp>
              <stringProp name="Argument.value">perfprod25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe9" elementType="Argument">
              <stringProp name="Argument.name">cat1pe9</stringProp>
              <stringProp name="Argument.value">perfprod111</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe10" elementType="Argument">
              <stringProp name="Argument.name">cat1pe10</stringProp>
              <stringProp name="Argument.value">perfprod112</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe11" elementType="Argument">
              <stringProp name="Argument.name">cat1pe11</stringProp>
              <stringProp name="Argument.value">perfprod113</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1pe12" elementType="Argument">
              <stringProp name="Argument.name">cat1pe12</stringProp>
              <stringProp name="Argument.value">perfprod115</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe1" elementType="Argument">
              <stringProp name="Argument.name">cat2pe1</stringProp>
              <stringProp name="Argument.value">perfprod3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe2" elementType="Argument">
              <stringProp name="Argument.name">cat2pe2</stringProp>
              <stringProp name="Argument.value">perfprod4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe3" elementType="Argument">
              <stringProp name="Argument.name">cat2pe3</stringProp>
              <stringProp name="Argument.value">perfprod5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe4" elementType="Argument">
              <stringProp name="Argument.name">cat2pe4</stringProp>
              <stringProp name="Argument.value">perfprod6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe5" elementType="Argument">
              <stringProp name="Argument.name">cat2pe5</stringProp>
              <stringProp name="Argument.value">perfprod7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe6" elementType="Argument">
              <stringProp name="Argument.name">cat2pe6</stringProp>
              <stringProp name="Argument.value">perfprod8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe7" elementType="Argument">
              <stringProp name="Argument.name">cat2pe7</stringProp>
              <stringProp name="Argument.value">perfprod9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe8" elementType="Argument">
              <stringProp name="Argument.name">cat2pe8</stringProp>
              <stringProp name="Argument.value">perfprod10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe9" elementType="Argument">
              <stringProp name="Argument.name">cat2pe9</stringProp>
              <stringProp name="Argument.value">perfprod11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2pe10" elementType="Argument">
              <stringProp name="Argument.name">cat2pe10</stringProp>
              <stringProp name="Argument.value">perfprod12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe1" elementType="Argument">
              <stringProp name="Argument.name">cat3pe1</stringProp>
              <stringProp name="Argument.value">perfprod5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe2" elementType="Argument">
              <stringProp name="Argument.name">cat3pe2</stringProp>
              <stringProp name="Argument.value">perfprod6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe3" elementType="Argument">
              <stringProp name="Argument.name">cat3pe3</stringProp>
              <stringProp name="Argument.value">perfprod7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe4" elementType="Argument">
              <stringProp name="Argument.name">cat3pe4</stringProp>
              <stringProp name="Argument.value">perfprod8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe5" elementType="Argument">
              <stringProp name="Argument.name">cat3pe5</stringProp>
              <stringProp name="Argument.value">perfprod9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe6" elementType="Argument">
              <stringProp name="Argument.name">cat3pe6</stringProp>
              <stringProp name="Argument.value">perfprod10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe7" elementType="Argument">
              <stringProp name="Argument.name">cat3pe7</stringProp>
              <stringProp name="Argument.value">perfprod11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe8" elementType="Argument">
              <stringProp name="Argument.name">cat3pe8</stringProp>
              <stringProp name="Argument.value">perfprod12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe9" elementType="Argument">
              <stringProp name="Argument.name">cat3pe9</stringProp>
              <stringProp name="Argument.value">perfprod86</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe10" elementType="Argument">
              <stringProp name="Argument.name">cat3pe10</stringProp>
              <stringProp name="Argument.value">perfprod87</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe11" elementType="Argument">
              <stringProp name="Argument.name">cat3pe11</stringProp>
              <stringProp name="Argument.value">perfprod88</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe12" elementType="Argument">
              <stringProp name="Argument.name">cat3pe12</stringProp>
              <stringProp name="Argument.value">perfprod89</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe13" elementType="Argument">
              <stringProp name="Argument.name">cat3pe13</stringProp>
              <stringProp name="Argument.value">perfprod90</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe14" elementType="Argument">
              <stringProp name="Argument.name">cat3pe14</stringProp>
              <stringProp name="Argument.value">perfprod91</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3pe15" elementType="Argument">
              <stringProp name="Argument.name">cat3pe15</stringProp>
              <stringProp name="Argument.value">perfprod92</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe1" elementType="Argument">
              <stringProp name="Argument.name">cat4pe1</stringProp>
              <stringProp name="Argument.value">perfprod41</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe2" elementType="Argument">
              <stringProp name="Argument.name">cat4pe2</stringProp>
              <stringProp name="Argument.value">perfprod42</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe3" elementType="Argument">
              <stringProp name="Argument.name">cat4pe3</stringProp>
              <stringProp name="Argument.value">perfprod43</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe4" elementType="Argument">
              <stringProp name="Argument.name">cat4pe4</stringProp>
              <stringProp name="Argument.value">perfprod44</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe5" elementType="Argument">
              <stringProp name="Argument.name">cat4pe5</stringProp>
              <stringProp name="Argument.value">perfprod45</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe6" elementType="Argument">
              <stringProp name="Argument.name">cat4pe6</stringProp>
              <stringProp name="Argument.value">perfprod46</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe7" elementType="Argument">
              <stringProp name="Argument.name">cat4pe7</stringProp>
              <stringProp name="Argument.value">perfprod47</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe8" elementType="Argument">
              <stringProp name="Argument.name">cat4pe8</stringProp>
              <stringProp name="Argument.value">perfprod48</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe9" elementType="Argument">
              <stringProp name="Argument.name">cat4pe9</stringProp>
              <stringProp name="Argument.value">perfprod49</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe10" elementType="Argument">
              <stringProp name="Argument.name">cat4pe10</stringProp>
              <stringProp name="Argument.value">perfprod50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe11" elementType="Argument">
              <stringProp name="Argument.name">cat4pe11</stringProp>
              <stringProp name="Argument.value">perfprod101</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe12" elementType="Argument">
              <stringProp name="Argument.name">cat4pe12</stringProp>
              <stringProp name="Argument.value">perfprod102</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe13" elementType="Argument">
              <stringProp name="Argument.name">cat4pe13</stringProp>
              <stringProp name="Argument.value">perfprod103</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe14" elementType="Argument">
              <stringProp name="Argument.name">cat4pe14</stringProp>
              <stringProp name="Argument.value">perfprod104</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4pe15" elementType="Argument">
              <stringProp name="Argument.name">cat4pe15</stringProp>
              <stringProp name="Argument.value">perfprod105</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1" elementType="Argument">
              <stringProp name="Argument.name">cat1</stringProp>
              <stringProp name="Argument.value">3B8PE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2" elementType="Argument">
              <stringProp name="Argument.name">cat2</stringProp>
              <stringProp name="Argument.value">3B10PE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3" elementType="Argument">
              <stringProp name="Argument.name">cat3</stringProp>
              <stringProp name="Argument.value">3B15PE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4" elementType="Argument">
              <stringProp name="Argument.name">cat4</stringProp>
              <stringProp name="Argument.value">2B15PE</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011_cat1" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011_cat1</stringProp>
              <stringProp name="Argument.value">40</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011_cat2" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011_cat2</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011_cat3" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011_cat3</stringProp>
              <stringProp name="Argument.value">40</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011_cat4" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011_cat4</stringProp>
              <stringProp name="Argument.value">800</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011_cat4_pe1" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011_cat4_pe1</stringProp>
              <stringProp name="Argument.value">80</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogressnps_1011_cat4_pe2" elementType="Argument">
              <stringProp name="Argument.name">learningprogressnps_1011_cat4_pe2</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogress-ps_1012_cat1" elementType="Argument">
              <stringProp name="Argument.name">learningprogress-ps_1012_cat1</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogress-ps_1012_cat2" elementType="Argument">
              <stringProp name="Argument.name">learningprogress-ps_1012_cat2</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogress-ps_1012_cat3" elementType="Argument">
              <stringProp name="Argument.name">learningprogress-ps_1012_cat3</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learningprogress-ps_1012_cat4" elementType="Argument">
              <stringProp name="Argument.name">learningprogress-ps_1012_cat4</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LockRuleCount_cat1" elementType="Argument">
              <stringProp name="Argument.name">LockRuleCount_cat1</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOsInLockRule_cat1" elementType="Argument">
              <stringProp name="Argument.name">LOsInLockRule_cat1</stringProp>
              <stringProp name="Argument.value">50</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LockRuleCount_cat2" elementType="Argument">
              <stringProp name="Argument.name">LockRuleCount_cat2</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOsInLockRule_cat2" elementType="Argument">
              <stringProp name="Argument.name">LOsInLockRule_cat2</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LockRuleCount_cat3" elementType="Argument">
              <stringProp name="Argument.name">LockRuleCount_cat3</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOsInLockRule_cat3" elementType="Argument">
              <stringProp name="Argument.name">LOsInLockRule_cat3</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LockRuleCount_cat4" elementType="Argument">
              <stringProp name="Argument.name">LockRuleCount_cat4</stringProp>
              <stringProp name="Argument.value">500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LOsInLockRule_cat4" elementType="Argument">
              <stringProp name="Argument.name">LOsInLockRule_cat4</stringProp>
              <stringProp name="Argument.value">150</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1b1" elementType="Argument">
              <stringProp name="Argument.name">cat1b1</stringProp>
              <stringProp name="Argument.value">evpel1_bundle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1b2" elementType="Argument">
              <stringProp name="Argument.name">cat1b2</stringProp>
              <stringProp name="Argument.value">perf_bundle_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat1b3" elementType="Argument">
              <stringProp name="Argument.name">cat1b3</stringProp>
              <stringProp name="Argument.value">perf_bundle_8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2b1" elementType="Argument">
              <stringProp name="Argument.name">cat2b1</stringProp>
              <stringProp name="Argument.value">perf_bundle_17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2b2" elementType="Argument">
              <stringProp name="Argument.name">cat2b2</stringProp>
              <stringProp name="Argument.value">perf_bundle_18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat2b3" elementType="Argument">
              <stringProp name="Argument.name">cat2b3</stringProp>
              <stringProp name="Argument.value">perf_bundle_19</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3b1" elementType="Argument">
              <stringProp name="Argument.name">cat3b1</stringProp>
              <stringProp name="Argument.value">perf_bundle_18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3b2" elementType="Argument">
              <stringProp name="Argument.name">cat3b2</stringProp>
              <stringProp name="Argument.value">perf_bundle_19</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat3b3" elementType="Argument">
              <stringProp name="Argument.name">cat3b3</stringProp>
              <stringProp name="Argument.value">perf_bundle_22</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4b1" elementType="Argument">
              <stringProp name="Argument.name">cat4b1</stringProp>
              <stringProp name="Argument.value">perf_bundle_12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat4b2" elementType="Argument">
              <stringProp name="Argument.name">cat4b2</stringProp>
              <stringProp name="Argument.value">perf_bundle_24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat5pe1" elementType="Argument">
              <stringProp name="Argument.name">cat5pe1</stringProp>
              <stringProp name="Argument.value">perfprod106</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat5pe2" elementType="Argument">
              <stringProp name="Argument.name">cat5pe2</stringProp>
              <stringProp name="Argument.value">perfprod107</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat5pe3" elementType="Argument">
              <stringProp name="Argument.name">cat5pe3</stringProp>
              <stringProp name="Argument.value">perfprod108</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat5pe4" elementType="Argument">
              <stringProp name="Argument.name">cat5pe4</stringProp>
              <stringProp name="Argument.value">perfprod109</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="cat5pe5" elementType="Argument">
              <stringProp name="Argument.name">cat5pe5</stringProp>
              <stringProp name="Argument.value">perfprod110</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf21pe1" elementType="Argument">
              <stringProp name="Argument.name">perf21pe1</stringProp>
              <stringProp name="Argument.value">perfprod81</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf21pe2" elementType="Argument">
              <stringProp name="Argument.name">perf21pe2</stringProp>
              <stringProp name="Argument.value">perfprod82</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf21pe3" elementType="Argument">
              <stringProp name="Argument.name">perf21pe3</stringProp>
              <stringProp name="Argument.value">perfprod83</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf21pe4" elementType="Argument">
              <stringProp name="Argument.name">perf21pe4</stringProp>
              <stringProp name="Argument.value">perfprod84</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf21pe5" elementType="Argument">
              <stringProp name="Argument.name">perf21pe5</stringProp>
              <stringProp name="Argument.value">perfprod85</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV - Product Category Details Updated" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="L1" elementType="Argument">
              <stringProp name="Argument.name">L1</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;, &quot;perf30_100lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L1_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2" elementType="Argument">
              <stringProp name="Argument.name">L2</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;, &quot;perf30_100lo_1&quot;, &quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L2_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;,  &quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3" elementType="Argument">
              <stringProp name="Argument.name">L3</stringProp>
              <stringProp name="Argument.value">&quot;perf29_100lo_1&quot;, &quot;perf29_100lo_2&quot;, &quot;perf29_300lo_1&quot;, &quot;perf29_300lo_2&quot;, &quot;perf29_300lo_3&quot;, &quot;perf29_300lo_4&quot;,&quot;perf31_300lo_1&quot;, &quot;perf31_300lo_2&quot;, &quot;perf31_300lo_3&quot;, &quot;perf31_100lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L3_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf29_300lo_1&quot;, &quot;perf29_300lo_2&quot;, &quot;perf29_300lo_3&quot;, &quot;perf29_300lo_4&quot;,&quot;perf31_300lo_1&quot;, &quot;perf31_300lo_2&quot;, &quot;perf31_300lo_3&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4" elementType="Argument">
              <stringProp name="Argument.name">L4</stringProp>
              <stringProp name="Argument.value">&quot;perf29_100lo_1&quot;, &quot;perf29_100lo_2&quot;, &quot;perf29_300lo_1&quot;, &quot;perf29_300lo_2&quot;, &quot;perf29_300lo_3&quot;, &quot;perf29_300lo_4&quot;,&quot;perf31_300lo_1&quot;, &quot;perf31_300lo_2&quot;, &quot;perf31_300lo_3&quot;, &quot;perf31_100lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L4_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf29_300lo_1&quot;, &quot;perf29_300lo_2&quot;, &quot;perf29_300lo_3&quot;, &quot;perf29_300lo_4&quot;,&quot;perf31_300lo_1&quot;, &quot;perf31_300lo_2&quot;, &quot;perf31_300lo_3&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5" elementType="Argument">
              <stringProp name="Argument.name">L5</stringProp>
              <stringProp name="Argument.value">&quot;perf29_100lo_1&quot;, &quot;perf29_100lo_2&quot;, &quot;perf29_300lo_1&quot;, &quot;perf29_300lo_2&quot;, &quot;perf29_300lo_3&quot;, &quot;perf29_300lo_4&quot;,&quot;perf31_300lo_1&quot;, &quot;perf31_300lo_2&quot;, &quot;perf31_300lo_3&quot;, &quot;perf31_100lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L5_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf29_300lo_1&quot;, &quot;perf29_300lo_2&quot;, &quot;perf29_300lo_3&quot;, &quot;perf29_300lo_4&quot;,&quot;perf31_300lo_1&quot;, &quot;perf31_300lo_2&quot;, &quot;perf31_300lo_3&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6" elementType="Argument">
              <stringProp name="Argument.name">L6</stringProp>
              <stringProp name="Argument.value">&quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;, &quot;perfb2pe2&quot;, &quot;perfb2pe1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L6_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;, &quot;perfb2pe2&quot;, &quot;perfb2pe1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1" elementType="Argument">
              <stringProp name="Argument.name">M1</stringProp>
              <stringProp name="Argument.value">&quot;perf32_300lo_1&quot;, &quot;perf32_300lo_2&quot;, &quot;perf32_300lo_3&quot;, &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;, &quot;perf32_100lo_1&quot;,&quot;perfb1pe1&quot;,&quot;perfb1pe2&quot;,&quot;perf39_100lo_1&quot;, &quot;perf39_100lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_Assignment" elementType="Argument">
              <stringProp name="Argument.name">M1_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf32_300lo_1&quot;, &quot;perf32_300lo_2&quot;, &quot;perf32_300lo_3&quot;, &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;, &quot;perfb1pe1&quot;,&quot;perfb1pe2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2" elementType="Argument">
              <stringProp name="Argument.name">M2</stringProp>
              <stringProp name="Argument.value">&quot;perf32_300lo_1&quot;, &quot;perf32_300lo_2&quot;, &quot;perf32_300lo_3&quot;, &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;, &quot;perf32_100lo_1&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf34_400lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_Assignment" elementType="Argument">
              <stringProp name="Argument.name">M2_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf32_300lo_1&quot;, &quot;perf32_300lo_2&quot;, &quot;perf32_300lo_3&quot;, &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf34_400lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3" elementType="Argument">
              <stringProp name="Argument.name">M3</stringProp>
              <stringProp name="Argument.value">&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perfb1pe1&quot;,&quot;perfb1pe2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_Assignment" elementType="Argument">
              <stringProp name="Argument.name">M3_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perfb1pe1&quot;,&quot;perfb1pe2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4" elementType="Argument">
              <stringProp name="Argument.name">M4</stringProp>
              <stringProp name="Argument.value">&quot;perf32_300lo_1&quot;, &quot;perf32_300lo_2&quot;, &quot;perf32_300lo_3&quot;, &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;, &quot;perf32_100lo_1&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf34_400lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_Assignment" elementType="Argument">
              <stringProp name="Argument.name">M4_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf32_300lo_1&quot;, &quot;perf32_300lo_2&quot;, &quot;perf32_300lo_3&quot;, &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf34_400lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5" elementType="Argument">
              <stringProp name="Argument.name">M5</stringProp>
              <stringProp name="Argument.value">&quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;,&quot;perf41_400lo_1&quot;,&quot;perf41_500lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_Assignment" elementType="Argument">
              <stringProp name="Argument.name">M5_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;,&quot;perf41_400lo_1&quot;,&quot;perf41_500lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1" elementType="Argument">
              <stringProp name="Argument.name">H1</stringProp>
              <stringProp name="Argument.value">&quot;perf35_100lo_1&quot;,&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf36_400lo_1&quot;,&quot;perf36_500lo_1&quot;,&quot;perf36_500lo_2&quot;,&quot;perf36_630lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H1_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf36_400lo_1&quot;,&quot;perf36_500lo_1&quot;,&quot;perf36_500lo_2&quot;,&quot;perf36_630lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2" elementType="Argument">
              <stringProp name="Argument.name">H2</stringProp>
              <stringProp name="Argument.value">&quot;perf36_400lo_1&quot;,&quot;perf36_500lo_1&quot;,&quot;perf36_500lo_2&quot;,&quot;perf36_630lo_1&quot;,&quot;perf37_300lo_1&quot;,&quot;perf37_300lo_2&quot;,&quot;perf37_400lo_1&quot;,&quot;perf37_400lo_2&quot;,&quot;perf37_400lo_3&quot;,&quot;perf37_630lo_1&quot;,&quot;perf37_630lo_2&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perfb1pe1&quot;,&quot;perfb1pe2&quot;,&quot;evpel1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H2_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf36_400lo_1&quot;,&quot;perf36_500lo_1&quot;,&quot;perf36_500lo_2&quot;,&quot;perf36_630lo_1&quot;,&quot;perf37_300lo_1&quot;,&quot;perf37_300lo_2&quot;,&quot;perf37_400lo_1&quot;,&quot;perf37_400lo_2&quot;,&quot;perf37_400lo_3&quot;,&quot;perf37_630lo_1&quot;,&quot;perf37_630lo_2&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perfb1pe1&quot;,&quot;perfb1pe2&quot;,&quot;evpel1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3" elementType="Argument">
              <stringProp name="Argument.name">H3</stringProp>
              <stringProp name="Argument.value">&quot;perf35_100lo_1&quot;,&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H3_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4" elementType="Argument">
              <stringProp name="Argument.name">H4</stringProp>
              <stringProp name="Argument.value">&quot;perf35_100lo_1&quot;,&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H4_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5" elementType="Argument">
              <stringProp name="Argument.name">H5</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;,&quot;perf41_400lo_1&quot;,&quot;perf41_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf34_400lo_1&quot;,&quot;perf37_300lo_1&quot;,&quot;perf37_300lo_2&quot;,&quot;perf37_400lo_1&quot;,&quot;perf37_400lo_2&quot;,&quot;perf37_400lo_3&quot;,&quot;perf37_630lo_1&quot;,&quot;perf37_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H5_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;,&quot;perf41_400lo_1&quot;,&quot;perf41_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf34_400lo_1&quot;,&quot;perf37_300lo_1&quot;,&quot;perf37_300lo_2&quot;,&quot;perf37_400lo_1&quot;,&quot;perf37_400lo_2&quot;,&quot;perf37_400lo_3&quot;,&quot;perf37_630lo_1&quot;,&quot;perf37_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6" elementType="Argument">
              <stringProp name="Argument.name">H6</stringProp>
              <stringProp name="Argument.value">&quot;perf35_100lo_1&quot;,&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H6_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9" elementType="Argument">
              <stringProp name="Argument.name">L9</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;, &quot;perf30_100lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L9_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7" elementType="Argument">
              <stringProp name="Argument.name">L7</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;, &quot;perf30_100lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L7_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8" elementType="Argument">
              <stringProp name="Argument.name">L8</stringProp>
              <stringProp name="Argument.value">&quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;, &quot;perfb2pe2&quot;, &quot;perfb2pe1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L8_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;, &quot;perfb2pe2&quot;, &quot;perfb2pe1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005" elementType="Argument">
              <stringProp name="Argument.name">T1005</stringProp>
              <stringProp name="Argument.value">&quot;perfprod3&quot;,&quot;perfprod4&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_Assignment" elementType="Argument">
              <stringProp name="Argument.name">T1005_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perfprod3&quot;,&quot;perfprod4&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10" elementType="Argument">
              <stringProp name="Argument.name">L10</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;, &quot;perf30_100lo_1&quot;, &quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;,&quot;perfprodct10&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_Assignment" elementType="Argument">
              <stringProp name="Argument.name">L10_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;evpel1&quot;, &quot;perf30_300lo_1&quot;, &quot;perf30_300lo_2&quot;,  &quot;perfb1pe1&quot;, &quot;perfb1pe2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">H5_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf41_400lo_1&quot;,&quot;perf41_500lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf34_400lo_1&quot;,&quot;perf37_400lo_1&quot;,&quot;perf37_400lo_2&quot;,&quot;perf37_400lo_3&quot;,&quot;perf37_630lo_1&quot;,&quot;perf37_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">H1_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf36_400lo_1&quot;,&quot;perf36_500lo_1&quot;,&quot;perf36_500lo_2&quot;,&quot;perf36_630lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">H2_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf36_400lo_1&quot;,&quot;perf36_500lo_1&quot;,&quot;perf36_500lo_2&quot;,&quot;perf36_630lo_1&quot;,&quot;perf37_400lo_1&quot;,&quot;perf37_400lo_2&quot;,&quot;perf37_400lo_3&quot;,&quot;perf37_630lo_1&quot;,&quot;perf37_630lo_2&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">H3_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">H4_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">M2_Assignment50LO</stringProp>
              <stringProp name="Argument.value"> &quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf34_400lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">M3_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">M4_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf32_400lo_1&quot;, &quot;perf32_400lo_2&quot;,&quot;perf32_400lo_3&quot;,&quot;perf33_400lo_1&quot;, &quot;perf33_500lo_1&quot;, &quot;perf33_500lo_2&quot;,&quot;perf34_400lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">M5_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf41_400lo_1&quot;,&quot;perf41_500lo_1&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7" elementType="Argument">
              <stringProp name="Argument.name">H7</stringProp>
              <stringProp name="Argument.value">&quot;perf35_100lo_1&quot;,&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_Assignment" elementType="Argument">
              <stringProp name="Argument.name">H7_Assignment</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_Assignment50LO" elementType="Argument">
              <stringProp name="Argument.name">H7_Assignment50LO</stringProp>
              <stringProp name="Argument.value">&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV - Bundle Product (Required for custom grading)" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="perf30_300lo_1_bundle" elementType="Argument">
              <stringProp name="Argument.name">perf30_300lo_1_bundle</stringProp>
              <stringProp name="Argument.value">perfbundle30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf30_300lo_2_bundle" elementType="Argument">
              <stringProp name="Argument.name">perf30_300lo_2_bundle</stringProp>
              <stringProp name="Argument.value">perfbundle30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perf30_100lo_1_bundle" elementType="Argument">
              <stringProp name="Argument.name">perf30_100lo_1_bundle</stringProp>
              <stringProp name="Argument.value">perfbundle30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="evpel1_bundle" elementType="Argument">
              <stringProp name="Argument.name">evpel1_bundle</stringProp>
              <stringProp name="Argument.value">evpel1_bundle</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perfb1pe1_bundle" elementType="Argument">
              <stringProp name="Argument.name">perfb1pe1_bundle</stringProp>
              <stringProp name="Argument.value">perf_bundle_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perfb1pe2_bundle" elementType="Argument">
              <stringProp name="Argument.name">perfb1pe2_bundle</stringProp>
              <stringProp name="Argument.value">perf_bundle_1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perfb2pe2_bundle" elementType="Argument">
              <stringProp name="Argument.name">perfb2pe2_bundle</stringProp>
              <stringProp name="Argument.value">perf_bundle_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="perfb2pe1_bundle" elementType="Argument">
              <stringProp name="Argument.name">perfb2pe1_bundle</stringProp>
              <stringProp name="Argument.value">perf_bundle_2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV - Attempts" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="L1_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L1_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L1_Scorable</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L1_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L1_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L2_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L2_Scorable</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L2_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L2_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L3_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L3_Scorable</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L3_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L3_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L4_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L4_Scorable</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L4_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L4_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L5_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L5_Scorable</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L5_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L5_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L6_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L6_Scorable</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L6_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L6_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M1_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_Scorable" elementType="Argument">
              <stringProp name="Argument.name">M1_Scorable</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M1_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_Pskill" elementType="Argument">
              <stringProp name="Argument.name">M1_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M2_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_Scorable" elementType="Argument">
              <stringProp name="Argument.name">M2_Scorable</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M2_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_Pskill" elementType="Argument">
              <stringProp name="Argument.name">M2_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M3_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_Scorable" elementType="Argument">
              <stringProp name="Argument.name">M3_Scorable</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M3_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_Pskill" elementType="Argument">
              <stringProp name="Argument.name">M3_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M4_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_Scorable" elementType="Argument">
              <stringProp name="Argument.name">M4_Scorable</stringProp>
              <stringProp name="Argument.value">11</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M4_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_Pskill" elementType="Argument">
              <stringProp name="Argument.name">M4_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H1_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H1_Scorable</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H1_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H1_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H2_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H2_Scorable</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H2_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H2_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H3_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H3_Scorable</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H3_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H3_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H4_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H4_Scorable</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H4_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H4_Pskill</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H6_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H6_Scorable</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H6_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H6_Pskill</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H5_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H5_Scorable</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H5_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H5_Pskill</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M5_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_Scorable" elementType="Argument">
              <stringProp name="Argument.name">M5_Scorable</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">M5_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_Pskill" elementType="Argument">
              <stringProp name="Argument.name">M5_Pskill</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L7_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L7_Scorable</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L7_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L7_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L8_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L8_Scorable</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L8_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L8_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L9_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L9_Scorable</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L9_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L9_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">T1005_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_Pskill" elementType="Argument">
              <stringProp name="Argument.name">T1005_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">T1005_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_Scorable" elementType="Argument">
              <stringProp name="Argument.name">T1005_Scorable</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L10_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_Scorable" elementType="Argument">
              <stringProp name="Argument.name">L10_Scorable</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">L10_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_Pskill" elementType="Argument">
              <stringProp name="Argument.name">L10_Pskill</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_Scorable_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H7_Scorable_PE_Count</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_Scorable" elementType="Argument">
              <stringProp name="Argument.name">H7_Scorable</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_Pskill_PE_Count" elementType="Argument">
              <stringProp name="Argument.name">H7_Pskill_PE_Count</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_Pskill" elementType="Argument">
              <stringProp name="Argument.name">H7_Pskill</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV - Assignment, Lock Rules and Custom Grading-OLD" enabled="false">
          <collectionProp name="Arguments.arguments">
            <elementProp name="L1_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L1_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L1_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L1_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L1_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L1_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L1_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L1_20LOsCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L1_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_50LOsCoun" elementType="Argument">
              <stringProp name="Argument.name">L1_50LOsCoun</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L2_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L2_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L2_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L2_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L2_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L2_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L2_20LOsCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L2_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L2_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L3_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L3_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L3_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L3_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L3_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L3_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L3_20LOsCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L3_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L3_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L4_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L4_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L4_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L4_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L4_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L4_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L4_20LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L4_30LOsCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L4_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L4_50LOsCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L5_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L5_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L5_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L5_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L5_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L5_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L5_20LOsCount</stringProp>
              <stringProp name="Argument.value">18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L5_30LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L5_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L5_50LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L6_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L6_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L6_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L6_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L6_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L6_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L6_20LOsCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L6_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L6_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L6_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">M1_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M1_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M1_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M1_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M1_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">M1_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M1_20LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M1_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M1_50LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">M2_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M2_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M2_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M2_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M2_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">M2_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M2_20LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M2_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M2_50LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">M3_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M3_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M3_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M3_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M3_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">M3_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M3_20LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M3_30LOsCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M3_50LOsCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">M4_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">80</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M4_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">60</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M4_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M4_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M4_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">M4_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M4_20LOsCount</stringProp>
              <stringProp name="Argument.value">16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M4_30LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M4_50LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">M5_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">40</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M5_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M5_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M5_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M5_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">M5_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M5_20LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M5_30LOsCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">M5_50LOsCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">H1_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H1_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H1_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H1_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H1_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">H1_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H1_20LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H1_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H1_50LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">H2_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H2_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H2_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H2_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H2_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">H2_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H2_20LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H2_30LOsCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H2_50LOsCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">H3_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H3_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H3_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H3_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H3_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">H3_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H3_20LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H3_30LOsCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H3_50LOsCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">H4_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H4_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H4_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H4_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H4_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">H4_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H4_20LOsCount</stringProp>
              <stringProp name="Argument.value">16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H4_30LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H4_50LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">H5_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">125</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H5_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">120</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H5_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H5_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H5_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">H5_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H5_20LOsCount</stringProp>
              <stringProp name="Argument.value">16</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H5_30LOsCount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H5_50LOsCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">H6_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">125</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H6_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">120</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H6_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H6_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H6_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">H6_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H6_20LOsCount</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H6_30LOsCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H6_50LOsCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_100LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H6_100LOsCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_300LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H6_300LOsCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H6_500LOsCount" elementType="Argument">
              <stringProp name="Argument.name">H6_500LOsCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L7_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L7_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L7_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L7_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L7_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L8_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L8_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L8_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L8_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L8_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L9_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L9_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L9_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L9_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L9_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L7_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L7_20LOsCount</stringProp>
              <stringProp name="Argument.value">18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L7_30LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L7_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L8_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L8_20LOsCount</stringProp>
              <stringProp name="Argument.value">28</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L8_30LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L8_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L9_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">30</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L9_20LOsCount</stringProp>
              <stringProp name="Argument.value">28</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L9_30LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L9_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_noOfLockRulesInClass" elementType="Argument">
              <stringProp name="Argument.name">L10_noOfLockRulesInClass</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L10_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">25</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L10_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L10_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L10_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_noOfAssignmentsInClass" elementType="Argument">
              <stringProp name="Argument.name">L10_noOfAssignmentsInClass</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_20LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L10_20LOsCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_30LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L10_30LOsCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_50LOsCount" elementType="Argument">
              <stringProp name="Argument.name">L10_50LOsCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV - Assignment, Lock Rules and Custom Grading" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="L1_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L1_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L1_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L1_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L1_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L1_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L2_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L2_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L2_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L2_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L2_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L3_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L3_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L3_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L3_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L3_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L7_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L7_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L7_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L7_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L7_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L8_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L8_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L8_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L8_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L8_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L9_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L9_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L9_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L9_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L9_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">L10_rulesPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L10_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L10_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">L10_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">L10_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">M1_rulesPECount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M1_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M1_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M1_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M1_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">M2_rulesPECount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M2_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M2_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M2_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M2_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">M3_rulesPECount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M3_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M3_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M3_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M3_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">M4_rulesPECount</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M4_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M4_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M4_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M4_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">M5_rulesPECount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M5_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M5_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">M5_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">M5_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">H1_rulesPECount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H1_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H1_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H1_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H1_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">H2_rulesPECount</stringProp>
              <stringProp name="Argument.value">17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H2_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H2_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H2_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H2_customGradingCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">H3_rulesPECount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H3_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H3_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H3_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H3_customGradingCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">H4_rulesPECount</stringProp>
              <stringProp name="Argument.value">9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H4_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H4_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H4_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H4_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">H5_rulesPECount</stringProp>
              <stringProp name="Argument.value">14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H5_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H5_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H5_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H5_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_rulesPECount" elementType="Argument">
              <stringProp name="Argument.name">H7_rulesPECount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_50LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H7_50LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_100LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H7_100LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_150LOsLockRuleCount" elementType="Argument">
              <stringProp name="Argument.name">H7_150LOsLockRuleCount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_customGradingCount" elementType="Argument">
              <stringProp name="Argument.name">H7_customGradingCount</stringProp>
              <stringProp name="Argument.value">15</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV --Create Assignments for custom link">
          <collectionProp name="Arguments.arguments">
            <elementProp name="L1_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L1_asgmtPECount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L1_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L1_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L1_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L1_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L1_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L1_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L1_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L1_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L2_asgmtPECount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L2_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L2_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L2_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L2_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L2_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L2_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L2_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L3_asgmtPECount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L3_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L3_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L3_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L3_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L3_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L3_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L3_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L7_asgmtPECount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L7_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L7_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L7_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L7_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L7_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L7_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L7_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L8_asgmtPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L8_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L8_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L8_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L8_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L8_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L8_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L8_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L9_asgmtPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L9_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L9_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L9_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L9_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L9_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">L9_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">L9_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M1_asgmtPECount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M1_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M1_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M1_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M1_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M1_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M1_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M1_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M2_asgmtPECount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M2_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M2_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M2_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M2_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M2_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M2_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M2_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M3_asgmtPECount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M3_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M3_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M3_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M3_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M3_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M3_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M3_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M4_asgmtPECount</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M4_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M4_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M4_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M4_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M4_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M4_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M4_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M5_asgmtPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M5_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M5_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M5_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M5_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M5_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">M5_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">M5_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H1_asgmtPECount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H1_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H1_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H1_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H1_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H1_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H1_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H1_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H2_asgmtPECount</stringProp>
              <stringProp name="Argument.value">17</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H2_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H2_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H2_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H2_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H2_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H2_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H2_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">6</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H3_asgmtPECount</stringProp>
              <stringProp name="Argument.value">8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H3_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H3_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H3_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H3_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H3_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H3_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H3_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H4_asgmtPECount</stringProp>
              <stringProp name="Argument.value">9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H4_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H4_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H4_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H4_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H4_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H4_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H4_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H5_asgmtPECount</stringProp>
              <stringProp name="Argument.value">14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H5_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H5_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H5_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H5_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H5_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H5_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H5_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H7_asgmtPECount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H7_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H7_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">24</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H7_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H7_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">18</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H7_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">60</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">H7_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">H7_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_asgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">T1005_asgmtPECount</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_5LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">T1005_5LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_10LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">T1005_10LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_15LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">T1005_15LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_20LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">T1005_20LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_25LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">T1005_25LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_50LOsCountAsgmt" elementType="Argument">
              <stringProp name="Argument.name">T1005_50LOsCountAsgmt</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="T1005_50LOasgmtPECount" elementType="Argument">
              <stringProp name="Argument.name">T1005_50LOasgmtPECount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="UDV -- Assignments deletion">
          <collectionProp name="Arguments.arguments">
            <elementProp name="L1_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L1_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L2_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L2_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L3_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L3_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">7</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L7_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L7_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">20</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L8_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L8_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">37</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L9_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L9_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">36</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="L10_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">L10_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">2</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M1_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">M1_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M2_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">M2_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">14</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M3_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">M3_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">4</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M4_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">M4_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="M5_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">M5_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">9</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H1_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">H1_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">69</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H2_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">H2_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">49</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H3_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">H3_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">61</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H4_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">H4_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">86</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H5_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">H5_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">48</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="H7_asgmtDeleteCount" elementType="Argument">
              <stringProp name="Argument.name">H7_asgmtDeleteCount</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Core Data Template_v2" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">template_new_v2.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category,classType,noOfStudentsInClass</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd_AttemptTool" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd_AttemptTool</stringProp>
                <stringProp name="Argument.value">attempt_tool_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputFile" elementType="Argument">
                <stringProp name="Argument.name">outputFile</stringProp>
                <stringProp name="Argument.value">student_${__time()}_cleaned.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="teacher_class_name" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;category&quot;);

extuserid = &quot;tch&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;extuserid&quot;, extuserid);

classname = &quot;class&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);

vars.put(&quot;teachername&quot;, extuserid);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class creation " enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;normal&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;context&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class - CONTEXT" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class_context.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [10-15 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class Creation" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">create_new_instructor_led_LTIclass.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for creating class [5 min - 5 min 5ec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">600000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
              <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">Get_details_for_a_specific_lti_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class" enabled="true">
            <stringProp name="IncludeController.includepath">associate_multi_products_with_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class [420-450]" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">720000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - L10 category" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L10&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//String[] stringArray = {&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);

//String randomValue = perfprodct10;

vars.put(&quot;productcode&quot;, &quot;perfprodct10&quot;);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = { &quot;1631184898880/1631184933374&quot;};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
//prefix4 = vars.get(&quot;assignmentCount&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + &quot;_&quot; + &quot;1LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
              <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_1LOs .jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="true"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
                <stringProp name="IncludeController.includepath">join_Spaces_with_product_code_and_class_code_MultiProduct.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment - Lti class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="student_name" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std_LTI_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Enroll user in LTI Class" enabled="true">
                <stringProp name="IncludeController.includepath">Enroll_a_user_in_lti_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for enrolling student " enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">50</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle_student_With_Product_lticlas" enabled="false">
                <stringProp name="IncludeController.includepath">Entitle_student_With_Product_lticlass.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}


prefix1 = multiProducts.length;
vars.put(&quot;productcount&quot;,&quot;prefix1&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">product_code</stringProp>
                <stringProp name="ForeachController.returnVal">multiProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">false</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">20</stringProp>
              </ForeachController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_new.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Core Data Template_v2_1021" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">template_new_v2_1021.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category,classType,noOfStudentsInClass</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">1021_scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">1021_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd_AttemptTool" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd_AttemptTool</stringProp>
                <stringProp name="Argument.value">attempt_tool_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputFile" elementType="Argument">
                <stringProp name="Argument.name">outputFile</stringProp>
                <stringProp name="Argument.value">1021_student_${__time()}_cleaned.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="teacher_class_name" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;category&quot;);

extuserid = &quot;tch&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;extuserid&quot;, extuserid);

classname = &quot;class&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);

vars.put(&quot;teachername&quot;, extuserid);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class creation " enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;normal&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;context&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class - CONTEXT" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class_context.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [10-15 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class Creation" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">create_new_instructor_led_LTIclass.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for creating class [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
              <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">Get_details_for_a_specific_lti_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class" enabled="true">
            <stringProp name="IncludeController.includepath">associate_multi_products_with_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class [420-450]" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">720000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - L10 category" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L10&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//String[] stringArray = {&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);

//String randomValue = perfprodct10;

vars.put(&quot;productcode&quot;, &quot;perfprodct10&quot;);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = { &quot;1631184898880/1631184933374&quot;};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
//prefix4 = vars.get(&quot;assignmentCount&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + &quot;_&quot; + &quot;1LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
              <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_1LOs .jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="true"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-1021" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
                <stringProp name="IncludeController.includepath">join_Spaces_with_product_code_and_class_code_MultiProduct.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-L1-L9" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L1&quot; || &quot;${category}&quot; == &quot;L2&quot; || &quot;${category}&quot; == &quot;L3&quot; || &quot;${category}&quot; == &quot;L4&quot; || &quot;${category}&quot; == &quot;L5&quot; || &quot;${category}&quot; == &quot;L6&quot; || &quot;${category}&quot; == &quot;L7&quot; || &quot;${category}&quot; == &quot;L8&quot; || &quot;${category}&quot; == &quot;L9&quot;;</stringProp>
                <boolProp name="IfController.useExpression">false</boolProp>
              </IfController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_L1_L9.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-M1-M5" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;M1&quot; || &quot;${category}&quot; == &quot;M2&quot; || &quot;${category}&quot; == &quot;M3&quot; || &quot;${category}&quot; == &quot;M4&quot; || &quot;${category}&quot; == &quot;M5&quot;;</stringProp>
                <boolProp name="IfController.useExpression">false</boolProp>
              </IfController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_M1_M5.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller-H1-H3" enabled="true">
                <boolProp name="IfController.evaluateAll">false</boolProp>
                <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H1&quot; || &quot;${category}&quot; == &quot;H2&quot; || &quot;${category}&quot; == &quot;H3&quot;;</stringProp>
                <boolProp name="IfController.useExpression">false</boolProp>
              </IfController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_H1_H3.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment - Lti class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="student_name" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std_LTI_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Enroll user in LTI Class" enabled="true">
                <stringProp name="IncludeController.includepath">Enroll_a_user_in_lti_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for enrolling student " enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">50</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle_student_With_Product_lticlas" enabled="false">
                <stringProp name="IncludeController.includepath">Entitle_student_With_Product_lticlass.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}


prefix1 = multiProducts.length;
vars.put(&quot;productcount&quot;,&quot;prefix1&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">product_code</stringProp>
                <stringProp name="ForeachController.returnVal">multiProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">false</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">20</stringProp>
              </ForeachController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_new.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Core Data Template_v2_1041" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">template_new_v2_1041.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category,classType,noOfStudentsInClass</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">1041_scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">1041_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd_AttemptTool" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd_AttemptTool</stringProp>
                <stringProp name="Argument.value">attempt_tool_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputFile" elementType="Argument">
                <stringProp name="Argument.name">outputFile</stringProp>
                <stringProp name="Argument.value">1041_student_${__time()}_cleaned.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="teacher_class_name" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;category&quot;);

extuserid = &quot;tch&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;extuserid&quot;, extuserid);

classname = &quot;class&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);

vars.put(&quot;teachername&quot;, extuserid);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class creation " enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;normal&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;context&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class - CONTEXT" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class_context.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [10-15 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class Creation" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">create_new_instructor_led_LTIclass.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for creating class [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
              <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">Get_details_for_a_specific_lti_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class" enabled="true">
            <stringProp name="IncludeController.includepath">associate_multi_products_with_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class-1041" enabled="true">
            <stringProp name="IncludeController.includepath">Associate multi products with a class-1041.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class [420-450]" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">720000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - L10 category" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L10&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//String[] stringArray = {&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);

//String randomValue = perfprodct10;

vars.put(&quot;productcode&quot;, &quot;perfprodct10&quot;);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = { &quot;1631184898880/1631184933374&quot;};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
//prefix4 = vars.get(&quot;assignmentCount&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + &quot;_&quot; + &quot;1LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
              <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_1LOs .jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="false"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
                <stringProp name="IncludeController.includepath">join_Spaces_with_product_code_and_class_code_MultiProduct.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment - Lti class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="student_name" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std_LTI_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Enroll user in LTI Class" enabled="true">
                <stringProp name="IncludeController.includepath">Enroll_a_user_in_lti_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for enrolling student " enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">50</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle_student_With_Product_lticlas" enabled="false">
                <stringProp name="IncludeController.includepath">Entitle_student_With_Product_lticlass.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}


prefix1 = multiProducts.length;
vars.put(&quot;productcount&quot;,&quot;prefix1&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">product_code</stringProp>
                <stringProp name="ForeachController.returnVal">multiProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">false</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">20</stringProp>
              </ForeachController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_new.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Core Data Template_v2_1042" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">template_new_v2_1041.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category,classType,noOfStudentsInClass</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">1042_scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">1042_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd_AttemptTool" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd_AttemptTool</stringProp>
                <stringProp name="Argument.value">attempt_tool_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputFile" elementType="Argument">
                <stringProp name="Argument.name">outputFile</stringProp>
                <stringProp name="Argument.value">1042_student_${__time()}_cleaned.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="teacher_class_name" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;category&quot;);

extuserid = &quot;tch&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;extuserid&quot;, extuserid);

classname = &quot;class&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);

vars.put(&quot;teachername&quot;, extuserid);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class creation " enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;normal&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;context&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class - CONTEXT" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class_context.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [10-15 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class Creation" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">create_new_instructor_led_LTIclass.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for creating class [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
              <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">Get_details_for_a_specific_lti_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class" enabled="true">
            <stringProp name="IncludeController.includepath">associate_multi_products_with_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class-1041" enabled="true">
            <stringProp name="IncludeController.includepath">Associate multi products with a class-1041.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class [420-450]" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">720000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - L10 category" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L10&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//String[] stringArray = {&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);

//String randomValue = perfprodct10;

vars.put(&quot;productcode&quot;, &quot;perfprodct10&quot;);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = { &quot;1631184898880/1631184933374&quot;};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
//prefix4 = vars.get(&quot;assignmentCount&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + &quot;_&quot; + &quot;1LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
              <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_1LOs .jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="true"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
                <stringProp name="IncludeController.includepath">join_Spaces_with_product_code_and_class_code_MultiProduct.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment - Lti class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="student_name" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std_LTI_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Enroll user in LTI Class" enabled="true">
                <stringProp name="IncludeController.includepath">Enroll_a_user_in_lti_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for enrolling student " enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">50</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle_student_With_Product_lticlas" enabled="false">
                <stringProp name="IncludeController.includepath">Entitle_student_With_Product_lticlass.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}


prefix1 = multiProducts.length;
vars.put(&quot;productcount&quot;,&quot;prefix1&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">product_code</stringProp>
                <stringProp name="ForeachController.returnVal">multiProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">false</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">20</stringProp>
              </ForeachController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_new.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Core Data Template_v2_1002" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">template_new_v2_1002.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category,classType,noOfStudentsInClass</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">1002_scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">1002_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd_AttemptTool" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd_AttemptTool</stringProp>
                <stringProp name="Argument.value">attempt_tool_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputFile" elementType="Argument">
                <stringProp name="Argument.name">outputFile</stringProp>
                <stringProp name="Argument.value">1002_student_${__time()}_cleaned.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="teacher_class_name" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;category&quot;);

extuserid = &quot;tch&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;extuserid&quot;, extuserid);

classname = &quot;class&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);

vars.put(&quot;teachername&quot;, extuserid);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class creation " enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;normal&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;context&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class - CONTEXT" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class_context.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [10-15 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class Creation" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">create_new_instructor_led_LTIclass.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for creating class [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
              <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">Get_details_for_a_specific_lti_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class" enabled="true">
            <stringProp name="IncludeController.includepath">associate_multi_products_with_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class [420-450]" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">720000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - L10 category" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L10&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//String[] stringArray = {&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);

//String randomValue = perfprodct10;

vars.put(&quot;productcode&quot;, &quot;perfprodct10&quot;);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = { &quot;1631184898880/1631184933374&quot;};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
//prefix4 = vars.get(&quot;assignmentCount&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + &quot;_&quot; + &quot;1LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
              <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_1LOs .jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="false"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
                <stringProp name="IncludeController.includepath">join_Spaces_with_product_code_and_class_code_MultiProduct.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment - Lti class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="student_name" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std_LTI_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Enroll user in LTI Class" enabled="true">
                <stringProp name="IncludeController.includepath">Enroll_a_user_in_lti_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for enrolling student " enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">50</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle_student_With_Product_lticlas" enabled="false">
                <stringProp name="IncludeController.includepath">Entitle_student_With_Product_lticlass.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}


prefix1 = multiProducts.length;
vars.put(&quot;productcount&quot;,&quot;prefix1&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">product_code</stringProp>
                <stringProp name="ForeachController.returnVal">multiProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">false</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">20</stringProp>
              </ForeachController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_new.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Core Data Template_v2_1005" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">template_new_v2_1005.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">category,classType,noOfStudentsInClass</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">1005_scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">1005_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd_AttemptTool" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd_AttemptTool</stringProp>
                <stringProp name="Argument.value">attempt_tool_student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputFile" elementType="Argument">
                <stringProp name="Argument.name">outputFile</stringProp>
                <stringProp name="Argument.value">1005_student_${__time()}_cleaned.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="teacher_class_name" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;category&quot;);

extuserid = &quot;tch&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;extuserid&quot;, extuserid);

classname = &quot;class&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);

vars.put(&quot;teachername&quot;, extuserid);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class creation " enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;normal&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
              <stringProp name="IfController.condition">&quot;${classType}&quot; == &quot;context&quot;;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">false</boolProp>
            </IfController>
            <hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class - CONTEXT" enabled="true">
                <stringProp name="IncludeController.includepath">create_new_instructor_led_class_context.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space [10-15 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Class Creation" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">create_new_instructor_led_LTIclass.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for creating class [60-65 sec]" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
              <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific LTI class" enabled="true">
              <stringProp name="IncludeController.includepath">Get_details_for_a_specific_lti_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate multi products with a class" enabled="true">
            <stringProp name="IncludeController.includepath">associate_multi_products_with_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class [420-450]" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">720000</stringProp>
              <stringProp name="RandomTimer.range">30000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - L10 category" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;L10&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">//String[] stringArray = {&quot;perf35_400lo_1&quot;,&quot;perf35_500lo_1&quot;,&quot;perf38_300lo_1&quot;,&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);

//String randomValue = perfprodct10;

vars.put(&quot;productcode&quot;, &quot;perfprodct10&quot;);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = { &quot;1631184898880/1631184933374&quot;};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
//prefix4 = vars.get(&quot;assignmentCount&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + &quot;_&quot; + &quot;1LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);</stringProp>
            </BeanShellPreProcessor>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
              <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_1LOs .jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="false">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="false"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H5&quot; &amp;&amp; &quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std&quot; + &quot;_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedJson = &quot;[&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	mergedJson += &quot;{\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;ext_product_meta\&quot;: {\&quot;startdate\&quot;:&quot; + &quot;${startDate}&quot; + &quot;,\&quot;enddate\&quot;:&quot; + &quot;${endDate}&quot; + &quot;}},&quot;;
}
mergedJson = mergedJson.substring(0, mergedJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;provisionProductsArray&quot;, mergedJson);</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
                <stringProp name="IncludeController.includepath">join_Spaces_with_product_code_and_class_code_MultiProduct.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Student enrollment - Lti class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H5&quot; || &quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x students and join using classcode of current teacher" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${noOfStudentsInClass}</stringProp>
            </LoopController>
            <hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="student_name" enabled="true">
                <stringProp name="BeanShellSampler.query">import java.util.Date;

Date date = new Date();
prefix2 = date.getTime();
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;classcode&quot;);

studentextuserid = &quot;std_LTI_&quot; + prefix4 + &quot;_&quot; + prefix2 + &quot;_&quot; + prefix3;

vars.put(&quot;studentextuserid&quot;, studentextuserid);
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Enroll user in LTI Class" enabled="true">
                <stringProp name="IncludeController.includepath">Enroll_a_user_in_lti_class.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for enrolling student " enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">500</stringProp>
                  <stringProp name="RandomTimer.range">50</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle_student_With_Product_lticlas" enabled="false">
                <stringProp name="IncludeController.includepath">Entitle_student_With_Product_lticlass.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="false">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script">String[] multiProducts = {${__evalVar(${category})}};

for (int i = 0; i &lt; multiProducts.length; i++) {
    vars.put(&quot;product_code&quot; + (i + 1), multiProducts[i]);
}


prefix1 = multiProducts.length;
vars.put(&quot;productcount&quot;,&quot;prefix1&quot;);</stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
                <stringProp name="ForeachController.inputVal">product_code</stringProp>
                <stringProp name="ForeachController.returnVal">multiProduct</stringProp>
                <boolProp name="ForeachController.useSeparator">false</boolProp>
                <stringProp name="ForeachController.startIndex">0</stringProp>
                <stringProp name="ForeachController.endIndex">20</stringProp>
              </ForeachController>
              <hashTree>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Entitle User with Product" enabled="true">
                  <stringProp name="IncludeController.includepath">Entitle_User_With_Product_new.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
                <stringProp name="IncludeController.includepath">get_an_access_token_for_an_external_user_student_attempt_tool.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for writing data into csv file" enabled="true">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">1000</stringProp>
                  <stringProp name="RandomTimer.range">1000</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;studentextuserid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler-attempts tool" enabled="true">
                <stringProp name="BeanShellSampler.query">timestamp = vars.get(&quot;date&quot;);

FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameStd_AttemptTool&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
              </BeanShellSampler>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
              <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilenameTch&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;assignedPathList&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();</stringProp>
            </BeanShellSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Create Class Assignments" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">createAssignment.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">extuserid,classtitle,classcode,category</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
            <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
            <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
            <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific class" enabled="true">
            <stringProp name="IncludeController.includepath">Get_details_for_a_specific_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
              <stringProp name="RandomTimer.range">${minWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for all class except H7" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; != &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x assignments_for all PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 5LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_5LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));

// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 5; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 5;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;5LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_5LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_10LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));
// Subtract 1 from the loop counter variable
//int start_index = loopCounter - 1;

// Multiply the result by 20
//start_index = loopCounter * 10;

for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 15LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_15LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 15; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 15;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;15LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_15LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_20LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_25LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOasgmtPECount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment50LO)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsCountAsgmt)}</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);
prefix6 = vars.get(&quot;classcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot; +  prefix6 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller - Assignments for H7 class" enabled="true">
            <stringProp name="IfController.condition">&quot;${category}&quot; == &quot;H7&quot;;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">false</boolProp>
          </IfController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 10 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_300lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 10LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">24</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">24</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 10; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 10;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;10LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_10LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 20 Lo assignments_for 1 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">1</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">1</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_400lo_1&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 20LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">18</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">18</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 20; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 20;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;20LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_20LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 25 Lo assignments_for 3 PES" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">3</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">3</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf35_500lo_1&quot;,&quot;perfprod3&quot;,&quot;perfprod4&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));
</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 25LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">20</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">20</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {
&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;
};


int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 25; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 25;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;25LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);

</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_25LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create 50 LO assignments" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">4</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">4</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">PECounter_50Lo</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for assignment creation" enabled="true">
                <stringProp name="BeanShellSampler.query">String[] stringArray = {&quot;perf38_630lo_1&quot;,&quot;perf38_630lo_2&quot;,&quot;perf40_630lo_1&quot;,&quot;perf40_630lo_2&quot;};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter_50Lo = Integer.parseInt(vars.get(&quot;PECounter_50Lo&quot;));
PECounter_50Lo = PECounter_50Lo - 1;
String productValue = stringArray[PECounter_50Lo];

vars.put(&quot;productcode&quot;, productValue);

int start_index = 0;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
              </BeanShellSampler>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsCount asgmt" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">12</stringProp>
              </LoopController>
              <hashTree>
                <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                  <stringProp name="CounterConfig.start">1</stringProp>
                  <stringProp name="CounterConfig.end">12</stringProp>
                  <stringProp name="CounterConfig.incr">1</stringProp>
                  <stringProp name="CounterConfig.name">asnmtCounter</stringProp>
                  <stringProp name="CounterConfig.format"></stringProp>
                  <boolProp name="CounterConfig.per_user">true</boolProp>
                  <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
                </CounterConfig>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
                  <stringProp name="BeanShellSampler.query">String[] itemCodes = {&quot;1676462274557/1676462274558/1676462274559&quot;,&quot;1676462274659/1676462274660/1676462274691&quot;,&quot;1676462274557/1676462274558/1676462274625&quot;,&quot;1676462274659/1676462274660/1676462274706&quot;,&quot;1676462274557/1676462274558/1676462274644&quot;,&quot;1544521486954/1544521507623/1544521675219&quot;,&quot;1544591089661/1544591602655/1544591685696&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1676462274659/1676462274660/1676462274695&quot;,&quot;1544526345845/1544526779004/1544526923433&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1676462274659/1676462274660/1676462274754&quot;,&quot;1544521486954/1544521700309/1544521737765&quot;,&quot;1676462274557/1676462274558/1676462274772&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1676462274557/1676462274558/1676462274613&quot;,&quot;1676462274557/1676462274558/1676462274764&quot;,&quot;1676462274659/1676462274660/1676462274669&quot;,&quot;1676462274557/1676462274558/1676462274812&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1676462274659/1676462274660/1676462274841&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1676462274659/1676462274660/1676462274748&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1676462274659/1676462274660/1676462274740&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1676462274659/1676462274660/1676462274683&quot;,&quot;1676462274557/1676462274558/1676462274788&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1544522366063/1544522377911/1544522440008&quot;,&quot;1544525043137/1544525280855/1544525303429&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1676462274557/1676462274558/1676462274601&quot;,&quot;1676462274659/1676462274660/1676462274708&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1676462274659/1676462274660/1676462274749&quot;,&quot;1676462274659/1676462274660/1676462274685&quot;,&quot;1676462274659/1676462274660/1676462274664&quot;,&quot;1676462274659/1676462274660/1676462274738&quot;,&quot;1676462274659/1676462274660/1676462274721&quot;,&quot;1676462274557/1676462274558/1676462274784&quot;,&quot;1676462274557/1676462274558/1676462274564&quot;,&quot;1676462274557/1676462274558/1676462274796&quot;,&quot;1676462274557/1676462274558/1676462274813&quot;,&quot;1676462274557/1676462274558/1676462274801&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1676462274557/1676462274558/1676462274828&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1676462274659/1676462274660/1676462274758&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1676462274659/1676462274660/1676462274681&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544592286221/1544592623523/1544592695775&quot;,&quot;1544524003551/1544524304922/1544524359136&quot;,&quot;1676462274557/1676462274558/1676462274827&quot;,&quot;1544591089661/1547439767627/1544591734989&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544525043137/1544525159358/1544525192972&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544524003551/1544524304922/1544524341184&quot;,&quot;1676462274557/1676462274558/1676462274785&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1676462274557/1676462274558/1676462274643&quot;,&quot;1676462274557/1676462274558/1676462274621&quot;,&quot;1676462274659/1676462274660/1676462274700&quot;,&quot;1544525043137/1544525159358/1544525239184&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544524003551/1544524012478/1544524084276&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1676462274659/1676462274660/1676462274668&quot;,&quot;1676462274557/1676462274558/1676462274810&quot;,&quot;1676462274557/1676462274558/1676462274657&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544521486954/1544521507623/1544521662149&quot;,&quot;1676462274659/1676462274660/1676462274702&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1676462274659/1676462274660/1676462274756&quot;,&quot;1676462274557/1676462274558/1676462274802&quot;,&quot;1544526345845/1547439716609/1544528426617&quot;,&quot;1544522366063/1544522377911/1544522409366&quot;,&quot;1676462274557/1676462274558/1676462274612&quot;,&quot;1544592286221/1547439887065/1544592727327&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1676462274557/1676462274558/1676462274619&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;,&quot;1676462274557/1676462274558/1676462274590&quot;,&quot;1544591089661/1544591412698/1544591582869&quot;,&quot;1676462274557/1676462274558/1676462274626&quot;,&quot;1544526345845/1547439716609/1544528439584&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1676462274659/1676462274660/1676462274692&quot;,&quot;1676462274557/1676462274558/1676462274634&quot;,&quot;1544591751639/1544592145731/1544592236677&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1676462274557/1676462274558/1676462274589&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1676462274557/1676462274558/1676462274572&quot;,&quot;1676462274557/1676462274558/1676462274630&quot;,&quot;1676462274557/1676462274558/1676462274835&quot;,&quot;1676462274557/1676462274558/1676462274807&quot;,&quot;1676462274659/1676462274660/1676462274670&quot;,&quot;1676462274659/1676462274660/1676462274752&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1676462274557/1676462274558/1676462274765&quot;,&quot;1676462274659/1676462274660/1676462274709&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544591751639/1544591937229/1544591964946&quot;,&quot;1676462274557/1676462274558/1676462274782&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1676462274557/1676462274558/1676462274627&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1676462274557/1676462274558/1676462274649&quot;,&quot;1676462274659/1676462274660/1676462274697&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1676462274557/1676462274558/1676462274798&quot;,&quot;1544525043137/1544525159358/1544525175677&quot;,&quot;1676462274557/1676462274558/1676462274586&quot;,&quot;1676462274659/1676462274660/1676462274663&quot;,&quot;1676462274557/1676462274558/1676462274615&quot;,&quot;1676462274659/1676462274660/1676462274728&quot;,&quot;1676462274557/1676462274558/1676462274806&quot;,&quot;1676462274557/1676462274558/1676462274770&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1676462274659/1676462274660/1676462274747&quot;,&quot;1676462274557/1676462274558/1676462274809&quot;,&quot;1676462274659/1676462274660/1676462274674&quot;,&quot;1544522366063/1544522528807/1544522551328&quot;,&quot;1544522366063/1544522377911/1544522454993&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1676462274659/1676462274660/1676462274723&quot;,&quot;1676462274557/1676462274558/1676462274603&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1676462274557/1676462274558/1676462274804&quot;,&quot;1676462274659/1676462274660/1676462274895&quot;,&quot;1676462274659/1676462274660/1676462274688&quot;,&quot;1676462274659/1676462274660/1676462274734&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1676462274659/1676462274660/1676462274922&quot;,&quot;1676462274557/1676462274558/1676462274618&quot;,&quot;1676462274557/1676462274558/1676462274793&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1676462274557/1676462274558/1676462274833&quot;,&quot;1676462274659/1676462274660/1676462274735&quot;,&quot;1676462274659/1676462274660/1676462274899&quot;,&quot;1676462274659/1676462274660/1676462274713&quot;,&quot;1676462274659/1676462274660/1676462274941&quot;,&quot;1544522366063/1544522377911/1544522402777&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1676462274557/1676462274558/1676462274581&quot;,&quot;1676462274557/1676462274558/1676462274582&quot;,&quot;1676462274659/1676462274660/1676462274698&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1676462274659/1676462274660/1676462274759&quot;,&quot;1676462274659/1676462274660/1676462274858&quot;,&quot;1676462274557/1676462274558/1676462274794&quot;,&quot;1676462274557/1676462274558/1676462274579&quot;,&quot;1676462274659/1676462274660/1676462274911&quot;,&quot;1676462274659/1676462274660/1676462274686&quot;,&quot;1544592857014/1547439926624/1544593813987&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1676462274659/1676462274660/1676462274729&quot;,&quot;1676462274659/1676462274660/1676462274737&quot;,&quot;1676462274557/1676462274558/1676462274585&quot;,&quot;1544525043137/1544525058289/1544525137957&quot;,&quot;1676462274659/1676462274660/1676462274673&quot;,&quot;1676462274659/1676462274660/1676462274849&quot;,&quot;1676462274557/1676462274558/1676462274604&quot;,&quot;1544592286221/1544592474205/1544592511422&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1676462274557/1676462274558/1676462274600&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544592857014/1547439926624/1544593796167&quot;,&quot;1544524003551/1544524012478/1544524057691&quot;,&quot;1676462274659/1676462274660/1676462274936&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544522366063/1544522528807/1544522579684&quot;,&quot;1676462274557/1676462274558/1676462274620&quot;,&quot;1676462274557/1676462274558/1676462274768&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1676462274659/1676462274660/1676462274888&quot;,&quot;1676462274659/1676462274660/1676462274958&quot;,&quot;1676462274659/1676462274660/1676462274915&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1676462274557/1676462274558/1676462274605&quot;,&quot;1676462274659/1676462274660/1676462274739&quot;,&quot;1676462274557/1676462274558/1676462274628&quot;,&quot;1544591751639/1547439831649/1544592253853&quot;,&quot;1676462274659/1676462274660/1676462274687&quot;,&quot;1676462274557/1676462274558/1676462274766&quot;,&quot;1676462274659/1676462274660/1676462274712&quot;,&quot;1544524003551/1544524304922/1544524387792&quot;,&quot;1676462274557/1676462274558/1676462274773&quot;,&quot;1676462274659/1676462274660/1676462274753&quot;,&quot;1676462274659/1676462274660/1676462274711&quot;,&quot;1544596644314/1547440046070/1544597345478&quot;,&quot;1676462274557/1676462274558/1676462274608&quot;,&quot;1676462274659/1676462274660/1676462274908&quot;,&quot;1676462274557/1676462274558/1676462274597&quot;,&quot;1676462274659/1676462274660/1676462274757&quot;,&quot;1676462274557/1676462274558/1676462274821&quot;,&quot;1676462274659/1676462274660/1676462274872&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1676462274557/1676462274558/1676462274591&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1676462274659/1676462274660/1676462274746&quot;,&quot;1676462274557/1676462274558/1676462274584&quot;,&quot;1676462274557/1676462274558/1676462274567&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544525043137/1544525159358/1544525217177&quot;,&quot;1676462274557/1676462274558/1676462274762&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1676462274557/1676462274558/1676462274640&quot;,&quot;1544592857014/1544593585947/1544593695538&quot;,&quot;1676462274557/1676462274558/1676462274816&quot;,&quot;1676462274659/1676462274660/1676462274840&quot;,&quot;1676462274659/1676462274660/1676462274733&quot;,&quot;1676462274659/1676462274660/1676462274715&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1676462274557/1676462274558/1676462274561&quot;,&quot;1544524003551/1544524012478/1544524071582&quot;,&quot;1676462274659/1676462274660/1676462274863&quot;,&quot;1676462274659/1676462274660/1676462274906&quot;,&quot;1676462274659/1676462274660/1676462274887&quot;,&quot;1676462274557/1676462274558/1676462274578&quot;,&quot;1676462274659/1676462274660/1676462274873&quot;,&quot;1544593830881/1544596248781/1544596283112&quot;,&quot;1676462274557/1676462274558/1676462274656&quot;,&quot;1676462274557/1676462274558/1676462274791&quot;,&quot;1676462274659/1676462274660/1676462274956&quot;,&quot;1676462274659/1676462274660/1676462274677&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1676462274557/1676462274558/1676462274786&quot;,&quot;1676462274557/1676462274558/1676462274602&quot;,&quot;1676462274557/1676462274558/1676462274637&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1676462274659/1676462274660/1676462274743&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1676462274659/1676462274660/1676462274693&quot;,&quot;1676462274659/1676462274660/1676462274682&quot;,&quot;1676462274659/1676462274660/1676462274909&quot;,&quot;1676462274659/1676462274660/1676462274930&quot;,&quot;1676462274659/1676462274660/1676462274926&quot;,&quot;1676462274557/1676462274558/1676462274787&quot;,&quot;1676462274659/1676462274660/1676462274751&quot;,&quot;1544592286221/1547439887065/1544592716116&quot;,&quot;1676462274659/1676462274660/1676462274836&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1676462274659/1676462274660/1676462274874&quot;,&quot;1676462274659/1676462274660/1676462274867&quot;,&quot;1676462274557/1676462274558/1676462274614&quot;,&quot;1676462274557/1676462274558/1676462274594&quot;,&quot;1676462274557/1676462274558/1676462274592&quot;,&quot;1676462274557/1676462274558/1676462274818&quot;,&quot;1676462274659/1676462274660/1676462274916&quot;,&quot;1676462274557/1676462274558/1676462274632&quot;,&quot;1676462274659/1676462274660/1676462274901&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1676462274557/1676462274558/1676462274636&quot;,&quot;1676462274557/1676462274558/1676462274789&quot;,&quot;1676462274659/1676462274660/1676462274904&quot;,&quot;1676462274557/1676462274558/1676462274811&quot;,&quot;1676462274557/1676462274558/1676462274571&quot;,&quot;1676462274557/1676462274558/1676462274769&quot;,&quot;1676462274659/1676462274660/1676462274940&quot;,&quot;1676462274557/1676462274558/1676462274650&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544522366063/1544522528807/1544522613530&quot;,&quot;1676462274557/1676462274558/1676462274622&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544524003551/1544524012478/1544524099346&quot;,&quot;1676462274659/1676462274660/1676462274741&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1676462274659/1676462274660/1676462274866&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1676462274659/1676462274660/1676462274717&quot;,&quot;1676462274557/1676462274558/1676462274655&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1676462274659/1676462274660/1676462274865&quot;,&quot;1676462274659/1676462274660/1676462274862&quot;,&quot;1544526345845/1544528319371/1544528402616&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1676462274659/1676462274660/1676462274942&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1676462274659/1676462274660/1676462274889&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1676462274659/1676462274660/1676462274875&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544525043137/1544525058289/1544525090848&quot;,&quot;1676462274557/1676462274558/1676462274629&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544524003551/1544524012478/1544524030068&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544592857014/1544593529004/1544593573380&quot;,&quot;1676462274659/1676462274660/1676462274716&quot;,&quot;1676462274659/1676462274660/1676462274760&quot;,&quot;1676462274659/1676462274660/1676462274676&quot;,&quot;1676462274659/1676462274660/1676462274939&quot;,&quot;1676462274659/1676462274660/1676462274938&quot;,&quot;1676462274659/1676462274660/1676462274755&quot;,&quot;1676462274659/1676462274660/1676462274932&quot;,&quot;1676462274659/1676462274660/1676462274675&quot;,&quot;1676462274659/1676462274660/1676462274703&quot;,&quot;1676462274659/1676462274660/1676462274720&quot;,&quot;1544591089661/1544591364773/1544591400139&quot;,&quot;1676462274659/1676462274660/1676462274722&quot;,&quot;1676462274557/1676462274558/1676462274609&quot;,&quot;1544596644314/1547440046070/1544597324337&quot;,&quot;1676462274659/1676462274660/1676462274860&quot;,&quot;1676462274659/1676462274660/1676462274727&quot;,&quot;1676462274659/1676462274660/1676462274671&quot;,&quot;1676462274659/1676462274660/1676462274705&quot;,&quot;1676462274659/1676462274660/1676462274883&quot;,&quot;1676462274557/1676462274558/1676462274588&quot;,&quot;1676462274557/1676462274558/1676462274647&quot;,&quot;1676462274659/1676462274660/1676462274696&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1676462274557/1676462274558/1676462274575&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1676462274557/1676462274558/1676462274633&quot;,&quot;1676462274557/1676462274558/1676462274587&quot;,&quot;1676462274659/1676462274660/1676462274701&quot;,&quot;1544521486954/1544521700309/1544521814257&quot;,&quot;1676462274557/1676462274558/1676462274814&quot;,&quot;1676462274557/1676462274558/1676462274777&quot;,&quot;1676462274659/1676462274660/1676462274949&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1676462274659/1676462274660/1676462274731&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1676462274557/1676462274558/1676462274642&quot;,&quot;1676462274557/1676462274558/1676462274580&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544524003551/1544524304922/1544524313700&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1676462274557/1676462274558/1676462274623&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1676462274557/1676462274558/1676462274616&quot;,&quot;1676462274659/1676462274660/1676462274880&quot;,&quot;1676462274659/1676462274660/1676462274914&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544521486954/1544521507623/1676462231296&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1676462274557/1676462274558/1676462274771&quot;,&quot;1676462274659/1676462274660/1676462274882&quot;,&quot;1676462274557/1676462274558/1676462274654&quot;,&quot;1676462274557/1676462274558/1676462274774&quot;,&quot;1676462274659/1676462274660/1676462274725&quot;,&quot;1676462274557/1676462274558/1676462274832&quot;,&quot;1676462274557/1676462274558/1676462274606&quot;,&quot;1676462274557/1676462274558/1676462274631&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1676462274659/1676462274660/1676462274869&quot;,&quot;1676462274659/1676462274660/1676462274931&quot;,&quot;1544591089661/1547439767627/1544591707621&quot;,&quot;1676462274659/1676462274660/1676462274684&quot;,&quot;1676462274659/1676462274660/1676462274913&quot;,&quot;1676462274659/1676462274660/1676462274959&quot;,&quot;1676462274659/1676462274660/1676462274924&quot;,&quot;1676462274659/1676462274660/1676462274885&quot;,&quot;1676462274659/1676462274660/1676462274947&quot;,&quot;1676462274659/1676462274660/1676462274846&quot;,&quot;1676462274659/1676462274660/1676462274934&quot;,&quot;1676462274659/1676462274660/1676462274848&quot;,&quot;1676462274659/1676462274660/1676462274842&quot;,&quot;1676462274659/1676462274660/1676462274920&quot;,&quot;1676462274659/1676462274660/1676462274937&quot;,&quot;1676462274659/1676462274660/1676462274952&quot;,&quot;1676462274659/1676462274660/1676462274929&quot;,&quot;1676462274659/1676462274660/1676462274898&quot;,&quot;1676462274659/1676462274660/1676462274884&quot;,&quot;1676462274659/1676462274660/1676462274923&quot;,&quot;1676462274659/1676462274660/1676462274948&quot;,&quot;1676462274659/1676462274660/1676462274918&quot;,&quot;1676462274659/1676462274660/1676462274896&quot;,&quot;1676462274659/1676462274660/1676462274921&quot;,&quot;1676462274659/1676462274660/1676462274945&quot;,&quot;1676462274659/1676462274660/1676462274919&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1676462274557/1676462274558/1676462274831&quot;,&quot;1544526345845/1544526779004/1544526946815&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1676462274659/1676462274660/1676462274844&quot;,&quot;1676462274557/1676462274558/1676462274648&quot;,&quot;1544521486954/1544521507623/1676462230045&quot;,&quot;1676462274557/1676462274558/1676462274593&quot;,&quot;1676462274557/1676462274558/1676462274611&quot;,&quot;1676462274557/1676462274558/1676462274599&quot;,&quot;1676462274557/1676462274558/1676462274641&quot;,&quot;1544592286221/1544592520233/1544592607117&quot;,&quot;1676462274557/1676462274558/1676462274826&quot;,&quot;1676462274659/1676462274660/1676462274661&quot;,&quot;1676462274659/1676462274660/1676462274718&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591989858/1544592139063&quot;,&quot;1676462274557/1676462274558/1676462274761&quot;,&quot;1676462274557/1676462274558/1676462274825&quot;,&quot;1676462274659/1676462274660/1676462274894&quot;,&quot;1676462274659/1676462274660/1676462274910&quot;,&quot;1676462274659/1676462274660/1676462274868&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1676462274557/1676462274558/1676462274570&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1676462274659/1676462274660/1676462274666&quot;,&quot;1676462274659/1676462274660/1676462274745&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1676462274557/1676462274558/1676462274651&quot;,&quot;1676462274557/1676462274558/1676462274819&quot;,&quot;1676462274659/1676462274660/1676462274710&quot;,&quot;1676462274557/1676462274558/1676462274563&quot;,&quot;1676462274659/1676462274660/1676462274933&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1676462274557/1676462274558/1676462274617&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1676462274659/1676462274660/1676462274879&quot;,&quot;1544526345845/1544526961740/1544527585431&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1676462274557/1676462274558/1676462274800&quot;,&quot;1676462274659/1676462274660/1676462274726&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1676462274659/1676462274660/1676462274927&quot;,&quot;1676462274659/1676462274660/1676462274861&quot;,&quot;1676462274557/1676462274558/1676462274574&quot;,&quot;1676462274659/1676462274660/1676462274946&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1676462274557/1676462274558/1676462274783&quot;,&quot;1544593830881/1547439992703/1544596607802&quot;,&quot;1676462274659/1676462274660/1676462274854&quot;,&quot;1676462274557/1676462274558/1676462274562&quot;,&quot;1544522366063/1544522377911/1544522473310&quot;,&quot;1676462274557/1676462274558/1676462274817&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544521486954/1544521700309/1544521756511&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1676462274557/1676462274558/1676462274577&quot;,&quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544522366063/1544522377911/1544522432187&quot;,&quot;1676462274557/1676462274558/1676462274795&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1676462274659/1676462274660/1676462274845&quot;,&quot;1544525043137/1544525058289/1544525143762&quot;,&quot;1676462274659/1676462274660/1676462274667&quot;,&quot;1676462274659/1676462274660/1676462274893&quot;,&quot;1676462274659/1676462274660/1676462274864&quot;,&quot;1676462274659/1676462274660/1676462274850&quot;,&quot;1676462274557/1676462274558/1676462274797&quot;,&quot;1544524003551/1544524304922/1544524324762&quot;,&quot;1676462274659/1676462274660/1676462274881&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1676462274659/1676462274660/1676462274689&quot;,&quot;1676462274557/1676462274558/1676462274803&quot;,&quot;1676462274659/1676462274660/1676462274935&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544522366063/1544522528807/1544522609573&quot;,&quot;1676462274659/1676462274660/1676462274837&quot;,&quot;1676462274557/1676462274558/1676462274569&quot;,&quot;1676462274659/1676462274660/1676462274859&quot;,&quot;1676462274557/1676462274558/1676462274560&quot;,&quot;1676462274557/1676462274558/1676462274781&quot;,&quot;1676462274557/1676462274558/1676462274775&quot;,&quot;1676462274557/1676462274558/1676462274820&quot;,&quot;1544525043137/1544525058289/1544525114886&quot;,&quot;1676462274659/1676462274660/1676462274750&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1676462274557/1676462274558/1676462274638&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544591751639/1547439831649/1544592270374&quot;,&quot;1676462274557/1676462274558/1676462274652&quot;,&quot;1544524003551/1544524304922/1544524376121&quot;,&quot;1676462274659/1676462274660/1676462274870&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1676462274557/1676462274558/1676462274822&quot;,&quot;1676462274659/1676462274660/1676462274847&quot;,&quot;1544596644314/1544597008306/1544597048285&quot;,&quot;1676462274557/1676462274558/1676462274596&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1676462274659/1676462274660/1676462274877&quot;,&quot;1544522366063/1544522377911/1544522492959&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1676462274557/1676462274558/1676462274805&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1676462274659/1676462274660/1676462274852&quot;,&quot;1676462274659/1676462274660/1676462274744&quot;,&quot;1676462274659/1676462274660/1676462274838&quot;,&quot;1676462274659/1676462274660/1676462274871&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1676462274659/1676462274660/1676462274954&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544522366063/1544522528807/1544522568979&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1676462274557/1676462274558/1676462274583&quot;,&quot;1676462274659/1676462274660/1676462274943&quot;,&quot;1676462274659/1676462274660/1676462274957&quot;,&quot;1676462274659/1676462274660/1676462274714&quot;,&quot;1676462274557/1676462274558/1676462274824&quot;,&quot;1676462274659/1676462274660/1676462274699&quot;,&quot;1676462274659/1676462274660/1676462274732&quot;,&quot;1676462274659/1676462274660/1676462274900&quot;,&quot;1676462274659/1676462274660/1676462274907&quot;,&quot;1676462274659/1676462274660/1676462274953&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1676462274557/1676462274558/1676462274778&quot;,&quot;1676462274659/1676462274660/1676462274891&quot;,&quot;1676462274557/1676462274558/1676462274568&quot;,&quot;1676462274659/1676462274660/1676462274902&quot;,&quot;1676462274557/1676462274558/1676462274607&quot;,&quot;1676462274659/1676462274660/1676462274843&quot;,&quot;1676462274557/1676462274558/1676462274763&quot;,&quot;1676462274659/1676462274660/1676462274730&quot;,&quot;1676462274557/1676462274558/1676462274767&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1676462274659/1676462274660/1676462274662&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544525043137/1544525058289/1544525097148&quot;,&quot;1544593830881/1547439992703/1544596586244&quot;,&quot;1676462274557/1676462274558/1676462274799&quot;,&quot;1676462274659/1676462274660/1676462274856&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1676462274557/1676462274558/1676462274815&quot;,&quot;1676462274659/1676462274660/1676462274912&quot;,&quot;1676462274659/1676462274660/1676462274724&quot;,&quot;1676462274557/1676462274558/1676462274658&quot;,&quot;1676462274557/1676462274558/1676462274635&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1676462274659/1676462274660/1676462274707&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1676462274557/1676462274558/1676462274576&quot;,&quot;1676462274557/1676462274558/1676462274830&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1676462274659/1676462274660/1676462274951&quot;,&quot;1676462274557/1676462274558/1676462274566&quot;,&quot;1676462274659/1676462274660/1676462274719&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1676462274659/1676462274660/1676462274742&quot;,&quot;1676462274659/1676462274660/1676462274704&quot;,&quot;1676462274557/1676462274558/1676462274776&quot;,&quot;1676462274659/1676462274660/1676462274839&quot;,&quot;1676462274557/1676462274558/1676462274792&quot;,&quot;1676462274659/1676462274660/1676462274886&quot;,&quot;1544522366063/1544522528807/1544522585734&quot;,&quot;1676462274659/1676462274660/1676462274897&quot;,&quot;1544592857014/1544593703192/1544593783453&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1676462274557/1676462274558/1676462274610&quot;,&quot;1676462274659/1676462274660/1676462274690&quot;,&quot;1676462274659/1676462274660/1676462274928&quot;,&quot;1676462274659/1676462274660/1676462274853&quot;,&quot;1544521486954/1544521700309/1544521716919&quot;,&quot;1676462274659/1676462274660/1676462274905&quot;,&quot;1676462274659/1676462274660/1676462274678&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544521486954/1544521700309/1544521782572&quot;,&quot;1676462274557/1676462274558/1676462274834&quot;,&quot;1676462274659/1676462274660/1676462274903&quot;,&quot;1676462274659/1676462274660/1676462274944&quot;,&quot;1676462274659/1676462274660/1676462274665&quot;,&quot;1544525043137/1544525058289/1544525125172&quot;,&quot;1676462274557/1676462274558/1676462274829&quot;,&quot;1676462274659/1676462274660/1676462274917&quot;,&quot;1544521486954/1544521507623/1676462274556&quot;,&quot;1676462274557/1676462274558/1676462274646&quot;,&quot;1676462274557/1676462274558/1676462274624&quot;,&quot;1676462274557/1676462274558/1676462274565&quot;,&quot;1676462274659/1676462274660/1676462274855&quot;,&quot;1544524003551/1544524012478/1544524044427&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1676462274659/1676462274660/1676462274736&quot;,&quot;1676462274557/1676462274558/1676462274779&quot;,&quot;1676462274659/1676462274660/1676462274694&quot;,&quot;1676462274659/1676462274660/1676462274890&quot;,&quot;1676462274557/1676462274558/1676462274645&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1676462274659/1676462274660/1676462274876&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1676462274557/1676462274558/1676462274639&quot;,&quot;1676462274557/1676462274558/1676462274653&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1676462274557/1676462274558/1676462274595&quot;,&quot;1676462274659/1676462274660/1676462274955&quot;,&quot;1676462274557/1676462274558/1676462274823&quot;,&quot;1544521486954/1544521700309/1544521796490&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1676462274557/1676462274558/1676462274573&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1676462274659/1676462274660/1676462274679&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1676462274557/1676462274558/1676462274780&quot;,&quot;1676462274557/1676462274558/1676462274598&quot;,&quot;1544521486954/1544521507623/1544521559147&quot;,&quot;1544522366063/1544522377911/1544522512903&quot;,&quot;1676462274659/1676462274660/1676462274672&quot;,&quot;1676462274557/1676462274558/1676462274808&quot;,&quot;1676462274557/1676462274558/1676462274790&quot;,&quot;1676462274659/1676462274660/1676462274680&quot;,&quot;1676462274659/1676462274660/1676462274851&quot;,&quot;1676462274659/1676462274660/1676462274892&quot;,&quot;1676462274659/1676462274660/1676462274878&quot;,&quot;1676462274659/1676462274660/1676462274857&quot;,&quot;1676462274659/1676462274660/1676462274925&quot;,&quot;1676462274659/1676462274660/1676462274950&quot;,
};

int loopCounter = Integer.parseInt(vars.get(&quot;asnmtCounter&quot;));
int start_index = Integer.parseInt(vars.get(&quot;start_index&quot;));


for (int i = 0; i &lt; 50; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[start_index+ i]);
}

start_index = start_index + 50;
vars.put(&quot;start_index&quot;, String.valueOf(start_index));</stringProp>
                </BeanShellSampler>
                <hashTree/>
                <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="assignment_name" enabled="true">
                  <stringProp name="filename"></stringProp>
                  <stringProp name="parameters"></stringProp>
                  <boolProp name="resetInterpreter">false</boolProp>
                  <stringProp name="script">prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;
prefix4 = vars.get(&quot;asnmtCounter&quot;);
prefix5 = vars.get(&quot;productcode&quot;);

assignmenttitle = &quot;Asgmt&quot; + &quot;_&quot;  +  prefix2 + &quot;_&quot; + prefix3 + &quot;_&quot; + prefix5 + &quot;_&quot; + prefix4 + &quot;_&quot; + &quot;50LOs&quot;;
vars.put(&quot;assignmenttitle&quot;, assignmenttitle);


</stringProp>
                </BeanShellPreProcessor>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create assigned paths" enabled="true">
                  <stringProp name="IncludeController.includepath">create_an_assigned_path_in_a_class_50LOs.jmx</stringProp>
                </IncludeController>
                <hashTree/>
                <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="assignment_list" enabled="true">
                  <stringProp name="BeanShellSampler.query">String apList = vars.get(&quot;assignedPathList&quot;);
apList = apList + &quot;,&quot; + vars.get(&quot;assigned_path_id&quot;);
vars.put(&quot;assignedPathList&quot;, apList);
</stringProp>
                </BeanShellSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Lock Rules and Custom Grading" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">createRule.csv</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">extuserid,classtitle,classCode,category</stringProp>
          </CSVDataSet>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilenameTch" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameTch</stringProp>
                <stringProp name="Argument.value">scenario_tch_asnmt_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="outputCsvFilenameStd" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilenameStd</stringProp>
                <stringProp name="Argument.value">student_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__timeShift(,,P365D,,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="assignedPathList" elementType="Argument">
                <stringProp name="Argument.name">assignedPathList</stringProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="title" elementType="Argument">
                <stringProp name="Argument.name">title</stringProp>
                <stringProp name="Argument.value">default gradebook 1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="gradebook_id" elementType="Argument">
                <stringProp name="Argument.name">gradebook_id</stringProp>
                <stringProp name="Argument.value">default-gradebook</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
            <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
            <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user" enabled="true">
            <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get_details_for_a_specific_class_All_Details" enabled="false">
            <stringProp name="IncludeController.includepath">Get_details_for_a_specific_class_All_Details.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific class" enabled="true">
            <stringProp name="IncludeController.includepath">Get_details_for_a_specific_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
              <stringProp name="RandomTimer.range">${minWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="create x rules for multiple PEs" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_rulesPECount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_rulesPECount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">PECounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] itemCodes = {
    &quot;1544525043137/1544525159358/1544525246748&quot;,&quot;1544525043137/1544525159358/1544525263160&quot;,&quot;1544525043137/1544525280855/1544525289279&quot;,&quot;1544525590768/1544525595533/1544525611432&quot;,&quot;1544525590768/1544525595533/1544525627465&quot;,&quot;1544525590768/1544525595533/1544525635696&quot;,&quot;1544525590768/1544525595533/1544525649026&quot;,&quot;1544525590768/1544525595533/1544525663048&quot;,&quot;1544525590768/1544525595533/1544525679427&quot;,&quot;1544525590768/1544525683364/1544525709799&quot;,&quot;1544525590768/1544525683364/1544525720457&quot;,&quot;1544525590768/1544525683364/1544525729515&quot;,&quot;1544525590768/1544525683364/1544525734676&quot;,&quot;1544525590768/1544525683364/1544525756801&quot;,&quot;1544525590768/1544525683364/1544525778291&quot;,&quot;1544526345845/1544526589100/1544526606750&quot;,&quot;1544526345845/1544526589100/1544526610825&quot;,&quot;1544526345845/1544526589100/1544526623799&quot;,&quot;1544526345845/1544526589100/1544526638110&quot;,&quot;1544526345845/1544526589100/1544526644717&quot;,&quot;1544526345845/1544526589100/1544526657285&quot;,&quot;1544526345845/1544526671965/1544526688230&quot;,&quot;1544526345845/1544526671965/1544526695320&quot;,&quot;1544526345845/1544526671965/1544526710051&quot;,&quot;1544526345845/1544526671965/1544526721801&quot;,&quot;1544526345845/1544526671965/1544526728620&quot;,&quot;1544526345845/1544526671965/1544526763389&quot;,&quot;1544526345845/1544526961740/1544526980657&quot;,&quot;1544526345845/1544526961740/1544526994099&quot;,&quot;1544526345845/1544526961740/1544527008225&quot;,&quot;1544526345845/1544528319371/1544528334775&quot;,&quot;1544526345845/1544528319371/1544528345283&quot;,&quot;1544526345845/1544528319371/1544528367998&quot;,&quot;1544591089661/1544591099675/1544591165699&quot;,&quot;1544591089661/1544591099675/1544591181584&quot;,&quot;1544591089661/1544591099675/1544591198772&quot;,&quot;1544591089661/1544591099675/1544591219876&quot;,&quot;1544591089661/1544591099675/1544591237488&quot;,&quot;1544591089661/1544591099675/1544591247402&quot;,&quot;1544591089661/1544591260222/1544591284840&quot;,&quot;1544591089661/1544591260222/1544591295680&quot;,&quot;1544591089661/1544591260222/1544591320423&quot;,&quot;1544591089661/1544591260222/1544591334581&quot;,&quot;1544591089661/1544591260222/1544591341221&quot;,&quot;1544591089661/1544591260222/1544591363137&quot;,&quot;1544591089661/1544591364773/1544591392809&quot;,&quot;1544591089661/1544591412698/1544591428190&quot;,&quot;1544591089661/1544591412698/1544591439057&quot;,&quot;1544591089661/1544591412698/1544591455780&quot;,&quot;1544591089661/1544591602655/1544591636888&quot;,&quot;1544591089661/1544591602655/1544591649137&quot;,&quot;1544591089661/1544591602655/1544591669971&quot;,&quot;1544591751639/1544591756584/1544591786410&quot;,&quot;1544591751639/1544591756584/1544591792950&quot;,&quot;1544591751639/1544591756584/1544591814105&quot;,&quot;1544591751639/1544591756584/1544591826125&quot;,&quot;1544591751639/1544591756584/1544591842867&quot;,&quot;1544591751639/1544591756584/1544591852005&quot;,&quot;1544591751639/1544591859950/1544591889129&quot;,&quot;1544591751639/1544591859950/1544591895035&quot;,&quot;1544591751639/1544591859950/1544591913490&quot;,&quot;1544591751639/1544591859950/1544591923488&quot;,&quot;1544591751639/1544591937229/1544591951092&quot;,&quot;1544591751639/1544591989858/1544592010989&quot;,&quot;1544591751639/1544591989858/1544592017149&quot;,&quot;1544591751639/1544591989858/1544592034736&quot;,&quot;1544591751639/1544592145731/1544592165309&quot;,&quot;1544591751639/1544592145731/1544592176780&quot;,&quot;1544591751639/1544592145731/1544592194540&quot;,&quot;1544592286221/1544592291887/1544592314873&quot;,&quot;1544592286221/1544592291887/1544592322911&quot;,&quot;1544592286221/1544592291887/1544592333414&quot;,&quot;1544592286221/1544592291887/1544592347743&quot;,&quot;1544592286221/1544592291887/1544592363784&quot;,&quot;1544592286221/1544592291887/1544592370486&quot;,&quot;1544592286221/1544592379241/1544592404760&quot;,&quot;1544592286221/1544592379241/1544592415158&quot;,&quot;1544592286221/1544592379241/1544592422449&quot;,&quot;1544592286221/1544592379241/1544592438186&quot;,&quot;1544592286221/1544592379241/1544592448263&quot;,&quot;1544592286221/1544592379241/1544592466092&quot;,&quot;1544592286221/1544592474205/1544592491253&quot;,&quot;1544592286221/1544592520233/1544592540334&quot;,&quot;1544592286221/1544592520233/1544592555974&quot;,&quot;1544592286221/1544592520233/1544592561671&quot;,&quot;1544592286221/1544592623523/1544592648386&quot;,&quot;1544592286221/1544592623523/1544592658543&quot;,&quot;1544592286221/1544592623523/1544592671565&quot;,&quot;1544592857014/1544592865722/1544593053271&quot;,&quot;1544592857014/1544592865722/1544593072380&quot;,&quot;1544592857014/1544592865722/1544593079694&quot;,&quot;1544592857014/1544592865722/1544593093552&quot;,&quot;1544592857014/1544592865722/1544593104748&quot;,&quot;1544592857014/1544592865722/1544593123201&quot;,&quot;1544592857014/1544593139545/1544593173865&quot;,&quot;1544592857014/1544593139545/1544593187008&quot;,&quot;1544592857014/1544593139545/1544593454057&quot;,&quot;1544592857014/1544593139545/1544593471128&quot;,&quot;1544592857014/1544593139545/1544593476327&quot;,&quot;1544592857014/1544593139545/1544593488247&quot;,&quot;1544592857014/1544593529004/1544593551477&quot;,&quot;1544592857014/1544593585947/1544593606215&quot;,&quot;1544592857014/1544593585947/1544593620647&quot;,&quot;1544592857014/1544593585947/1544593632079&quot;,&quot;1544592857014/1544593703192/1544593728070&quot;,&quot;1544592857014/1544593703192/1544593743725&quot;,&quot;1544592857014/1544593703192/1544593752239&quot;,&quot;1544593830881/1544593842258/1544593874472&quot;,&quot;1544593830881/1544593842258/1544593889640&quot;,&quot;1544593830881/1544593842258/1544593905062&quot;,&quot;1544593830881/1544593842258/1544593925051&quot;,&quot;1544593830881/1544593842258/1544593932560&quot;,&quot;1544593830881/1544593842258/1544593949312&quot;,&quot;1544593830881/1544593964252/1544594078882&quot;,&quot;1544593830881/1544593964252/1544594102416&quot;,&quot;1544593830881/1544593964252/1544594113782&quot;,&quot;1544593830881/1544593964252/1544594135462&quot;,&quot;1544593830881/1544593964252/1544594177257&quot;,&quot;1544593830881/1544593964252/1544594194047&quot;,&quot;1544593830881/1544596248781/1544596271349&quot;,&quot;1544593830881/1544596291616/1544596322099&quot;,&quot;1544593830881/1544596291616/1544596327463&quot;,&quot;1544593830881/1544596291616/1544596347700&quot;,&quot;1544593830881/1544596494652/1544596513093&quot;,&quot;1544593830881/1544596494652/1544596529922&quot;,&quot;1544593830881/1544596494652/1544596545929&quot;,&quot;1544596644314/1544596678647/1544596711546&quot;,&quot;1544596644314/1544596678647/1544596731689&quot;,&quot;1544596644314/1544596678647/1544596745950&quot;,&quot;1544596644314/1544596678647/1544596761923&quot;,&quot;1544596644314/1544596678647/1544596768254&quot;,&quot;1544596644314/1544596678647/1544596792897&quot;,&quot;1544596644314/1544596802487/1544596845016&quot;,&quot;1544596644314/1544596802487/1544596858389&quot;,&quot;1544596644314/1544596802487/1544596877787&quot;,&quot;1544596644314/1544596802487/1544596890399&quot;,&quot;1544596644314/1544596802487/1544596904838&quot;,&quot;1544596644314/1544596802487/1544596921860&quot;,&quot;1544596644314/1544597008306/1544597032165&quot;,&quot;1544596644314/1544597091060/1544597104557&quot;,&quot;1544596644314/1544597091060/1544597121860&quot;,&quot;1544596644314/1544597091060/1544597149347&quot;,&quot;1544596644314/1544597220792/1544597245750&quot;,&quot;1544596644314/1544597220792/1544597262426&quot;,&quot;1544596644314/1544597220792/1544597275965&quot;,&quot;1544593830881/1544596291616/1544596481675&quot;,&quot;1544593830881/1544596494652/1544596565260&quot;,&quot;1544596644314/1544597091060/1544597193850&quot;,&quot;1544596644314/1544597220792/1544597309385&quot;,&quot;1564112332682/1564112347344/1564112375692&quot;
};

for (int i = 0; i &lt; itemCodes.length; i++) {
    vars.put(&quot;itemcode&quot; + (i + 1), itemCodes[i]);
}

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Set PE for Rule creation" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};

//int randomIndex = (int) (Math.random() * stringArray.length);
int PECounter = Integer.parseInt(vars.get(&quot;PECounter&quot;));
PECounter = PECounter - 1;
String productValue = stringArray[PECounter];

vars.put(&quot;productcode&quot;, productValue);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 50LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_50LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_50LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 100LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_100LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_100LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Create 150LOsRules" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
            </LoopController>
            <hashTree>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end">${__evalVar(${category}_150LOsLockRuleCount)}</stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">lockRulesCount</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">true</boolProp>
                <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
              </CounterConfig>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">999999</stringProp>
                <stringProp name="minimumValue">000000</stringProp>
                <stringProp name="outputFormat">000000</stringProp>
                <boolProp name="perThread">true</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">randomNo</stringProp>
              </RandomVariableConfig>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="create a rule" enabled="true">
                <stringProp name="IncludeController.includepath">Create_a_rule_150LOs.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="create custom grading in a class" enabled="true"/>
          <hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a gradebook in a class" enabled="true">
              <stringProp name="IncludeController.includepath">Create_a_gradebook_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
              <stringProp name="BeanShellSampler.query">String[] multiProducts = {
    ${__evalVar(${category})}
};

String mergedColumnJson = &quot;[&quot;;
int customWeightage = 0;
int pendingWeightage = 0;
int remainingValue = 0;
String bundle = &quot;&quot;;

for (int i = 0; i &lt; multiProducts.length; i++) {
	bundle = multiProducts[i] + &quot;_bundle&quot;;
	mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;,\&quot;type\&quot;: \&quot;product\&quot;,\&quot;weightage\&quot;: \&quot;5\&quot;,\&quot;bundle-codes\&quot;: [\&quot;&quot; + vars.get(bundle) + &quot;\&quot;],\&quot;productcode\&quot;: \&quot;&quot; + multiProducts[i] + &quot;\&quot;},&quot;;
};

remainingValue = 100 - (5*(multiProducts.length));

customWeightage = remainingValue/(${__evalVar(${category}_customGradingCount)});
pendingWeightage = remainingValue%(${__evalVar(${category}_customGradingCount)});

for (int i = 1; i &lt;= ${__evalVar(${category}_customGradingCount)}; i++) {
	if(i != ${__evalVar(${category}_customGradingCount)}) {
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + customWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	} else {
		int finalWeightage = customWeightage + pendingWeightage;
		mergedColumnJson += &quot;{\&quot;column_id\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;,\&quot;type\&quot;: \&quot;custom\&quot;, \&quot;custom_component_code\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;title\&quot;: \&quot;PerfCustComp_&quot; + i + &quot;\&quot;, \&quot;weightage\&quot;: \&quot;&quot; + finalWeightage + &quot;\&quot;,\&quot;scoring_type\&quot;: \&quot;SIMPLE\&quot;},&quot;;
	}
};

mergedColumnJson = mergedColumnJson.substring(0, mergedColumnJson.length() - 1) + &quot;]&quot;;

vars.put(&quot;mergedColumnJsonFinal&quot;, mergedColumnJson);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
                <stringProp name="RandomTimer.range">${minWait}</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add columns to a particular gradebook of a class" enabled="true">
              <stringProp name="IncludeController.includepath">Add_columns_to_a_particular_gradebook_of_a_class_with_custom_components.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
        </hashTree>
        <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Attempts and User State - Students" enabled="false">
          <intProp name="ThroughputController.style">1</intProp>
          <boolProp name="ThroughputController.perThread">false</boolProp>
          <intProp name="ThroughputController.maxThroughput">1</intProp>
          <FloatProperty>
            <name>ThroughputController.percentThroughput</name>
            <value>100.0</value>
            <savedValue>0.0</savedValue>
          </FloatProperty>
        </ThroughputController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">attempts.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">extuserid,cc,category</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
          </CSVDataSet>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="true">
            <stringProp name="BeanShellSampler.query">String[] stringArray = {${__evalVar(${category}_Assignment)}};  

for (int i = 0; i &lt; stringArray.length; i++) {
    vars.put(vars.get(&quot;category&quot;) + &quot;_productcode&quot; + (i + 1), stringArray[i]);
}

vars.put(&quot;productcode&quot;, stringArray[0]);

vars.put(&quot;folderid&quot;, &quot;activity-state/&quot; + &quot;${orgid}&quot; + &quot;/&quot; + stringArray[0] + &quot;/1544525043137/1544525159358/1544525239184&quot;);
vars.put(&quot;productfolderid&quot;, &quot;product-state/&quot; + &quot;${orgid}&quot; + &quot;/&quot; + stringArray[0]);
vars.put(&quot;psfolderid&quot;, &quot;activity-state/&quot; + &quot;${orgid}&quot; + &quot;/&quot; + stringArray[0] + &quot;/1544592857014/1544593585947/1544593695538&quot;);</stringProp>
          </BeanShellSampler>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="itemcode" elementType="Argument">
                <stringProp name="Argument.name">itemcode</stringProp>
                <stringProp name="Argument.value">1544525043137/1544525159358/1544525239184</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="psitemcode" elementType="Argument">
                <stringProp name="Argument.name">psitemcode</stringProp>
                <stringProp name="Argument.value">1544592857014/1544593585947/1544593695538</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="documentid" elementType="Argument">
                <stringProp name="Argument.name">documentid</stringProp>
                <stringProp name="Argument.value">lastKnown</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="timestamp" elementType="Argument">
                <stringProp name="Argument.name">timestamp</stringProp>
                <stringProp name="Argument.value">${__time(,)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
            <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
            <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user_institution.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get classes of an user" enabled="true">
            <stringProp name="IncludeController.includepath">Get_classes_of_an_user_institution.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific class" enabled="true">
            <stringProp name="IncludeController.includepath">Get_details_for_a_specific_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
              <stringProp name="RandomTimer.range">${minWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">${category}_productcode</stringProp>
            <stringProp name="ForeachController.returnVal">productcode</stringProp>
            <boolProp name="ForeachController.useSeparator">false</boolProp>
            <stringProp name="ForeachController.startIndex">0</stringProp>
            <stringProp name="ForeachController.endIndex">${__evalVar(${category}_Scorable_PE_Count)}</stringProp>
          </ForeachController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="A Student simulating reading (Multiple pages) and post the statements" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__jexl2(${__evalVar(${category}_Scorable)}*4)}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">p_cat1.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">task,verb</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.thread</stringProp>
              </CSVDataSet>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on Learning Pathway" enabled="false">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">${userProgress_min_1011}</stringProp>
                  <stringProp name="RandomTimer.range">${userProgress_max_1011}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add a new statement" enabled="true">
                <stringProp name="IncludeController.includepath">Add_statements.jmx</stringProp>
              </IncludeController>
              <hashTree/>
              <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on Learning Pathway" enabled="false">
                <intProp name="ActionProcessor.action">1</intProp>
                <intProp name="ActionProcessor.target">0</intProp>
                <stringProp name="ActionProcessor.duration">0</stringProp>
              </TestAction>
              <hashTree>
                <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                  <stringProp name="ConstantTimer.delay">${userProgress_min_1011}</stringProp>
                  <stringProp name="RandomTimer.range">${userProgress_max_1011}</stringProp>
                </UniformRandomTimer>
                <hashTree/>
              </hashTree>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Update user&apos;s application state for a product or class (product)" enabled="false">
                <stringProp name="IncludeController.includepath">Update_user_application_state_for_a_product_or_class_product_.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create_documents_of_folders_for_learner_item_level" enabled="true">
            <stringProp name="IncludeController.includepath">Create_documents_of_folders_for_learner_item_level_scorable.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <ForeachController guiclass="ForeachControlPanel" testclass="ForeachController" testname="ForEach Controller" enabled="true">
            <stringProp name="ForeachController.inputVal">${category}_productcode</stringProp>
            <stringProp name="ForeachController.returnVal">productcode</stringProp>
            <boolProp name="ForeachController.useSeparator">false</boolProp>
            <stringProp name="ForeachController.startIndex">0</stringProp>
            <stringProp name="ForeachController.endIndex">${__evalVar(${category}_Pskill_PE_Count)}</stringProp>
          </ForeachController>
          <hashTree>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="A Student simulating reading (Multiple pages) and post the statements" enabled="true">
              <boolProp name="LoopController.continue_forever">true</boolProp>
              <stringProp name="LoopController.loops">${__jexl2(${__evalVar(${category}_Pskill)}*4)}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
                <stringProp name="filename">product_sections_pskills_e1_4items_cat1.csv</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">pstask,psverb</stringProp>
                <boolProp name="ignoreFirstLine">false</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.thread</stringProp>
              </CSVDataSet>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Add a new statement" enabled="true">
                <stringProp name="IncludeController.includepath">Add_statements_pskill_contributesToCompletion.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create_documents_of_folders_for_learner_item_level" enabled="true">
            <stringProp name="IncludeController.includepath">Create_documents_of_folders_for_learner_item_level_pskill.jmx</stringProp>
          </IncludeController>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Convert core data output to json utility input format" enabled="false"/>
        <hashTree>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="outputCsvFilename" elementType="Argument">
                <stringProp name="Argument.name">outputCsvFilename</stringProp>
                <stringProp name="Argument.value">details_${__time()}.csv</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">extuserids.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames">extuserid,classCode,category</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
            <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="validate_classcode" enabled="true">
            <stringProp name="IncludeController.includepath">validate_classcode.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="output_csv_creation" enabled="true">
            <stringProp name="BeanShellSampler.query">FileOutputStream out = new FileOutputStream(vars.get(&quot;outputCsvFilename&quot;), true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;classid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;userid&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;firstname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;lastname&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;category&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
</stringProp>
          </BeanShellSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Class Assignments"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">deleteAssignments.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">extuserid,classtitle,classcode,category</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces">
            <stringProp name="IncludeController.includepath">Get_all_the_User_Spaces.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user">
            <stringProp name="IncludeController.includepath">Get_an_access_token_for_an_external_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="get_classes_of_an_user">
            <stringProp name="IncludeController.includepath">get_classes_of_an_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get details for a specific class">
            <stringProp name="IncludeController.includepath">Get_details_for_a_specific_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time on dashboard" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">${maxWait}</stringProp>
              <stringProp name="RandomTimer.range">${minWait}</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get assignments a specific class">
            <stringProp name="IncludeController.includepath">get_all_assigned_path_of_a_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="delete x assignments">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">${__evalVar(${category}_asgmtDeleteCount)}</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end">${__evalVar(${category}_asgmtDeleteCount)}</stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">assignedpathidCounter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="get assignmentId for deletion">
              <stringProp name="BeanShellSampler.query">// Assuming assigned_path_id_ALL is dynamically resolved at runtime
String assigned_path_id_ALL = vars.get(&quot;assigned_path_id_ALL&quot;);  // Dynamically resolved variable in JMeter or similar context

// Split the string by commas to create the array of UUIDs or values
String[] stringArray = assigned_path_id_ALL.split(&quot;,&quot;);

// Get the counter value and adjust it to be 0-based
int assignedpathidCounter = Integer.parseInt(vars.get(&quot;assignedpathidCounter&quot;));
assignedpathidCounter = assignedpathidCounter - 1; // Decrement to match the 0-based index

// Ensure the counter is within valid bounds (i.e., the length of stringArray)
if (assignedpathidCounter &gt;= 0 &amp;&amp; assignedpathidCounter &lt; stringArray.length) {
    String productValue = stringArray[assignedpathidCounter];
    // Store the result in a variable map or context (e.g., JMeter&apos;s vars object)
    vars.put(&quot;assignedpathid&quot;, productValue);
} else {
    // Handle invalid counter values
    System.out.println(&quot;Invalid counter value: &quot; + assignedpathidCounter);
}
</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Delete assigned paths">
              <stringProp name="IncludeController.includepath">delete_an_assigned_path_in_a_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>true</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <fileName>true</fileName>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler - Tear-down-cleanup" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.io.*;
import java.util.ArrayList;


	String outputFile = vars.get(&quot;outputFile&quot;);  // Get input file name
	String inputFile = vars.get(&quot;outputCsvFilenameStd&quot;);
	print(&quot;outputFile2....&quot;);
	print(outputFile);
	BufferedReader reader = new BufferedReader(new FileReader(inputFile));
	ArrayList validRows = new ArrayList();
	String line;
	ArrayList validLengthsA = new ArrayList();
	print(&quot;1&quot;);
	validLengthsA.add(29);
	validLengthsA.add(30);
	validLengthsA.add(31);
	validLengthsA.add(33);
	print(&quot;2&quot;);
    int validLengthB = 9;  
    int validLengthC = 2; 

    while ((line = reader.readLine()) != null) {
        String[] columns = line.split(&quot;,&quot;); // Assuming CSV is comma-separated
        
        // Check if the row meets the criteria
        boolean isValid = columns.length &gt;= 3 &amp;&amp; // Ensure there are at least 3 columns
            validLengthsA.contains(columns[0].length()) &amp;&amp; 
            columns[1].length() == validLengthB &amp;&amp;         
            columns[2].length() == validLengthC;          

        if (isValid) {
            validRows.add(line); // Keep the valid rows
//            validRows.add(&quot;\n&quot;);
        }
    }
    reader.close();
    // Overwrite the file with only valid rows
//    String cleanedFileName = originalFileName.replaceFirst(&quot;\\.csv$&quot;, &quot;_cleaned.csv&quot;);
//    print(&quot;outfile file namw&quot;, cleanedFileName);
    BufferedWriter writer = new BufferedWriter(new FileWriter(outputFile, false));
//	FileOutputStream writer = new FileOutputStream(vars.get(outputFile), false);
    
    for (String validRow : validRows) {
        writer.write(validRow);
        writer.newLine();
    }
    writer.close();

    log.info(&quot;CSV file processed successfully. Invalid rows removed.&quot;);
    print(&quot;3&quot;);
//    print(&quot;3&quot;);
//    	print(validRows);
//     print(&quot;\n&quot;);
        
    
	


</stringProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
