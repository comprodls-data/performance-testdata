<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ComproDLS Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="users" elementType="Argument">
            <stringProp name="Argument.name">users</stringProp>
            <stringProp name="Argument.value">${__P(users,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="rampup" elementType="Argument">
            <stringProp name="Argument.name">rampup</stringProp>
            <stringProp name="Argument.value">${__P(rampup,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filename" elementType="Argument">
            <stringProp name="Argument.name">filename</stringProp>
            <stringProp name="Argument.value">${__P(filename,1019.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performance Test Data Setup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${users}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${rampup}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Alpha RECRECREATION" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="startTime" elementType="Argument">
              <stringProp name="Argument.name">startTime</stringProp>
              <stringProp name="Argument.value">1504224000000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="minWait" elementType="Argument">
              <stringProp name="Argument.name">minWait</stringProp>
              <stringProp name="Argument.value">1000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="maxWait" elementType="Argument">
              <stringProp name="Argument.name">maxWait</stringProp>
              <stringProp name="Argument.value">1500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="asyncWait" elementType="Argument">
              <stringProp name="Argument.name">asyncWait</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="learning_progress" elementType="Argument">
              <stringProp name="Argument.name">learning_progress</stringProp>
              <stringProp name="Argument.value">12</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_url" elementType="Argument">
              <stringProp name="Argument.name">auth_url</stringProp>
              <stringProp name="Argument.value">${__P(auth_url,dls-cup-alpha-302611962.us-west-2.elb.amazonaws.com/lb-auth)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="product_url" elementType="Argument">
              <stringProp name="Argument.name">product_url</stringProp>
              <stringProp name="Argument.value">${__P(product_url,dls-cup-alpha-302611962.us-west-2.elb.amazonaws.com/lb-product)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="collab_url" elementType="Argument">
              <stringProp name="Argument.name">collab_url</stringProp>
              <stringProp name="Argument.value">${__P(collab_url,dls-cup-alpha-302611962.us-west-2.elb.amazonaws.com/lb-collab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="xapi_url" elementType="Argument">
              <stringProp name="Argument.name">xapi_url</stringProp>
              <stringProp name="Argument.value">${__P(xapi_url,dls-cup-alpha-302611962.us-west-2.elb.amazonaws.com/lb-xapi)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="analytics_url" elementType="Argument">
              <stringProp name="Argument.name">analytics_url</stringProp>
              <stringProp name="Argument.value">${__P(analytics_url,dls-cup-alpha-302611962.us-west-2.elb.amazonaws.com/lb-analytics)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activity_url" elementType="Argument">
              <stringProp name="Argument.name">activity_url</stringProp>
              <stringProp name="Argument.value">${__P(activity_url,dls-cup-alpha-302611962.us-west-2.elb.amazonaws.com/lb-activity)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accountid" elementType="Argument">
              <stringProp name="Argument.name">accountid</stringProp>
              <stringProp name="Argument.value">${__P(Account_id,cup1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productcode2" elementType="Argument">
              <stringProp name="Argument.name">productcode2</stringProp>
              <stringProp name="Argument.value">${__P(product_code,evolve_l2)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ext_product_id2" elementType="Argument">
              <stringProp name="Argument.name">ext_product_id2</stringProp>
              <stringProp name="Argument.value">${__P(product_code,comproalpha222333444)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productid2" elementType="Argument">
              <stringProp name="Argument.name">productid2</stringProp>
              <stringProp name="Argument.value">${__P(productid,f0165bdf-ed9f-11e8-965c-0242ac110003)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productcode" elementType="Argument">
              <stringProp name="Argument.name">productcode</stringProp>
              <stringProp name="Argument.value">${__P(product_code,evolve_l1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ext_product_id" elementType="Argument">
              <stringProp name="Argument.name">ext_product_id</stringProp>
              <stringProp name="Argument.value">${__P(product_code,comproalpha111222333)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productid" elementType="Argument">
              <stringProp name="Argument.name">productid</stringProp>
              <stringProp name="Argument.value">${__P(productid,fe31e5e6-edb0-11e8-945e-0242ac110003)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacecode" elementType="Argument">
              <stringProp name="Argument.name">spacecode</stringProp>
              <stringProp name="Argument.value">${__P(space_code,INT-ORG-ONE)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="task" elementType="Argument">
              <stringProp name="Argument.name">task</stringProp>
              <stringProp name="Argument.value">${__P(task_code,1528285334091/1528285590109/1528286220783)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classcode2" elementType="Argument">
              <stringProp name="Argument.name">classcode2</stringProp>
              <stringProp name="Argument.value">${__P(class_code,i4f2-jfeh)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="verb" elementType="Argument">
              <stringProp name="Argument.name">verb</stringProp>
              <stringProp name="Argument.value">${__P(verb_type,launched)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacecode2" elementType="Argument">
              <stringProp name="Argument.name">spacecode2</stringProp>
              <stringProp name="Argument.value">${__P(space_code,INT-ORG-TWO)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="multipleUsersForEnrollment" elementType="Argument">
              <stringProp name="Argument.name">multipleUsersForEnrollment</stringProp>
              <stringProp name="Argument.value">${__P(userset,&quot;e2e24ada-cdf6-11e8-aaf7-0242ac110003&quot;)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="product-enddate" elementType="Argument">
              <stringProp name="Argument.name">product-enddate</stringProp>
              <stringProp name="Argument.value">${__P(end_date,1575719566000)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="date" elementType="Argument">
              <stringProp name="Argument.name">date</stringProp>
              <stringProp name="Argument.value">${__time(HMS)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="extuserid" elementType="Argument">
              <stringProp name="Argument.name">extuserid</stringProp>
              <stringProp name="Argument.value">${__P(ext,11111111)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classname" elementType="Argument">
              <stringProp name="Argument.name">classname</stringProp>
              <stringProp name="Argument.value">${__P(classname,newclass)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="orgid" elementType="Argument">
              <stringProp name="Argument.name">orgid</stringProp>
              <stringProp name="Argument.value">${__P(orgid,integ-test1-alpha)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="classcode" elementType="Argument">
              <stringProp name="Argument.name">classcode</stringProp>
              <stringProp name="Argument.value">${__P(class_code,28a6-7jHT)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="shorgid" elementType="Argument">
              <stringProp name="Argument.name">shorgid</stringProp>
              <stringProp name="Argument.value">${__P(shorgid,sh_alpha_cup1_1)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="shproductid" elementType="Argument">
              <stringProp name="Argument.name">shproductid</stringProp>
              <stringProp name="Argument.value">${__P(productid,ffb63bc2-edb0-11e8-945e-0242ac110003)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="itemcode" elementType="Argument">
              <stringProp name="Argument.name">itemcode</stringProp>
              <stringProp name="Argument.value">${__P(itemcode,1528285334091/1528285590109/1528286220783)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="counter" elementType="Argument">
              <stringProp name="Argument.name">counter</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup teacher accounts, create classes and associate a product_1003_Pre" enabled="true"/>
        <hashTree>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix0 = &quot;perf_prod&quot;;
prefix1 = &quot;teacher&quot;;
prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;

extuserid = prefix0 + &quot;_&quot; + prefix1 + &quot;_&quot; + prefix2+ &quot;_&quot; + prefix3;

vars.put(&quot;extuserid&quot;, extuserid);
</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">prefix1 = &quot;perf_class&quot;;
prefix2 = vars.get(&quot;date&quot;);
prefix3 = ctx.getThread().getThreadNum() + 1;

classname = prefix1 + &quot;_&quot; +  prefix2 + &quot;_&quot; + prefix3;
vars.put(&quot;classname&quot;, classname);</stringProp>
          </BeanShellPreProcessor>
          <hashTree/>
          <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="startdate" elementType="Argument">
                <stringProp name="Argument.name">startdate</stringProp>
                <stringProp name="Argument.value">${__P(Start_Date,1535799974000)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="enddate" elementType="Argument">
                <stringProp name="Argument.name">enddate</stringProp>
                <stringProp name="Argument.value">${__P(End_Date,1567335974000)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </Arguments>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
            <stringProp name="IncludeController.includepath">Fragements/Join_a_space_with_space_code.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">11000</stringProp>
              <stringProp name="RandomTimer.range">9000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
            <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
            <stringProp name="IncludeController.includepath">Fragements/Get_an_access_token_for_an_external_user.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
            <stringProp name="IncludeController.includepath">Fragements/data_create_new_instructor_led_class.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">String filename = vars.get(&quot;filename&quot;);
FileOutputStream out = new FileOutputStream(filename, true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
fstream.close();

</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">7000</stringProp>
              <stringProp name="RandomTimer.range">7000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate a product with a class" enabled="true">
            <stringProp name="IncludeController.includepath">Fragements/associate_a_product_with_class2.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">0</stringProp>
          </TestAction>
          <hashTree>
            <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
              <stringProp name="ConstantTimer.delay">14000</stringProp>
              <stringProp name="RandomTimer.range">9000</stringProp>
            </UniformRandomTimer>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">aggregatereport_${date}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
