<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="ComproDLS Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">F:\apache-jmeter-4.0\bin\Testdata</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Azgard Updated" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="appid" elementType="Argument">
            <stringProp name="Argument.name">appid</stringProp>
            <stringProp name="Argument.value">default</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="startTime" elementType="Argument">
            <stringProp name="Argument.name">startTime</stringProp>
            <stringProp name="Argument.value">1504224000000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sectionCounter" elementType="Argument">
            <stringProp name="Argument.name">sectionCounter</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="minWait" elementType="Argument">
            <stringProp name="Argument.name">minWait</stringProp>
            <stringProp name="Argument.value">2000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="productSummary_max" elementType="Argument">
            <stringProp name="Argument.name">productSummary_max</stringProp>
            <stringProp name="Argument.value">8000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="productToc_max" elementType="Argument">
            <stringProp name="Argument.name">productToc_max</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="productRightpane_max" elementType="Argument">
            <stringProp name="Argument.name">productRightpane_max</stringProp>
            <stringProp name="Argument.value">8000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activityStream_max" elementType="Argument">
            <stringProp name="Argument.name">activityStream_max</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="reader_max" elementType="Argument">
            <stringProp name="Argument.name">reader_max</stringProp>
            <stringProp name="Argument.value">8000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dashboard_max" elementType="Argument">
            <stringProp name="Argument.name">dashboard_max</stringProp>
            <stringProp name="Argument.value">8000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="postComment_max" elementType="Argument">
            <stringProp name="Argument.name">postComment_max</stringProp>
            <stringProp name="Argument.value">2500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="userProgress_max" elementType="Argument">
            <stringProp name="Argument.name">userProgress_max</stringProp>
            <stringProp name="Argument.value">3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="auth_url" elementType="Argument">
            <stringProp name="Argument.name">auth_url</stringProp>
            <stringProp name="Argument.value">${__P(auth_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-auth)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="product_url" elementType="Argument">
            <stringProp name="Argument.name">product_url</stringProp>
            <stringProp name="Argument.value">${__P(product_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-product)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="collab_url" elementType="Argument">
            <stringProp name="Argument.name">collab_url</stringProp>
            <stringProp name="Argument.value">${__P(collab_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-collab)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="xapi_url" elementType="Argument">
            <stringProp name="Argument.name">xapi_url</stringProp>
            <stringProp name="Argument.value">${__P(xapi_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-xapi)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="analytics_url" elementType="Argument">
            <stringProp name="Argument.name">analytics_url</stringProp>
            <stringProp name="Argument.value">${__P(analytics_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-analytics)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="activity_url" elementType="Argument">
            <stringProp name="Argument.name">activity_url</stringProp>
            <stringProp name="Argument.value">${__P(activity_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-activity)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="chapter_num" elementType="Argument">
            <stringProp name="Argument.name">chapter_num</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="section_num" elementType="Argument">
            <stringProp name="Argument.name">section_num</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="accountid" elementType="Argument">
            <stringProp name="Argument.name">accountid</stringProp>
            <stringProp name="Argument.value">${__P(Account_id,jaskaran)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="productcode" elementType="Argument">
            <stringProp name="Argument.name">productcode</stringProp>
            <stringProp name="Argument.value">${__P(product_code,evolve_12)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ext_product_id" elementType="Argument">
            <stringProp name="Argument.name">ext_product_id</stringProp>
            <stringProp name="Argument.value">${__P(product_code,12-evolve-12)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="spacecode" elementType="Argument">
            <stringProp name="Argument.name">spacecode</stringProp>
            <stringProp name="Argument.value">${__P(space_code,AAA-BBB-CCC)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="task" elementType="Argument">
            <stringProp name="Argument.name">task</stringProp>
            <stringProp name="Argument.value">${__P(task_code,1528190348277/1528190372600/1528190482680)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="productid" elementType="Argument">
            <stringProp name="Argument.name">productid</stringProp>
            <stringProp name="Argument.value">${__P(productid,f4b98d53-b822-11e8-bfe1-0ac1053f7f68)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="date" elementType="Argument">
            <stringProp name="Argument.name">date</stringProp>
            <stringProp name="Argument.value">${__time(YMDHMS)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Performance Test Data Setup" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">800</stringProp>
        <stringProp name="ThreadGroup.ramp_time">900</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Azgard Updated" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="appid" elementType="Argument">
              <stringProp name="Argument.name">appid</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startTime" elementType="Argument">
              <stringProp name="Argument.name">startTime</stringProp>
              <stringProp name="Argument.value">1504224000000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sectionCounter" elementType="Argument">
              <stringProp name="Argument.name">sectionCounter</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="minWait" elementType="Argument">
              <stringProp name="Argument.name">minWait</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productSummary_max" elementType="Argument">
              <stringProp name="Argument.name">productSummary_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productToc_max" elementType="Argument">
              <stringProp name="Argument.name">productToc_max</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productRightpane_max" elementType="Argument">
              <stringProp name="Argument.name">productRightpane_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activityStream_max" elementType="Argument">
              <stringProp name="Argument.name">activityStream_max</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="reader_max" elementType="Argument">
              <stringProp name="Argument.name">reader_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dashboard_max" elementType="Argument">
              <stringProp name="Argument.name">dashboard_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="postComment_max" elementType="Argument">
              <stringProp name="Argument.name">postComment_max</stringProp>
              <stringProp name="Argument.value">2500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_url" elementType="Argument">
              <stringProp name="Argument.name">auth_url</stringProp>
              <stringProp name="Argument.value">${__P(auth_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-auth)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="product_url" elementType="Argument">
              <stringProp name="Argument.name">product_url</stringProp>
              <stringProp name="Argument.value">${__P(product_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-product)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="collab_url" elementType="Argument">
              <stringProp name="Argument.name">collab_url</stringProp>
              <stringProp name="Argument.value">${__P(collab_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-collab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="xapi_url" elementType="Argument">
              <stringProp name="Argument.name">xapi_url</stringProp>
              <stringProp name="Argument.value">${__P(xapi_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-xapi)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="analytics_url" elementType="Argument">
              <stringProp name="Argument.name">analytics_url</stringProp>
              <stringProp name="Argument.value">${__P(analytics_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-analytics)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activity_url" elementType="Argument">
              <stringProp name="Argument.name">activity_url</stringProp>
              <stringProp name="Argument.value">${__P(activity_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-activity)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chapter_num" elementType="Argument">
              <stringProp name="Argument.name">chapter_num</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="section_num" elementType="Argument">
              <stringProp name="Argument.name">section_num</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accountid" elementType="Argument">
              <stringProp name="Argument.name">accountid</stringProp>
              <stringProp name="Argument.value">${__P(Account_id,jaskaran)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productcode" elementType="Argument">
              <stringProp name="Argument.name">productcode</stringProp>
              <stringProp name="Argument.value">${__P(product_code,evolve_12)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ext_product_id" elementType="Argument">
              <stringProp name="Argument.name">ext_product_id</stringProp>
              <stringProp name="Argument.value">${__P(product_code,12-evolve-12)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacecode" elementType="Argument">
              <stringProp name="Argument.name">spacecode</stringProp>
              <stringProp name="Argument.value">${__P(space_code,AAA-BBB-CCC)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="task" elementType="Argument">
              <stringProp name="Argument.name">task</stringProp>
              <stringProp name="Argument.value">${__P(task_code,1528190348277/1528190372600/1528190482680)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productid" elementType="Argument">
              <stringProp name="Argument.name">productid</stringProp>
              <stringProp name="Argument.value">${__P(productid,f4b98d53-b822-11e8-bfe1-0ac1053f7f68)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1003" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup teacher accounts, create classes and associate a product" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="startdate" elementType="Argument">
                  <stringProp name="Argument.name">startdate</stringProp>
                  <stringProp name="Argument.value">${__P(Start_Date,1535799974000)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="enddate" elementType="Argument">
                  <stringProp name="Argument.name">enddate</stringProp>
                  <stringProp name="Argument.value">${__P(End_Date,1567335974000)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">Testdata\2set_1014.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">extuserid,classname</stringProp>
            </CSVDataSet>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get All the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">60000</stringProp>
                <stringProp name="RandomTimer.range">40000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/data_create_new_instructor_led_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">FileOutputStream out = new FileOutputStream(&quot;F:/apache-jmeter-4/bin/teacher_class1.csv&quot;, true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
fstream.close();

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">10000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get Products of first space" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_products_of_first_space.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate a product with a class" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/associate_a_product_with_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup students account in a institution space with class and product" enabled="true"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">Testdata\dataset\Existing _Student_Class_Product1.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">extuserid,classcode</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
              <collectionProp name="Arguments.arguments">
                <elementProp name="appid" elementType="Argument">
                  <stringProp name="Argument.name">appid</stringProp>
                  <stringProp name="Argument.value">default</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="startTime" elementType="Argument">
                  <stringProp name="Argument.name">startTime</stringProp>
                  <stringProp name="Argument.value">1504224000000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sectionCounter" elementType="Argument">
                  <stringProp name="Argument.name">sectionCounter</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="minWait" elementType="Argument">
                  <stringProp name="Argument.name">minWait</stringProp>
                  <stringProp name="Argument.value">2000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productSummary_max" elementType="Argument">
                  <stringProp name="Argument.name">productSummary_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productToc_max" elementType="Argument">
                  <stringProp name="Argument.name">productToc_max</stringProp>
                  <stringProp name="Argument.value">3000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productRightpane_max" elementType="Argument">
                  <stringProp name="Argument.name">productRightpane_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activityStream_max" elementType="Argument">
                  <stringProp name="Argument.name">activityStream_max</stringProp>
                  <stringProp name="Argument.value">3000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="reader_max" elementType="Argument">
                  <stringProp name="Argument.name">reader_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dashboard_max" elementType="Argument">
                  <stringProp name="Argument.name">dashboard_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="postComment_max" elementType="Argument">
                  <stringProp name="Argument.name">postComment_max</stringProp>
                  <stringProp name="Argument.value">2500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="userProgress_max" elementType="Argument">
                  <stringProp name="Argument.name">userProgress_max</stringProp>
                  <stringProp name="Argument.value">30000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auth_url" elementType="Argument">
                  <stringProp name="Argument.name">auth_url</stringProp>
                  <stringProp name="Argument.value">${__P(auth_url,auth-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="product_url" elementType="Argument">
                  <stringProp name="Argument.name">product_url</stringProp>
                  <stringProp name="Argument.value">${__P(product_url,product-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="collab_url" elementType="Argument">
                  <stringProp name="Argument.name">collab_url</stringProp>
                  <stringProp name="Argument.value">${__P(collab_url,collab-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xapi_url" elementType="Argument">
                  <stringProp name="Argument.name">xapi_url</stringProp>
                  <stringProp name="Argument.value">${__P(xapi_url,xapi-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="analytics_url" elementType="Argument">
                  <stringProp name="Argument.name">analytics_url</stringProp>
                  <stringProp name="Argument.value">${__P(analytics_url,analytics-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activity_url" elementType="Argument">
                  <stringProp name="Argument.name">activity_url</stringProp>
                  <stringProp name="Argument.value">${__P(activity_url,activity-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="chapter_num" elementType="Argument">
                  <stringProp name="Argument.name">chapter_num</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="section_num" elementType="Argument">
                  <stringProp name="Argument.name">section_num</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="accountid" elementType="Argument">
                  <stringProp name="Argument.name">accountid</stringProp>
                  <stringProp name="Argument.value">${__P(Account_id,compro)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="classcode" elementType="Argument">
                  <stringProp name="Argument.name">classcode</stringProp>
                  <stringProp name="Argument.value">${__P(class_code,ca3C-jW4B)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productcode" elementType="Argument">
                  <stringProp name="Argument.name">productcode</stringProp>
                  <stringProp name="Argument.value">${__P(product_code,evolve_l2)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ext_product_id" elementType="Argument">
                  <stringProp name="Argument.name">ext_product_id</stringProp>
                  <stringProp name="Argument.value">${__P(product_code,compro444555666)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="task" elementType="Argument">
                  <stringProp name="Argument.name">task</stringProp>
                  <stringProp name="Argument.value">${__P(task_code,1528190348277/1528190372600/1528190508292)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Join_Spaces_with_product_code and_class_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">30000</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">10</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="generate_teacher_100" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">10</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="userType" elementType="Argument">
              <stringProp name="Argument.name">userType</stringProp>
              <stringProp name="Argument.value">teacher</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="outputFilePath" elementType="Argument">
              <stringProp name="Argument.name">outputFilePath</stringProp>
              <stringProp name="Argument.value">testdata/teacher_100.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Include Controller" enabled="true">
          <stringProp name="IncludeController.includepath">generate_username.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="join_space_create_class_associate_product" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables - Azgard Updated" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="appid" elementType="Argument">
              <stringProp name="Argument.name">appid</stringProp>
              <stringProp name="Argument.value">default</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="startTime" elementType="Argument">
              <stringProp name="Argument.name">startTime</stringProp>
              <stringProp name="Argument.value">1504224000000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="sectionCounter" elementType="Argument">
              <stringProp name="Argument.name">sectionCounter</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="minWait" elementType="Argument">
              <stringProp name="Argument.name">minWait</stringProp>
              <stringProp name="Argument.value">2000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productSummary_max" elementType="Argument">
              <stringProp name="Argument.name">productSummary_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productToc_max" elementType="Argument">
              <stringProp name="Argument.name">productToc_max</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productRightpane_max" elementType="Argument">
              <stringProp name="Argument.name">productRightpane_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activityStream_max" elementType="Argument">
              <stringProp name="Argument.name">activityStream_max</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="reader_max" elementType="Argument">
              <stringProp name="Argument.name">reader_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dashboard_max" elementType="Argument">
              <stringProp name="Argument.name">dashboard_max</stringProp>
              <stringProp name="Argument.value">8000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="postComment_max" elementType="Argument">
              <stringProp name="Argument.name">postComment_max</stringProp>
              <stringProp name="Argument.value">2500</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="userProgress_max" elementType="Argument">
              <stringProp name="Argument.name">userProgress_max</stringProp>
              <stringProp name="Argument.value">3000</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="auth_url" elementType="Argument">
              <stringProp name="Argument.name">auth_url</stringProp>
              <stringProp name="Argument.value">${__P(auth_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-auth)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="product_url" elementType="Argument">
              <stringProp name="Argument.name">product_url</stringProp>
              <stringProp name="Argument.value">${__P(product_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-product)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="collab_url" elementType="Argument">
              <stringProp name="Argument.name">collab_url</stringProp>
              <stringProp name="Argument.value">${__P(collab_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-collab)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="xapi_url" elementType="Argument">
              <stringProp name="Argument.name">xapi_url</stringProp>
              <stringProp name="Argument.value">${__P(xapi_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-xapi)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="analytics_url" elementType="Argument">
              <stringProp name="Argument.name">analytics_url</stringProp>
              <stringProp name="Argument.value">${__P(analytics_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-analytics)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="activity_url" elementType="Argument">
              <stringProp name="Argument.name">activity_url</stringProp>
              <stringProp name="Argument.value">${__P(activity_url,dls-cup-staging1-960553130.us-east-1.elb.amazonaws.com/lb-activity)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="chapter_num" elementType="Argument">
              <stringProp name="Argument.name">chapter_num</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="section_num" elementType="Argument">
              <stringProp name="Argument.name">section_num</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="accountid" elementType="Argument">
              <stringProp name="Argument.name">accountid</stringProp>
              <stringProp name="Argument.value">${__P(Account_id,jaskaran)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productcode" elementType="Argument">
              <stringProp name="Argument.name">productcode</stringProp>
              <stringProp name="Argument.value">${__P(product_code,evolve_12)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ext_product_id" elementType="Argument">
              <stringProp name="Argument.name">ext_product_id</stringProp>
              <stringProp name="Argument.value">${__P(product_code,12-evolve-12)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="spacecode" elementType="Argument">
              <stringProp name="Argument.name">spacecode</stringProp>
              <stringProp name="Argument.value">${__P(space_code,AAA-BBB-CCC)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="task" elementType="Argument">
              <stringProp name="Argument.name">task</stringProp>
              <stringProp name="Argument.value">${__P(task_code,1528190348277/1528190372600/1528190482680)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="productid" elementType="Argument">
              <stringProp name="Argument.name">productid</stringProp>
              <stringProp name="Argument.value">${__P(productid,f4b98d53-b822-11e8-bfe1-0ac1053f7f68)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1003" enabled="true"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup teacher accounts, create classes and associate a product" enabled="true"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="startdate" elementType="Argument">
                  <stringProp name="Argument.name">startdate</stringProp>
                  <stringProp name="Argument.value">${__P(Start_Date,1535799974000)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="enddate" elementType="Argument">
                  <stringProp name="Argument.name">enddate</stringProp>
                  <stringProp name="Argument.value">${__P(End_Date,1567335974000)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="classname" elementType="Argument">
                  <stringProp name="Argument.name">classname</stringProp>
                  <stringProp name="Argument.value">${__time()}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding">UTF-8</stringProp>
              <stringProp name="filename">testdata\teacher_100.csv</stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <boolProp name="quotedData">true</boolProp>
              <boolProp name="recycle">false</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">true</boolProp>
              <stringProp name="variableNames">extuserid</stringProp>
            </CSVDataSet>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get All the User Spaces" enabled="false">
              <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with Space Code" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Join_a_space_with_space_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for Joining Space" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">2500</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">30000</stringProp>
                <stringProp name="RandomTimer.range">20000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get an access token for an external user" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_an_access_token_for_an_external_user.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create a new Instructor-led class" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/data_create_new_instructor_led_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="script">teacherName = vars.get();





FileOutputStream out = new FileOutputStream(&quot;testdata/teacher_class1.csv&quot;, true);
String SEPARATOR = &quot;,&quot;;
String LineSEPARATOR = &quot;\n&quot;;
out.write(vars.get(&quot;teachername&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classtitle&quot;).getBytes());
out.write(SEPARATOR.getBytes());
out.write(vars.get(&quot;classcode&quot;).getBytes());
out.write(LineSEPARATOR.getBytes());

out.flush();
out.close();
fstream.close();

</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">10000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get Products of first space" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_products_of_first_space.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Associate a product with a class" enabled="false">
              <stringProp name="IncludeController.includepath">Fragements/associate_a_product_with_class.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Wait time for associating a product to a class" enabled="false">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">0</stringProp>
            </TestAction>
            <hashTree>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
                <stringProp name="ConstantTimer.delay">10000</stringProp>
                <stringProp name="RandomTimer.range">5000</stringProp>
              </UniformRandomTimer>
              <hashTree/>
            </hashTree>
            <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
              <boolProp name="displayJMeterProperties">false</boolProp>
              <boolProp name="displayJMeterVariables">true</boolProp>
              <boolProp name="displaySystemProperties">false</boolProp>
            </DebugSampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Setup students account in a institution space with class and product" enabled="false"/>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
              <stringProp name="delimiter">,</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="filename">Testdata\dataset\Existing _Student_Class_Product1.csv</stringProp>
              <boolProp name="ignoreFirstLine">true</boolProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <stringProp name="shareMode">shareMode.group</stringProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="variableNames">extuserid,classcode</stringProp>
            </CSVDataSet>
            <hashTree/>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="false">
              <collectionProp name="Arguments.arguments">
                <elementProp name="appid" elementType="Argument">
                  <stringProp name="Argument.name">appid</stringProp>
                  <stringProp name="Argument.value">default</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="startTime" elementType="Argument">
                  <stringProp name="Argument.name">startTime</stringProp>
                  <stringProp name="Argument.value">1504224000000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="sectionCounter" elementType="Argument">
                  <stringProp name="Argument.name">sectionCounter</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="minWait" elementType="Argument">
                  <stringProp name="Argument.name">minWait</stringProp>
                  <stringProp name="Argument.value">2000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productSummary_max" elementType="Argument">
                  <stringProp name="Argument.name">productSummary_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productToc_max" elementType="Argument">
                  <stringProp name="Argument.name">productToc_max</stringProp>
                  <stringProp name="Argument.value">3000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productRightpane_max" elementType="Argument">
                  <stringProp name="Argument.name">productRightpane_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activityStream_max" elementType="Argument">
                  <stringProp name="Argument.name">activityStream_max</stringProp>
                  <stringProp name="Argument.value">3000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="reader_max" elementType="Argument">
                  <stringProp name="Argument.name">reader_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="dashboard_max" elementType="Argument">
                  <stringProp name="Argument.name">dashboard_max</stringProp>
                  <stringProp name="Argument.value">8000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="postComment_max" elementType="Argument">
                  <stringProp name="Argument.name">postComment_max</stringProp>
                  <stringProp name="Argument.value">2500</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="userProgress_max" elementType="Argument">
                  <stringProp name="Argument.name">userProgress_max</stringProp>
                  <stringProp name="Argument.value">30000</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="auth_url" elementType="Argument">
                  <stringProp name="Argument.name">auth_url</stringProp>
                  <stringProp name="Argument.value">${__P(auth_url,auth-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="product_url" elementType="Argument">
                  <stringProp name="Argument.name">product_url</stringProp>
                  <stringProp name="Argument.value">${__P(product_url,product-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="collab_url" elementType="Argument">
                  <stringProp name="Argument.name">collab_url</stringProp>
                  <stringProp name="Argument.value">${__P(collab_url,collab-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="xapi_url" elementType="Argument">
                  <stringProp name="Argument.name">xapi_url</stringProp>
                  <stringProp name="Argument.value">${__P(xapi_url,xapi-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="analytics_url" elementType="Argument">
                  <stringProp name="Argument.name">analytics_url</stringProp>
                  <stringProp name="Argument.value">${__P(analytics_url,analytics-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="activity_url" elementType="Argument">
                  <stringProp name="Argument.name">activity_url</stringProp>
                  <stringProp name="Argument.value">${__P(activity_url,activity-staging1.comprodls.com)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="chapter_num" elementType="Argument">
                  <stringProp name="Argument.name">chapter_num</stringProp>
                  <stringProp name="Argument.value">0</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="section_num" elementType="Argument">
                  <stringProp name="Argument.name">section_num</stringProp>
                  <stringProp name="Argument.value">1</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="accountid" elementType="Argument">
                  <stringProp name="Argument.name">accountid</stringProp>
                  <stringProp name="Argument.value">${__P(Account_id,compro)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="classcode" elementType="Argument">
                  <stringProp name="Argument.name">classcode</stringProp>
                  <stringProp name="Argument.value">${__P(class_code,ca3C-jW4B)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="productcode" elementType="Argument">
                  <stringProp name="Argument.name">productcode</stringProp>
                  <stringProp name="Argument.value">${__P(product_code,evolve_l2)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="ext_product_id" elementType="Argument">
                  <stringProp name="Argument.name">ext_product_id</stringProp>
                  <stringProp name="Argument.value">${__P(product_code,compro444555666)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
                <elementProp name="task" elementType="Argument">
                  <stringProp name="Argument.name">task</stringProp>
                  <stringProp name="Argument.value">${__P(task_code,1528190348277/1528190372600/1528190508292)}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Join Spaces with product_code and class_code" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Join_Spaces_with_product_code and_class_code.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Test Action" enabled="true">
              <intProp name="ActionProcessor.action">1</intProp>
              <intProp name="ActionProcessor.target">0</intProp>
              <stringProp name="ActionProcessor.duration">30000</stringProp>
            </TestAction>
            <hashTree>
              <ConstantTimer guiclass="ConstantTimerGui" testclass="ConstantTimer" testname="Constant Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">10</stringProp>
              </ConstantTimer>
              <hashTree/>
            </hashTree>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Get all the User Spaces" enabled="true">
              <stringProp name="IncludeController.includepath">Fragements/Get_all_the_User_Spaces.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
